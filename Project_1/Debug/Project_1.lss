
Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00004d06  00004d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000af  008001ea  008001ea  00004f24  2**0
                  ALLOC
  3 .stab         00005fac  00000000  00000000  00004f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b09  00000000  00000000  0000aed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000eb79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011176  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000124fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000136d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000144f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_1>
       8:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_2>
       c:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__vector_10>
      2c:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 21 	call	0x4362	; 0x4362 <main>
      8a:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 26 	jmp	0x4cac	; 0x4cac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 26 	jmp	0x4cac	; 0x4cac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ea       	ldi	r22, 0xAC	; 172
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 54       	subi	r30, 0x4C	; 76
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <WDT_Enable>:

#include "WDT_Private.h"
#include "STD_TYPES.h"

void WDT_Enable(WDT_T time)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = 0b11101000 | time ;
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 6e       	ori	r24, 0xE8	; 232
     e42:	80 83       	st	Z, r24
}
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <WDT_Disable>:

void WDT_Disable(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
     e54:	e1 e4       	ldi	r30, 0x41	; 65
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	88 e1       	ldi	r24, 0x18	; 24
     e5a:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     e5c:	e1 e4       	ldi	r30, 0x41	; 65
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	10 82       	st	Z, r1
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <UART_Voidinit>:
char uart_rx_buffer[UART_RX_BUFFER_SIZE];
volatile u32 uart_rx_buffer_index = 0;
volatile u32 uart_rx_buffer_full = 0;

void UART_Voidinit(Init_mode *Init_value)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <UART_Voidinit+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <UART_Voidinit+0x8>
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9d 83       	std	Y+5, r25	; 0x05
     e78:	8c 83       	std	Y+4, r24	; 0x04
	u8 UCSRC_var=128;//0b1000 0000
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Baud_var=0;
     e7e:	1a 82       	std	Y+2, r1	; 0x02
     e80:	19 82       	std	Y+1, r1	; 0x01

	/*U2X Mode Select*/
	UCSRA &= U2X_MSK;
     e82:	ab e2       	ldi	r26, 0x2B	; 43
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	eb e2       	ldi	r30, 0x2B	; 43
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8c 7f       	andi	r24, 0xFC	; 252
     e8e:	8c 93       	st	X, r24
	UCSRA |= (Init_value->U2X_init)<<U2X;
     e90:	ab e2       	ldi	r26, 0x2B	; 43
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e2       	ldi	r30, 0x2B	; 43
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	ec 81       	ldd	r30, Y+4	; 0x04
     e9e:	fd 81       	ldd	r31, Y+5	; 0x05
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	82 2b       	or	r24, r18
     eac:	8c 93       	st	X, r24

	/* RX enable*/
	UCSRB &= Rx_MSK;
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8f 7e       	andi	r24, 0xEF	; 239
     eba:	8c 93       	st	X, r24
	UCSRB |= (Init_value->RX_init)<<4;
     ebc:	aa e2       	ldi	r26, 0x2A	; 42
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e2       	ldi	r30, 0x2A	; 42
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	28 2f       	mov	r18, r24
     ec8:	ec 81       	ldd	r30, Y+4	; 0x04
     eca:	fd 81       	ldd	r31, Y+5	; 0x05
     ecc:	80 81       	ld	r24, Z
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	82 95       	swap	r24
     ed4:	92 95       	swap	r25
     ed6:	90 7f       	andi	r25, 0xF0	; 240
     ed8:	98 27       	eor	r25, r24
     eda:	80 7f       	andi	r24, 0xF0	; 240
     edc:	98 27       	eor	r25, r24
     ede:	82 2b       	or	r24, r18
     ee0:	8c 93       	st	X, r24

	/*Tx enable*/
	UCSRB &= Tx_MSK;
     ee2:	aa e2       	ldi	r26, 0x2A	; 42
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e2       	ldi	r30, 0x2A	; 42
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	8c 93       	st	X, r24
	UCSRB |= (Init_value->TX_init)<<3;
     ef0:	aa e2       	ldi	r26, 0x2A	; 42
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e2       	ldi	r30, 0x2A	; 42
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	ec 81       	ldd	r30, Y+4	; 0x04
     efe:	fd 81       	ldd	r31, Y+5	; 0x05
     f00:	81 81       	ldd	r24, Z+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	82 2b       	or	r24, r18
     f14:	8c 93       	st	X, r24

	/*char size select*/
	UCSRB &=CharSize_Msk;
     f16:	aa e2       	ldi	r26, 0x2A	; 42
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	8c 93       	st	X, r24
	UCSRB |= (GET_BIT((Init_value->Char_Size_init),2))<<2;
     f24:	aa e2       	ldi	r26, 0x2A	; 42
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	ec 81       	ldd	r30, Y+4	; 0x04
     f32:	fd 81       	ldd	r31, Y+5	; 0x05
     f34:	83 81       	ldd	r24, Z+3	; 0x03
     f36:	86 95       	lsr	r24
     f38:	86 95       	lsr	r24
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	81 70       	andi	r24, 0x01	; 1
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	82 2b       	or	r24, r18
     f4c:	8c 93       	st	X, r24

	/*synchronous and asynchronous select*/
	UCSRC_var|=(Init_value->UART_init_mode)<<6;
     f4e:	ec 81       	ldd	r30, Y+4	; 0x04
     f50:	fd 81       	ldd	r31, Y+5	; 0x05
     f52:	85 81       	ldd	r24, Z+5	; 0x05
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	00 24       	eor	r0, r0
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	07 94       	ror	r0
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	07 94       	ror	r0
     f66:	98 2f       	mov	r25, r24
     f68:	80 2d       	mov	r24, r0
     f6a:	98 2f       	mov	r25, r24
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	89 2b       	or	r24, r25
     f70:	8b 83       	std	Y+3, r24	; 0x03
	/*parity select*/
	UCSRC_var|=(Init_value->Parity_init)<<4;
     f72:	ec 81       	ldd	r30, Y+4	; 0x04
     f74:	fd 81       	ldd	r31, Y+5	; 0x05
     f76:	86 81       	ldd	r24, Z+6	; 0x06
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	82 95       	swap	r24
     f7e:	92 95       	swap	r25
     f80:	90 7f       	andi	r25, 0xF0	; 240
     f82:	98 27       	eor	r25, r24
     f84:	80 7f       	andi	r24, 0xF0	; 240
     f86:	98 27       	eor	r25, r24
     f88:	98 2f       	mov	r25, r24
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	89 2b       	or	r24, r25
     f8e:	8b 83       	std	Y+3, r24	; 0x03

	/*number of stop bits select*/
	UCSRC_var|=(Init_value->Stop_init)<<3;
     f90:	ec 81       	ldd	r30, Y+4	; 0x04
     f92:	fd 81       	ldd	r31, Y+5	; 0x05
     f94:	84 81       	ldd	r24, Z+4	; 0x04
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	98 2f       	mov	r25, r24
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	89 2b       	or	r24, r25
     fac:	8b 83       	std	Y+3, r24	; 0x03

	/*char size 3rd bit clear*/
	CLR_BIT((Init_value->Char_Size_init),2);
     fae:	ec 81       	ldd	r30, Y+4	; 0x04
     fb0:	fd 81       	ldd	r31, Y+5	; 0x05
     fb2:	83 81       	ldd	r24, Z+3	; 0x03
     fb4:	8b 7f       	andi	r24, 0xFB	; 251
     fb6:	ec 81       	ldd	r30, Y+4	; 0x04
     fb8:	fd 81       	ldd	r31, Y+5	; 0x05
     fba:	83 83       	std	Z+3, r24	; 0x03
	/*char size first two bits select*/
	UCSRC_var|=((Init_value->Char_Size_init)<<1);
     fbc:	ec 81       	ldd	r30, Y+4	; 0x04
     fbe:	fd 81       	ldd	r31, Y+5	; 0x05
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	98 2f       	mov	r25, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	89 2b       	or	r24, r25
     fd0:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC=UCSRC_var;
     fd2:	e0 e4       	ldi	r30, 0x40	; 64
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	80 83       	st	Z, r24

	Baud_var=BaudRate_Func((Init_value->BaudRate));//300
     fda:	ec 81       	ldd	r30, Y+4	; 0x04
     fdc:	fd 81       	ldd	r31, Y+5	; 0x05
     fde:	87 81       	ldd	r24, Z+7	; 0x07
     fe0:	90 85       	ldd	r25, Z+8	; 0x08
     fe2:	a1 85       	ldd	r26, Z+9	; 0x09
     fe4:	b2 85       	ldd	r27, Z+10	; 0x0a
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	bb 1f       	adc	r27, r27
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	aa 1f       	adc	r26, r26
     ff4:	bb 1f       	adc	r27, r27
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	aa 1f       	adc	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	aa 1f       	adc	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	9c 01       	movw	r18, r24
    1008:	ad 01       	movw	r20, r26
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	94 e2       	ldi	r25, 0x24	; 36
    100e:	a4 ef       	ldi	r26, 0xF4	; 244
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    101a:	da 01       	movw	r26, r20
    101c:	c9 01       	movw	r24, r18
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(Baud_var&0xFF);
    1024:	e9 e2       	ldi	r30, 0x29	; 41
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	80 83       	st	Z, r24
	if(Baud_var>255)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	91 05       	cpc	r25, r1
    1034:	59 f0       	breq	.+22     	; 0x104c <UART_Voidinit+0x1e4>
    1036:	50 f0       	brcs	.+20     	; 0x104c <UART_Voidinit+0x1e4>
	{
		Baud_var=Baud_var>>8;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	89 2f       	mov	r24, r25
    103e:	99 27       	eor	r25, r25
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
		UBRRH=Baud_var;
    1044:	e0 e4       	ldi	r30, 0x40	; 64
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <UART_VoidTransmitMessagesynchronous>:

void UART_VoidTransmitMessagesynchronous(u8 signal)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,5)==0)
    1068:	eb e2       	ldi	r30, 0x2B	; 43
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 95       	swap	r24
    1070:	86 95       	lsr	r24
    1072:	87 70       	andi	r24, 0x07	; 7
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	a1 f3       	breq	.-24     	; 0x1068 <UART_VoidTransmitMessagesynchronous+0xc>
	{

	}
	UDR=signal;
    1080:	ec e2       	ldi	r30, 0x2C	; 44
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	80 83       	st	Z, r24

}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <UART_voidTransmitSting>:

void UART_voidTransmitSting(u8 *str)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <UART_voidTransmitSting+0x6>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;str[i] != '\0';i++)
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <UART_voidTransmitSting+0x30>
	{
		UART_VoidTransmitMessagesynchronous(str[i]);
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	80 81       	ld	r24, Z
    10b6:	0e 94 2e 08 	call	0x105c	; 0x105c <UART_VoidTransmitMessagesynchronous>

}

void UART_voidTransmitSting(u8 *str)
{
	for(u8 i=0;str[i] != '\0';i++)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	80 81       	ld	r24, Z
    10d2:	88 23       	and	r24, r24
    10d4:	39 f7       	brne	.-50     	; 0x10a4 <UART_voidTransmitSting+0x14>
	{
		UART_VoidTransmitMessagesynchronous(str[i]);

	}
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <UART_VoidReceiveMessagesynchronous>:

u8 UART_VoidReceiveMessagesynchronous(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7)==0)
    10ea:	eb e2       	ldi	r30, 0x2B	; 43
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 23       	and	r24, r24
    10f2:	dc f7       	brge	.-10     	; 0x10ea <UART_VoidReceiveMessagesynchronous+0x8>
	{

	}
	return UDR;
    10f4:	ec e2       	ldi	r30, 0x2C	; 44
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <UART_voidReceiveString>:

void UART_voidReceiveString(u8 *buffer) {
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <UART_voidReceiveString+0xa>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	9b 83       	std	Y+3, r25	; 0x03
    1112:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    1114:	19 82       	std	Y+1, r1	; 0x01
    while (1) {

        buffer[i] = UART_VoidReceiveMessagesynchronous();
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	8c 01       	movw	r16, r24
    1122:	02 0f       	add	r16, r18
    1124:	13 1f       	adc	r17, r19
    1126:	0e 94 71 08 	call	0x10e2	; 0x10e2 <UART_VoidReceiveMessagesynchronous>
    112a:	f8 01       	movw	r30, r16
    112c:	80 83       	st	Z, r24
        if (buffer[i] == '.')
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	fc 01       	movw	r30, r24
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	80 81       	ld	r24, Z
    1140:	8e 32       	cpi	r24, 0x2E	; 46
    1142:	21 f0       	breq	.+8      	; 0x114c <UART_voidReceiveString+0x4c>
        {
            break;
        }
        i++;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	e5 cf       	rjmp	.-54     	; 0x1116 <UART_voidReceiveString+0x16>
    }
    buffer[i+1] = '\0';
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 01       	movw	r18, r24
    1154:	2f 5f       	subi	r18, 0xFF	; 255
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	9b 81       	ldd	r25, Y+3	; 0x03
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	10 82       	st	Z, r1
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <resetString>:

void resetString(u8 *str, u8 size) {
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <resetString+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <resetString+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9b 83       	std	Y+3, r25	; 0x03
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	6c 83       	std	Y+4, r22	; 0x04
    for (u8 i = 0; i < size; i++) {
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <resetString+0x2e>
        str[i] = 0x00; // Set each character to null
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	fc 01       	movw	r30, r24
    1196:	e2 0f       	add	r30, r18
    1198:	f3 1f       	adc	r31, r19
    119a:	10 82       	st	Z, r1
    }
    buffer[i+1] = '\0';
}

void resetString(u8 *str, u8 size) {
    for (u8 i = 0; i < size; i++) {
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	99 81       	ldd	r25, Y+1	; 0x01
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	98 17       	cp	r25, r24
    11a8:	80 f3       	brcs	.-32     	; 0x118a <resetString+0x16>
        str[i] = 0x00; // Set each character to null
    }
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <MASTER_SEND_ADDRESS_WRITE>:
#include "TWI_Types.h"
#include "TWI_cfg.h"
#include "TWI_init.h"

void MASTER_SEND_ADDRESS_WRITE(u8 adress)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01

	if(adress<128)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	88 23       	and	r24, r24
    11c8:	fc f0       	brlt	.+62     	; 0x1208 <MASTER_SEND_ADDRESS_WRITE+0x50>
	{
		//WRITE ADDRESS IN REG TWAR
		TWDR=adress<<1;
    11ca:	e3 e2       	ldi	r30, 0x23	; 35
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	88 0f       	add	r24, r24
    11d2:	80 83       	st	Z, r24
		// CLEAR BIT 0 TO WTITE
		CLR_BIT(TWDR,0);
    11d4:	a3 e2       	ldi	r26, 0x23	; 35
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e2       	ldi	r30, 0x23	; 35
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
		// CLEAR START BIT
		CLR_BIT(TWCR,TWSTA);
    11e2:	a6 e5       	ldi	r26, 0x56	; 86
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e5       	ldi	r30, 0x56	; 86
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7d       	andi	r24, 0xDF	; 223
    11ee:	8c 93       	st	X, r24
		//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
		SET_BIT(TWCR,TWINT);
    11f0:	a6 e5       	ldi	r26, 0x56	; 86
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e6 e5       	ldi	r30, 0x56	; 86
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 68       	ori	r24, 0x80	; 128
    11fc:	8c 93       	st	X, r24
		//BUSY W8 OF FLAG
		while(!GET_BIT(TWCR,TWINT));
    11fe:	e6 e5       	ldi	r30, 0x56	; 86
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 23       	and	r24, r24
    1206:	dc f7       	brge	.-10     	; 0x11fe <MASTER_SEND_ADDRESS_WRITE+0x46>
		//check in status code
		//while(STATUSE_CODE != ADDRESS_W_transmitted);


	}
}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <MASTER_SEND_DATA>:
void MASTER_SEND_DATA             (u8 data)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    121c:	e3 e2       	ldi	r30, 0x23	; 35
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	80 83       	st	Z, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
    1224:	a6 e5       	ldi	r26, 0x56	; 86
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e6 e5       	ldi	r30, 0x56	; 86
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 68       	ori	r24, 0x80	; 128
    1230:	8c 93       	st	X, r24

	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
    1232:	e6 e5       	ldi	r30, 0x56	; 86
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 23       	and	r24, r24
    123a:	dc f7       	brge	.-10     	; 0x1232 <MASTER_SEND_DATA+0x22>
	//check in status code
	//while(STATUSE_CODE != DATA_TRASMIT_WITH_ACK);

}
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <vMASTER_REP_START_condition>:
void vMASTER_REP_START_condition  (void)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	//SET START BIT CONDITION
	SET_BIT(TWCR,TWSTA);
    124c:	a6 e5       	ldi	r26, 0x56	; 86
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e6 e5       	ldi	r30, 0x56	; 86
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 62       	ori	r24, 0x20	; 32
    1258:	8c 93       	st	X, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
    125a:	a6 e5       	ldi	r26, 0x56	; 86
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	8c 93       	st	X, r24
	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
    1268:	e6 e5       	ldi	r30, 0x56	; 86
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 23       	and	r24, r24
    1270:	dc f7       	brge	.-10     	; 0x1268 <vMASTER_REP_START_condition+0x24>
	//check in status code
	//while(STATUSE_CODE != repSTART_condition_transmitted);
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <MASTER_SEND_ADDRESS_READ>:
void MASTER_SEND_ADDRESS_READ     (u8 adress)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01

	if(adress<128)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 23       	and	r24, r24
    1288:	fc f0       	brlt	.+62     	; 0x12c8 <MASTER_SEND_ADDRESS_READ+0x50>
	{
		//WRITE ADDRESS IN REG TWAR
		TWDR=adress<<1;
    128a:	e3 e2       	ldi	r30, 0x23	; 35
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	88 0f       	add	r24, r24
    1292:	80 83       	st	Z, r24
		// SET BIT 0 TO READ  -> SALVE TRASMIT
		SET_BIT(TWDR,TWGCE);
    1294:	a3 e2       	ldi	r26, 0x23	; 35
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e2       	ldi	r30, 0x23	; 35
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	8c 93       	st	X, r24
		// CLEAR START BIT
		CLR_BIT(TWCR,TWSTA);
    12a2:	a6 e5       	ldi	r26, 0x56	; 86
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e6 e5       	ldi	r30, 0x56	; 86
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	8c 93       	st	X, r24

		//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
		SET_BIT(TWCR,TWINT);
    12b0:	a6 e5       	ldi	r26, 0x56	; 86
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e6 e5       	ldi	r30, 0x56	; 86
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	8c 93       	st	X, r24
		//BUSY W8 OF FLAG
		while(!GET_BIT(TWCR,TWINT));
    12be:	e6 e5       	ldi	r30, 0x56	; 86
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 23       	and	r24, r24
    12c6:	dc f7       	brge	.-10     	; 0x12be <MASTER_SEND_ADDRESS_READ+0x46>
		//check in status code
		//while(STATUSE_CODE != ADDRESS_R_RECIVE);
	}
}
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <MASTER_RECIVE_DATA>:
u8 MASTER_RECIVE_DATA             (void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWEA);
    12d8:	a6 e5       	ldi	r26, 0x56	; 86
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e6 e5       	ldi	r30, 0x56	; 86
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	8c 93       	st	X, r24
	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
    12e6:	a6 e5       	ldi	r26, 0x56	; 86
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	8c 93       	st	X, r24

	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
    12f4:	e6 e5       	ldi	r30, 0x56	; 86
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <MASTER_RECIVE_DATA+0x24>
	//check in status code
	//while(STATUSE_CODE != DATA_RECIVE_WITH_ACK);


	return TWDR;
    12fe:	e3 e2       	ldi	r30, 0x23	; 35
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <vMASTER_init>:

void vMASTER_init                 (void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	/* set pre-scaler -> 0 */
	/* TWPS1, TWPS0 @ TWSR -> 0, 0 (default) */
	CLR_BIT(TWSR,TWPS0);
    1312:	a1 e2       	ldi	r26, 0x21	; 33
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e2       	ldi	r30, 0x21	; 33
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8e 7f       	andi	r24, 0xFE	; 254
    131e:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
    1320:	a1 e2       	ldi	r26, 0x21	; 33
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e2       	ldi	r30, 0x21	; 33
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	8c 93       	st	X, r24

	/* select bit rate */
	/* TWBR	-> 12 */
	/* FTWI = 400KHZ*/

	TWBR=12;
    132e:	e0 e2       	ldi	r30, 0x20	; 32
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8c e0       	ldi	r24, 0x0C	; 12
    1334:	80 83       	st	Z, r24
	/* enable acknowledge  */
	/* TWEA @ TWCR -> 1 */
	SET_BIT(TWCR,TWEA);
    1336:	a6 e5       	ldi	r26, 0x56	; 86
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e6 e5       	ldi	r30, 0x56	; 86
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 64       	ori	r24, 0x40	; 64
    1342:	8c 93       	st	X, r24


	/* enable TWI */
	/* TWEN @ TWCR -> 1 */
	SET_BIT(TWCR,TWEN);
    1344:	a6 e5       	ldi	r26, 0x56	; 86
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e6 e5       	ldi	r30, 0x56	; 86
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	84 60       	ori	r24, 0x04	; 4
    1350:	8c 93       	st	X, r24

}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <vMASTER_START_condition>:
void vMASTER_START_condition      (void)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	//SET START BIT CONDITION
	SET_BIT(TWCR,TWSTA);
    1360:	a6 e5       	ldi	r26, 0x56	; 86
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e6 e5       	ldi	r30, 0x56	; 86
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 62       	ori	r24, 0x20	; 32
    136c:	8c 93       	st	X, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
    136e:	a6 e5       	ldi	r26, 0x56	; 86
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e6 e5       	ldi	r30, 0x56	; 86
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	8c 93       	st	X, r24
	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
    137c:	e6 e5       	ldi	r30, 0x56	; 86
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	88 23       	and	r24, r24
    1384:	dc f7       	brge	.-10     	; 0x137c <vMASTER_START_condition+0x24>
	//check in status code
	//while(STATUSE_CODE != START_condition_transmitted);


}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <M_I2C_RecieveByte_ACK>:

u8 M_I2C_RecieveByte_ACK(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1394:	e6 e5       	ldi	r30, 0x56	; 86
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	84 ec       	ldi	r24, 0xC4	; 196
    139a:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0)
    139c:	e6 e5       	ldi	r30, 0x56	; 86
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	dc f7       	brge	.-10     	; 0x139c <M_I2C_RecieveByte_ACK+0x10>
		{

		}
	return TWDR;
    13a6:	e3 e2       	ldi	r30, 0x23	; 35
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
	CLR_BIT(TWCR,TWEA);
}
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <M_TWI_Stop>:
////	while((TWSR & 0xF8) != Data_byte_transmitted_ACK_received);
//	M_TWI_Stop();
//}
//
void M_TWI_Stop(void)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    13ba:	e6 e5       	ldi	r30, 0x56	; 86
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	84 e9       	ldi	r24, 0x94	; 148
    13c0:	80 83       	st	Z, r24
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <Init_S_TWI>:


//-------------------------------------------------------------------------------------------//
void Init_S_TWI(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	TWAR = SLA_W;
    13d0:	e2 e2       	ldi	r30, 0x22	; 34
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	80 83       	st	Z, r24
	TWCR &= ~(1 << TWSTA);
    13d8:	a6 e5       	ldi	r26, 0x56	; 86
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e6 e5       	ldi	r30, 0x56	; 86
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8f 7d       	andi	r24, 0xDF	; 223
    13e4:	8c 93       	st	X, r24
	TWCR &= ~(1 << TWSTO);
    13e6:	a6 e5       	ldi	r26, 0x56	; 86
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e6 e5       	ldi	r30, 0x56	; 86
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7e       	andi	r24, 0xEF	; 239
    13f2:	8c 93       	st	X, r24
	TWCR |= (1<<TWEA) | (1<<TWEN);
    13f4:	a6 e5       	ldi	r26, 0x56	; 86
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e6 e5       	ldi	r30, 0x56	; 86
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	84 64       	ori	r24, 0x44	; 68
    1400:	8c 93       	st	X, r24
}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <Slave_TWI_Receive>:

u8 Slave_TWI_Receive(void)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <Slave_TWI_Receive+0x6>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(TWCR,TWINT)==0);
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	dc f7       	brge	.-10     	; 0x1412 <Slave_TWI_Receive+0xa>
	if ((TWSR & 0xF8) != 60 || (TWSR & 0xF8) != 68 || (TWSR & 0xF8) != 70 || (TWSR & 0xF8) != 78)
    141c:	e1 e2       	ldi	r30, 0x21	; 33
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1422:	e6 e5       	ldi	r30, 0x56	; 86
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	84 ec       	ldi	r24, 0xC4	; 196
    1428:	80 83       	st	Z, r24
		while (GET_BIT(TWCR,TWINT) == 0);
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 23       	and	r24, r24
    1432:	dc f7       	brge	.-10     	; 0x142a <Slave_TWI_Receive+0x22>
		u8 ReceivedData = TWDR;
    1434:	e3 e2       	ldi	r30, 0x23	; 35
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	89 83       	std	Y+1, r24	; 0x01
		return ReceivedData;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
		TWCR = (1 << TWINT) | (1 << TWEN); // Clear TWINT and retain TWI enabled
	}
	   // If there's no data or an error, return an invalid value (e.g., 0xFF)
	    return 0xFF;
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <TIMER1_VoidInit>:


Timer1_ClockSelect Global_prescaler;
Timer1_Output_Compare_pins OC1_GlobalValue;
void TIMER1_VoidInit(Timer1_init *Timer1_InitValues)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <TIMER1_VoidInit+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <TIMER1_VoidInit+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
	/*select wave generation mode*/

	/*wave generation masking in TCCR1A_REG*/
	TCCR1A_REG &= 0xFC;
    1458:	af e4       	ldi	r26, 0x4F	; 79
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e4       	ldi	r30, 0x4F	; 79
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8c 7f       	andi	r24, 0xFC	; 252
    1464:	8c 93       	st	X, r24
	/*select wave generation first two bits for TCCR1A*/
	TCCR1A_REG |=(((Timer1_InitValues->WGM)&3)<<WGM10);
    1466:	af e4       	ldi	r26, 0x4F	; 79
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ef e4       	ldi	r30, 0x4F	; 79
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	98 2f       	mov	r25, r24
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	80 81       	ld	r24, Z
    1478:	83 70       	andi	r24, 0x03	; 3
    147a:	89 2b       	or	r24, r25
    147c:	8c 93       	st	X, r24
	/*wave generation masking in TCCR1B_REG*/
	TCCR1B_REG &= 0XE7;
    147e:	ae e4       	ldi	r26, 0x4E	; 78
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	87 7e       	andi	r24, 0xE7	; 231
    148a:	8c 93       	st	X, r24
	/*select wave generation third and forth  bits for TCCR1B*/
	TCCR1B_REG |= (((Timer1_InitValues->WGM)&12)<<WGM12);
    148c:	ae e4       	ldi	r26, 0x4E	; 78
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e4       	ldi	r30, 0x4E	; 78
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	80 81       	ld	r24, Z
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	8c 70       	andi	r24, 0x0C	; 12
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	82 2b       	or	r24, r18
    14ac:	8c 93       	st	X, r24

	/*select mode and output pins*/

	/*switch on output pins */
	switch(Timer1_InitValues->Timer1_0C1)
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	83 81       	ldd	r24, Z+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3c 83       	std	Y+4, r19	; 0x04
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <TIMER1_VoidInit+0x88>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	21 30       	cpi	r18, 0x01	; 1
    14ca:	31 05       	cpc	r19, r1
    14cc:	09 f1       	breq	.+66     	; 0x1510 <TIMER1_VoidInit+0xc8>
    14ce:	3d c0       	rjmp	.+122    	; 0x154a <TIMER1_VoidInit+0x102>
	{
	case Timer1_OC1A:
	{
		OC1_GlobalValue=Timer1_OC1A;
    14d0:	10 92 96 02 	sts	0x0296, r1
		TCCR1A_REG &= 0x3F;
    14d4:	af e4       	ldi	r26, 0x4F	; 79
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ef e4       	ldi	r30, 0x4F	; 79
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 73       	andi	r24, 0x3F	; 63
    14e0:	8c 93       	st	X, r24
		TCCR1A_REG |= ((Timer1_InitValues->Mode)<<COM1A0);
    14e2:	af e4       	ldi	r26, 0x4F	; 79
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ef e4       	ldi	r30, 0x4F	; 79
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	00 24       	eor	r0, r0
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	07 94       	ror	r0
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	07 94       	ror	r0
    1506:	98 2f       	mov	r25, r24
    1508:	80 2d       	mov	r24, r0
    150a:	82 2b       	or	r24, r18
    150c:	8c 93       	st	X, r24
    150e:	1d c0       	rjmp	.+58     	; 0x154a <TIMER1_VoidInit+0x102>
		break;
	}
	case Timer1_OC1B:
	{
		OC1_GlobalValue=Timer1_OC1B;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 96 02 	sts	0x0296, r24
		TCCR1A_REG &= 0xCF;
    1516:	af e4       	ldi	r26, 0x4F	; 79
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 7c       	andi	r24, 0xCF	; 207
    1522:	8c 93       	st	X, r24
		TCCR1A_REG |= ((Timer1_InitValues->Mode)<<COM1B0);
    1524:	af e4       	ldi	r26, 0x4F	; 79
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ef e4       	ldi	r30, 0x4F	; 79
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	28 2f       	mov	r18, r24
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	81 81       	ldd	r24, Z+1	; 0x01
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	82 95       	swap	r24
    153c:	92 95       	swap	r25
    153e:	90 7f       	andi	r25, 0xF0	; 240
    1540:	98 27       	eor	r25, r24
    1542:	80 7f       	andi	r24, 0xF0	; 240
    1544:	98 27       	eor	r25, r24
    1546:	82 2b       	or	r24, r18
    1548:	8c 93       	st	X, r24
	}
	/****************************************************************/

	/****************************************************************/
	/*Prescaler select*/
	Global_prescaler=(Timer1_InitValues->Prescaler);
    154a:	e9 81       	ldd	r30, Y+1	; 0x01
    154c:	fa 81       	ldd	r31, Y+2	; 0x02
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	80 93 97 02 	sts	0x0297, r24
	/****************************************************************/
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <TIMER1_Voidstart>:

void TIMER1_Voidstart(void)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG&=0xF8;
    156a:	ae e4       	ldi	r26, 0x4E	; 78
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	ee e4       	ldi	r30, 0x4E	; 78
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	88 7f       	andi	r24, 0xF8	; 248
    1576:	8c 93       	st	X, r24
	TCCR1B_REG|=Global_prescaler;
    1578:	ae e4       	ldi	r26, 0x4E	; 78
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ee e4       	ldi	r30, 0x4E	; 78
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	90 81       	ld	r25, Z
    1582:	80 91 97 02 	lds	r24, 0x0297
    1586:	89 2b       	or	r24, r25
    1588:	8c 93       	st	X, r24
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <TIMER1_VoidStop>:

void TIMER1_VoidStop(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG &= 0xF8;
    1598:	ae e4       	ldi	r26, 0x4E	; 78
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ee e4       	ldi	r30, 0x4E	; 78
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	88 7f       	andi	r24, 0xF8	; 248
    15a4:	8c 93       	st	X, r24
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <TIMER1_VoidPwmDuty>:

void TIMER1_VoidPwmDuty(f32 duty,u16 freq)
{
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	2a 97       	sbiw	r28, 0x0a	; 10
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	6b 83       	std	Y+3, r22	; 0x03
    15c6:	7c 83       	std	Y+4, r23	; 0x04
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	58 87       	std	Y+8, r21	; 0x08
    15ce:	4f 83       	std	Y+7, r20	; 0x07
	u16 x=0;
    15d0:	1a 82       	std	Y+2, r1	; 0x02
    15d2:	19 82       	std	Y+1, r1	; 0x01
	ICR1_REG=(1000000UL/(freq*4))-1;
    15d4:	06 e4       	ldi	r16, 0x46	; 70
    15d6:	10 e0       	ldi	r17, 0x00	; 0
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	9c 01       	movw	r18, r24
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	80 e4       	ldi	r24, 0x40	; 64
    15ec:	92 e4       	ldi	r25, 0x42	; 66
    15ee:	af e0       	ldi	r26, 0x0F	; 15
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    15fa:	da 01       	movw	r26, r20
    15fc:	c9 01       	movw	r24, r18
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f8 01       	movw	r30, r16
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
	x=((duty*(ICR1_REG+1))/100)-1;
    1606:	e6 e4       	ldi	r30, 0x46	; 70
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	cc 01       	movw	r24, r24
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	4d 81       	ldd	r20, Y+5	; 0x05
    162c:	5e 81       	ldd	r21, Y+6	; 0x06
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	48 ec       	ldi	r20, 0xC8	; 200
    1640:	52 e4       	ldi	r21, 0x42	; 66
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
	switch(OC1_GlobalValue)
    166e:	80 91 96 02 	lds	r24, 0x0296
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3a 87       	std	Y+10, r19	; 0x0a
    1678:	29 87       	std	Y+9, r18	; 0x09
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	31 f0       	breq	.+12     	; 0x168e <TIMER1_VoidPwmDuty+0xe2>
    1682:	e9 85       	ldd	r30, Y+9	; 0x09
    1684:	fa 85       	ldd	r31, Y+10	; 0x0a
    1686:	e1 30       	cpi	r30, 0x01	; 1
    1688:	f1 05       	cpc	r31, r1
    168a:	41 f0       	breq	.+16     	; 0x169c <TIMER1_VoidPwmDuty+0xf0>
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <TIMER1_VoidPwmDuty+0xfc>
	{
	case Timer1_OC1A:
	{
		OCR1A_REG=x;
    168e:	ea e4       	ldi	r30, 0x4A	; 74
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <TIMER1_VoidPwmDuty+0xfc>
		break;
	}
	case Timer1_OC1B:
	{
		OCR1B_REG=x;
    169c:	e8 e4       	ldi	r30, 0x48	; 72
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
		break;
	}
	}
}
    16a8:	2a 96       	adiw	r28, 0x0a	; 10
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <TIMER0_VoidInit>:
u8 RemainingCounts=0;

void(*Ptr_OverFlowInterrupt)(void)=NULL;
void(*Ptr_CTCInterrupt)(void)=NULL;
void TIMER0_VoidInit(Waveform_Generation_Mode Timer_mode,Clock_Select Prescaler,Compare_Output_Mode mode)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <TIMER0_VoidInit+0x6>
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	6a 83       	std	Y+2, r22	; 0x02
    16ce:	4b 83       	std	Y+3, r20	; 0x03
	/*select timer mode*/
	GLobal_Timer_mode=Timer_mode;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 93 98 02 	sts	0x0298, r24
	TCCR0&=0xB7;
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	87 7b       	andi	r24, 0xB7	; 183
    16e2:	8c 93       	st	X, r24
	TCCR0|=((Timer_mode&1)<<6);
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	28 2f       	mov	r18, r24
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	00 24       	eor	r0, r0
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	07 94       	ror	r0
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
    1706:	07 94       	ror	r0
    1708:	98 2f       	mov	r25, r24
    170a:	80 2d       	mov	r24, r0
    170c:	82 2b       	or	r24, r18
    170e:	8c 93       	st	X, r24
	TCCR0|=((Timer_mode&2)<<2);
    1710:	a3 e5       	ldi	r26, 0x53	; 83
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e3 e5       	ldi	r30, 0x53	; 83
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	82 70       	andi	r24, 0x02	; 2
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	82 2b       	or	r24, r18
    1730:	8c 93       	st	X, r24
	/*select prescaler*/
	Global_prescaler=Prescaler;
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 93 97 02 	sts	0x0297, r24
	/*select output comapare mode*/
	TCCR0&=0xCF;
    1738:	a3 e5       	ldi	r26, 0x53	; 83
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e3 e5       	ldi	r30, 0x53	; 83
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8f 7c       	andi	r24, 0xCF	; 207
    1744:	8c 93       	st	X, r24
	TCCR0|=mode<<4;
    1746:	a3 e5       	ldi	r26, 0x53	; 83
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e3 e5       	ldi	r30, 0x53	; 83
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	82 95       	swap	r24
    175a:	92 95       	swap	r25
    175c:	90 7f       	andi	r25, 0xF0	; 240
    175e:	98 27       	eor	r25, r24
    1760:	80 7f       	andi	r24, 0xF0	; 240
    1762:	98 27       	eor	r25, r24
    1764:	82 2b       	or	r24, r18
    1766:	8c 93       	st	X, r24

}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <TIMER0_Voidstart>:

void TIMER0_Voidstart(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xF8;
    177c:	a3 e5       	ldi	r26, 0x53	; 83
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e3 e5       	ldi	r30, 0x53	; 83
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 7f       	andi	r24, 0xF8	; 248
    1788:	8c 93       	st	X, r24
	TCCR0|=Global_prescaler;
    178a:	a3 e5       	ldi	r26, 0x53	; 83
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e3 e5       	ldi	r30, 0x53	; 83
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	80 91 97 02 	lds	r24, 0x0297
    1798:	89 2b       	or	r24, r25
    179a:	8c 93       	st	X, r24
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <TIMER0_VoidStop>:

void TIMER0_VoidStop(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xF8;
    17aa:	a3 e5       	ldi	r26, 0x53	; 83
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e3 e5       	ldi	r30, 0x53	; 83
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	88 7f       	andi	r24, 0xF8	; 248
    17b6:	8c 93       	st	X, r24
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <TIMER0_VoidDelayTimeMillisec>:


void TIMER0_VoidDelayTimeMillisec(u32 Millisecond)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	2e 97       	sbiw	r28, 0x0e	; 14
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	6b 87       	std	Y+11, r22	; 0x0b
    17d4:	7c 87       	std	Y+12, r23	; 0x0c
    17d6:	8d 87       	std	Y+13, r24	; 0x0d
    17d8:	9e 87       	std	Y+14, r25	; 0x0e
	u32 TickTime=(Prescaler_Arr[Global_prescaler-1]*1000000)/(FCPU);
    17da:	80 91 97 02 	lds	r24, 0x0297
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	fc 01       	movw	r30, r24
    17ea:	e8 54       	subi	r30, 0x48	; 72
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	cc 01       	movw	r24, r24
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	20 e4       	ldi	r18, 0x40	; 64
    17fa:	32 e4       	ldi	r19, 0x42	; 66
    17fc:	4f e0       	ldi	r20, 0x0F	; 15
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__mulsi3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	34 e2       	ldi	r19, 0x24	; 36
    1810:	44 ef       	ldi	r20, 0xF4	; 244
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__divmodsi4>
    181c:	da 01       	movw	r26, r20
    181e:	c9 01       	movw	r24, r18
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	ba 87       	std	Y+10, r27	; 0x0a
	u32 DesiredTicks=(Millisecond*1000)/TickTime;
    1828:	8b 85       	ldd	r24, Y+11	; 0x0b
    182a:	9c 85       	ldd	r25, Y+12	; 0x0c
    182c:	ad 85       	ldd	r26, Y+13	; 0x0d
    182e:	be 85       	ldd	r27, Y+14	; 0x0e
    1830:	28 ee       	ldi	r18, 0xE8	; 232
    1832:	33 e0       	ldi	r19, 0x03	; 3
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__mulsi3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	2f 81       	ldd	r18, Y+7	; 0x07
    1846:	38 85       	ldd	r19, Y+8	; 0x08
    1848:	49 85       	ldd	r20, Y+9	; 0x09
    184a:	5a 85       	ldd	r21, Y+10	; 0x0a
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    1854:	da 01       	movw	r26, r20
    1856:	c9 01       	movw	r24, r18
    1858:	8b 83       	std	Y+3, r24	; 0x03
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	ad 83       	std	Y+5, r26	; 0x05
    185e:	be 83       	std	Y+6, r27	; 0x06
	if(GLobal_Timer_mode==NORMAL)
    1860:	80 91 98 02 	lds	r24, 0x0298
    1864:	88 23       	and	r24, r24
    1866:	91 f5       	brne	.+100    	; 0x18cc <TIMER0_VoidDelayTimeMillisec+0x10e>
	{
		NumberOfOverFlows=DesiredTicks/OverFlowTicks;
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	ad 81       	ldd	r26, Y+5	; 0x05
    186e:	be 81       	ldd	r27, Y+6	; 0x06
    1870:	89 2f       	mov	r24, r25
    1872:	9a 2f       	mov	r25, r26
    1874:	ab 2f       	mov	r26, r27
    1876:	bb 27       	eor	r27, r27
    1878:	80 93 f2 01 	sts	0x01F2, r24
    187c:	90 93 f3 01 	sts	0x01F3, r25
    1880:	a0 93 f4 01 	sts	0x01F4, r26
    1884:	b0 93 f5 01 	sts	0x01F5, r27
		RemainingCounts=DesiredTicks%OverFlowTicks;
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	80 93 f6 01 	sts	0x01F6, r24
		if(RemainingCounts!=0)
    188e:	80 91 f6 01 	lds	r24, 0x01F6
    1892:	88 23       	and	r24, r24
    1894:	09 f4       	brne	.+2      	; 0x1898 <TIMER0_VoidDelayTimeMillisec+0xda>
    1896:	57 c0       	rjmp	.+174    	; 0x1946 <TIMER0_VoidDelayTimeMillisec+0x188>
		{

			TCNT0=OverFlowTicks-RemainingCounts;
    1898:	e2 e5       	ldi	r30, 0x52	; 82
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 91 f6 01 	lds	r24, 0x01F6
    18a0:	81 95       	neg	r24
    18a2:	80 83       	st	Z, r24
			NumberOfOverFlows++;
    18a4:	80 91 f2 01 	lds	r24, 0x01F2
    18a8:	90 91 f3 01 	lds	r25, 0x01F3
    18ac:	a0 91 f4 01 	lds	r26, 0x01F4
    18b0:	b0 91 f5 01 	lds	r27, 0x01F5
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	b1 1d       	adc	r27, r1
    18ba:	80 93 f2 01 	sts	0x01F2, r24
    18be:	90 93 f3 01 	sts	0x01F3, r25
    18c2:	a0 93 f4 01 	sts	0x01F4, r26
    18c6:	b0 93 f5 01 	sts	0x01F5, r27
    18ca:	3d c0       	rjmp	.+122    	; 0x1946 <TIMER0_VoidDelayTimeMillisec+0x188>
		}
	}else if(GLobal_Timer_mode==CTC)
    18cc:	80 91 98 02 	lds	r24, 0x0298
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	c9 f5       	brne	.+114    	; 0x1946 <TIMER0_VoidDelayTimeMillisec+0x188>
	{
		u16 value=OverFlowTicks;
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <TIMER0_VoidDelayTimeMillisec+0x12a>
		while(DesiredTicks%value!=0)
		{
			value--;
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
			NumberOfOverFlows++;
		}
	}else if(GLobal_Timer_mode==CTC)
	{
		u16 value=OverFlowTicks;
		while(DesiredTicks%value!=0)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	9c 01       	movw	r18, r24
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	ad 81       	ldd	r26, Y+5	; 0x05
    18f8:	be 81       	ldd	r27, Y+6	; 0x06
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	a1 05       	cpc	r26, r1
    190a:	b1 05       	cpc	r27, r1
    190c:	41 f7       	brne	.-48     	; 0x18de <TIMER0_VoidDelayTimeMillisec+0x120>
		{
			value--;
		}
		OCR0=value-1;
    190e:	ec e5       	ldi	r30, 0x5C	; 92
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	81 50       	subi	r24, 0x01	; 1
    1916:	80 83       	st	Z, r24
		NumberOfOverFlows=DesiredTicks/value;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	9c 01       	movw	r18, r24
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	ad 81       	ldd	r26, Y+5	; 0x05
    1928:	be 81       	ldd	r27, Y+6	; 0x06
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    1932:	da 01       	movw	r26, r20
    1934:	c9 01       	movw	r24, r18
    1936:	80 93 f2 01 	sts	0x01F2, r24
    193a:	90 93 f3 01 	sts	0x01F3, r25
    193e:	a0 93 f4 01 	sts	0x01F4, r26
    1942:	b0 93 f5 01 	sts	0x01F5, r27
	}

}
    1946:	2e 96       	adiw	r28, 0x0e	; 14
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <TIMER0_VoidAsynchronous>:


void TIMER0_VoidAsynchronous(void(*TIMER0)(void))
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <TIMER0_VoidAsynchronous+0x6>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	if(GLobal_Timer_mode==NORMAL)
    1966:	80 91 98 02 	lds	r24, 0x0298
    196a:	88 23       	and	r24, r24
    196c:	a9 f4       	brne	.+42     	; 0x1998 <TIMER0_VoidAsynchronous+0x40>
	{
		TIMSK&=0xFC;
    196e:	a9 e5       	ldi	r26, 0x59	; 89
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e9 e5       	ldi	r30, 0x59	; 89
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8c 7f       	andi	r24, 0xFC	; 252
    197a:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);
    197c:	a9 e5       	ldi	r26, 0x59	; 89
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e9 e5       	ldi	r30, 0x59	; 89
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	8c 93       	st	X, r24
		Ptr_OverFlowInterrupt=TIMER0;
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	90 93 f8 01 	sts	0x01F8, r25
    1992:	80 93 f7 01 	sts	0x01F7, r24
    1996:	18 c0       	rjmp	.+48     	; 0x19c8 <TIMER0_VoidAsynchronous+0x70>
	}else if(GLobal_Timer_mode==CTC)
    1998:	80 91 98 02 	lds	r24, 0x0298
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	a1 f4       	brne	.+40     	; 0x19c8 <TIMER0_VoidAsynchronous+0x70>
	{
		TIMSK&=0xFC;
    19a0:	a9 e5       	ldi	r26, 0x59	; 89
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e9 e5       	ldi	r30, 0x59	; 89
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8c 7f       	andi	r24, 0xFC	; 252
    19ac:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    19ae:	a9 e5       	ldi	r26, 0x59	; 89
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e9 e5       	ldi	r30, 0x59	; 89
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	82 60       	ori	r24, 0x02	; 2
    19ba:	8c 93       	st	X, r24
		Ptr_CTCInterrupt=TIMER0;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	90 93 fa 01 	sts	0x01FA, r25
    19c4:	80 93 f9 01 	sts	0x01F9, r24
	}
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <TIMER_VoidPwmDuty>:

void TIMER_VoidPwmDuty(u8 duty)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <TIMER_VoidPwmDuty+0x6>
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8b 83       	std	Y+3, r24	; 0x03
	u16 x=0;
    19e0:	1a 82       	std	Y+2, r1	; 0x02
    19e2:	19 82       	std	Y+1, r1	; 0x01
	x=((duty*256)/100)-1;
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	98 2f       	mov	r25, r24
    19ec:	88 27       	eor	r24, r24
    19ee:	24 e6       	ldi	r18, 0x64	; 100
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	b9 01       	movw	r22, r18
    19f4:	0e 94 d6 25 	call	0x4bac	; 0x4bac <__divmodhi4>
    19f8:	cb 01       	movw	r24, r22
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
	OCR0=x;
    1a00:	ec e5       	ldi	r30, 0x5C	; 92
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	80 83       	st	Z, r24
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <__vector_11>:


void __vector_11(void)
{
    1a14:	1f 92       	push	r1
    1a16:	0f 92       	push	r0
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	0f 92       	push	r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	2f 93       	push	r18
    1a20:	3f 93       	push	r19
    1a22:	4f 93       	push	r20
    1a24:	5f 93       	push	r21
    1a26:	6f 93       	push	r22
    1a28:	7f 93       	push	r23
    1a2a:	8f 93       	push	r24
    1a2c:	9f 93       	push	r25
    1a2e:	af 93       	push	r26
    1a30:	bf 93       	push	r27
    1a32:	ef 93       	push	r30
    1a34:	ff 93       	push	r31
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62

	static u32 count=0;
	count++;
    1a3e:	80 91 fb 01 	lds	r24, 0x01FB
    1a42:	90 91 fc 01 	lds	r25, 0x01FC
    1a46:	a0 91 fd 01 	lds	r26, 0x01FD
    1a4a:	b0 91 fe 01 	lds	r27, 0x01FE
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	b1 1d       	adc	r27, r1
    1a54:	80 93 fb 01 	sts	0x01FB, r24
    1a58:	90 93 fc 01 	sts	0x01FC, r25
    1a5c:	a0 93 fd 01 	sts	0x01FD, r26
    1a60:	b0 93 fe 01 	sts	0x01FE, r27
	if(count == NumberOfOverFlows)
    1a64:	20 91 fb 01 	lds	r18, 0x01FB
    1a68:	30 91 fc 01 	lds	r19, 0x01FC
    1a6c:	40 91 fd 01 	lds	r20, 0x01FD
    1a70:	50 91 fe 01 	lds	r21, 0x01FE
    1a74:	80 91 f2 01 	lds	r24, 0x01F2
    1a78:	90 91 f3 01 	lds	r25, 0x01F3
    1a7c:	a0 91 f4 01 	lds	r26, 0x01F4
    1a80:	b0 91 f5 01 	lds	r27, 0x01F5
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	4a 07       	cpc	r20, r26
    1a8a:	5b 07       	cpc	r21, r27
    1a8c:	c9 f4       	brne	.+50     	; 0x1ac0 <__vector_11+0xac>
	{
		TCNT0=OverFlowTicks-RemainingCounts;
    1a8e:	e2 e5       	ldi	r30, 0x52	; 82
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 91 f6 01 	lds	r24, 0x01F6
    1a96:	81 95       	neg	r24
    1a98:	80 83       	st	Z, r24
		count=0;
    1a9a:	10 92 fb 01 	sts	0x01FB, r1
    1a9e:	10 92 fc 01 	sts	0x01FC, r1
    1aa2:	10 92 fd 01 	sts	0x01FD, r1
    1aa6:	10 92 fe 01 	sts	0x01FE, r1
		if(Ptr_OverFlowInterrupt!=NULL)
    1aaa:	80 91 f7 01 	lds	r24, 0x01F7
    1aae:	90 91 f8 01 	lds	r25, 0x01F8
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	29 f0       	breq	.+10     	; 0x1ac0 <__vector_11+0xac>
		{
			Ptr_OverFlowInterrupt();
    1ab6:	e0 91 f7 01 	lds	r30, 0x01F7
    1aba:	f0 91 f8 01 	lds	r31, 0x01F8
    1abe:	09 95       	icall
		}


	}

}
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	bf 91       	pop	r27
    1aca:	af 91       	pop	r26
    1acc:	9f 91       	pop	r25
    1ace:	8f 91       	pop	r24
    1ad0:	7f 91       	pop	r23
    1ad2:	6f 91       	pop	r22
    1ad4:	5f 91       	pop	r21
    1ad6:	4f 91       	pop	r20
    1ad8:	3f 91       	pop	r19
    1ada:	2f 91       	pop	r18
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	0f 90       	pop	r0
    1ae2:	1f 90       	pop	r1
    1ae4:	18 95       	reti

00001ae6 <__vector_10>:

void __vector_10(void)
{
    1ae6:	1f 92       	push	r1
    1ae8:	0f 92       	push	r0
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	0f 92       	push	r0
    1aee:	11 24       	eor	r1, r1
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	static u32 count=0;
	count++;
    1b10:	80 91 ff 01 	lds	r24, 0x01FF
    1b14:	90 91 00 02 	lds	r25, 0x0200
    1b18:	a0 91 01 02 	lds	r26, 0x0201
    1b1c:	b0 91 02 02 	lds	r27, 0x0202
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	b1 1d       	adc	r27, r1
    1b26:	80 93 ff 01 	sts	0x01FF, r24
    1b2a:	90 93 00 02 	sts	0x0200, r25
    1b2e:	a0 93 01 02 	sts	0x0201, r26
    1b32:	b0 93 02 02 	sts	0x0202, r27
	if(count == NumberOfOverFlows)
    1b36:	20 91 ff 01 	lds	r18, 0x01FF
    1b3a:	30 91 00 02 	lds	r19, 0x0200
    1b3e:	40 91 01 02 	lds	r20, 0x0201
    1b42:	50 91 02 02 	lds	r21, 0x0202
    1b46:	80 91 f2 01 	lds	r24, 0x01F2
    1b4a:	90 91 f3 01 	lds	r25, 0x01F3
    1b4e:	a0 91 f4 01 	lds	r26, 0x01F4
    1b52:	b0 91 f5 01 	lds	r27, 0x01F5
    1b56:	28 17       	cp	r18, r24
    1b58:	39 07       	cpc	r19, r25
    1b5a:	4a 07       	cpc	r20, r26
    1b5c:	5b 07       	cpc	r21, r27
    1b5e:	99 f4       	brne	.+38     	; 0x1b86 <__vector_10+0xa0>
	{
		if(Ptr_CTCInterrupt!=NULL)
    1b60:	80 91 f9 01 	lds	r24, 0x01F9
    1b64:	90 91 fa 01 	lds	r25, 0x01FA
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <__vector_10+0x90>
		{
			Ptr_CTCInterrupt();
    1b6c:	e0 91 f9 01 	lds	r30, 0x01F9
    1b70:	f0 91 fa 01 	lds	r31, 0x01FA
    1b74:	09 95       	icall
		}
		count=0;
    1b76:	10 92 ff 01 	sts	0x01FF, r1
    1b7a:	10 92 00 02 	sts	0x0200, r1
    1b7e:	10 92 01 02 	sts	0x0201, r1
    1b82:	10 92 02 02 	sts	0x0202, r1
	}
}
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <SPI_MasterInit>:
//	SPCR|=(SPI_initVariable->SPI_ClockFrequencySelect);
//
//}

void SPI_MasterInit(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
	 DIO_VoidSetPinDirection(DIO_PINB5,OUTPUT);
    1bb4:	8d e0       	ldi	r24, 0x0D	; 13
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
		 DIO_VoidSetPinDirection(DIO_PINB7,OUTPUT);
    1bbc:	8f e0       	ldi	r24, 0x0F	; 15
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
/* Enable SPI, Master, set clock rate fck/16 */
     SPCR = (1<<6)|(1<<4)|(1<<0)|(1<<1);
    1bc4:	ed e2       	ldi	r30, 0x2D	; 45
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	83 e5       	ldi	r24, 0x53	; 83
    1bca:	80 83       	st	Z, r24
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <SPI_U8SendReceiveSynchronous>:

u8 SPI_U8SendReceiveSynchronous(u8 Data)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Data;
    1bde:	ef e2       	ldi	r30, 0x2F	; 47
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7)==0)
    1be6:	ee e2       	ldi	r30, 0x2E	; 46
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	dc f7       	brge	.-10     	; 0x1be6 <SPI_U8SendReceiveSynchronous+0x14>
	{

	}
	return SPDR;
    1bf0:	ef e2       	ldi	r30, 0x2F	; 47
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
}
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <SPI_voidTransmitSting>:
void SPI_voidTransmitSting(u8 *str)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <SPI_voidTransmitSting+0x6>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9b 83       	std	Y+3, r25	; 0x03
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;str[i] != '\0';i++)
    1c0e:	19 82       	std	Y+1, r1	; 0x01
    1c10:	0e c0       	rjmp	.+28     	; 0x1c2e <SPI_voidTransmitSting+0x30>
	{
		SPI_U8SendReceiveSynchronous(str[i]);
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	e2 0f       	add	r30, r18
    1c20:	f3 1f       	adc	r31, r19
    1c22:	80 81       	ld	r24, Z
    1c24:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <SPI_U8SendReceiveSynchronous>
	}
	return SPDR;
}
void SPI_voidTransmitSting(u8 *str)
{
	for(u8 i=0;str[i] != '\0';i++)
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e2 0f       	add	r30, r18
    1c3c:	f3 1f       	adc	r31, r19
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	39 f7       	brne	.-50     	; 0x1c12 <SPI_voidTransmitSting+0x14>
	{
		SPI_U8SendReceiveSynchronous(str[i]);

	}
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <SPI_voidReceiveString>:
void SPI_voidReceiveString(u8 *buffer) {
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <SPI_voidReceiveString+0xa>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	9b 83       	std	Y+3, r25	; 0x03
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    while (1) {


        buffer[i] = SPI_U8SendReceiveSynchronous(0x00);
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	8c 01       	movw	r16, r24
    1c72:	02 0f       	add	r16, r18
    1c74:	13 1f       	adc	r17, r19
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <SPI_U8SendReceiveSynchronous>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 83       	st	Z, r24
        if (buffer[i] == '.') {
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	80 81       	ld	r24, Z
    1c92:	8e 32       	cpi	r24, 0x2E	; 46
    1c94:	21 f0       	breq	.+8      	; 0x1c9e <SPI_voidReceiveString+0x4e>
            break;
        }
        i++;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	e4 cf       	rjmp	.-56     	; 0x1c66 <SPI_voidReceiveString+0x16>
    }
    // Null-terminate the string
    buffer[i+1] = '\0';
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 01       	movw	r18, r24
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	10 82       	st	Z, r1
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <M_GIE_VoidEnable>:

#include"GIE_Private.h"
#include"GIE_init.h"

void M_GIE_VoidEnable(void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1cce:	af e5       	ldi	r26, 0x5F	; 95
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ef e5       	ldi	r30, 0x5F	; 95
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	8c 93       	st	X, r24
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <M_GIE_VoidDisable>:
void M_GIE_VoidDisable(void)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1cea:	af e5       	ldi	r26, 0x5F	; 95
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ef e5       	ldi	r30, 0x5F	; 95
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 77       	andi	r24, 0x7F	; 127
    1cf6:	8c 93       	st	X, r24
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <EXIT_VoidEnableInt>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"EXIT_Private.h"
#include"EXIT_Cfg.h"

void EXIT_VoidEnableInt(u8 Interrupt_number, INT_State state) {
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <EXIT_VoidEnableInt+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <EXIT_VoidEnableInt+0x8>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	6a 83       	std	Y+2, r22	; 0x02

	switch (Interrupt_number) {
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3c 83       	std	Y+4, r19	; 0x04
    1d16:	2b 83       	std	Y+3, r18	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f1       	breq	.+66     	; 0x1d64 <EXIT_VoidEnableInt+0x66>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	d1 f1       	breq	.+116    	; 0x1da0 <EXIT_VoidEnableInt+0xa2>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <EXIT_VoidEnableInt+0x38>
    1d34:	57 c0       	rjmp	.+174    	; 0x1de4 <EXIT_VoidEnableInt+0xe6>
	case INT0: {
		/*state selection*/
		MCUCR_REG &= INT0_MSK;
    1d36:	a5 e5       	ldi	r26, 0x55	; 85
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e5 e5       	ldi	r30, 0x55	; 85
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8c 7f       	andi	r24, 0xFC	; 252
    1d42:	8c 93       	st	X, r24
		MCUCR_REG |= state;
    1d44:	a5 e5       	ldi	r26, 0x55	; 85
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e5       	ldi	r30, 0x55	; 85
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	90 81       	ld	r25, Z
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	89 2b       	or	r24, r25
    1d52:	8c 93       	st	X, r24
		/*set specific interrupt enable*/
		SET_BIT(GICR_REG, INT0_PIN);
    1d54:	ab e5       	ldi	r26, 0x5B	; 91
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e5       	ldi	r30, 0x5B	; 91
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 64       	ori	r24, 0x40	; 64
    1d60:	8c 93       	st	X, r24
    1d62:	40 c0       	rjmp	.+128    	; 0x1de4 <EXIT_VoidEnableInt+0xe6>
		break;
	}
	case INT1: {
		/*state selection*/
		MCUCR_REG &= INT1_MSK;
    1d64:	a5 e5       	ldi	r26, 0x55	; 85
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e5 e5       	ldi	r30, 0x55	; 85
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	83 7f       	andi	r24, 0xF3	; 243
    1d70:	8c 93       	st	X, r24
		MCUCR_REG |= state << ISC10;
    1d72:	a5 e5       	ldi	r26, 0x55	; 85
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e5 e5       	ldi	r30, 0x55	; 85
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	82 2b       	or	r24, r18
    1d8e:	8c 93       	st	X, r24
		/*set specific interrupt enable*/
		SET_BIT(GICR_REG, INT1_PIN);
    1d90:	ab e5       	ldi	r26, 0x5B	; 91
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e5       	ldi	r30, 0x5B	; 91
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	8c 93       	st	X, r24
    1d9e:	22 c0       	rjmp	.+68     	; 0x1de4 <EXIT_VoidEnableInt+0xe6>
		break;
	}
	case INT2: {
		/*state selection*/
		MCUCSR_REG &= INT2_MSK;
    1da0:	a4 e5       	ldi	r26, 0x54	; 84
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e4 e5       	ldi	r30, 0x54	; 84
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8f 7b       	andi	r24, 0xBF	; 191
    1dac:	8c 93       	st	X, r24
		MCUCSR_REG |= state << ISC2;
    1dae:	a4 e5       	ldi	r26, 0x54	; 84
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e4 e5       	ldi	r30, 0x54	; 84
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	28 2f       	mov	r18, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	00 24       	eor	r0, r0
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	07 94       	ror	r0
    1dc8:	96 95       	lsr	r25
    1dca:	87 95       	ror	r24
    1dcc:	07 94       	ror	r0
    1dce:	98 2f       	mov	r25, r24
    1dd0:	80 2d       	mov	r24, r0
    1dd2:	82 2b       	or	r24, r18
    1dd4:	8c 93       	st	X, r24
		/*set specific interrupt enable*/
		SET_BIT(GICR_REG, INT2_PIN);
    1dd6:	ab e5       	ldi	r26, 0x5B	; 91
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	eb e5       	ldi	r30, 0x5B	; 91
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 62       	ori	r24, 0x20	; 32
    1de2:	8c 93       	st	X, r24
		break;
	}

	}

}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <EXIT_VoidDisableInt>:

void EXIT_VoidDisableInt(u8 Interrupt_number) {
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <EXIT_VoidDisableInt+0x6>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	switch (Interrupt_number) {
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	3b 83       	std	Y+3, r19	; 0x03
    1e08:	2a 83       	std	Y+2, r18	; 0x02
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	89 f0       	breq	.+34     	; 0x1e36 <EXIT_VoidDisableInt+0x44>
    1e14:	2a 81       	ldd	r18, Y+2	; 0x02
    1e16:	3b 81       	ldd	r19, Y+3	; 0x03
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	a1 f0       	breq	.+40     	; 0x1e46 <EXIT_VoidDisableInt+0x54>
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	b9 f4       	brne	.+46     	; 0x1e54 <EXIT_VoidDisableInt+0x62>
	case INT0:
		CLR_BIT(GICR_REG, INT0_PIN);
    1e26:	ab e5       	ldi	r26, 0x5B	; 91
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e5       	ldi	r30, 0x5B	; 91
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 7b       	andi	r24, 0xBF	; 191
    1e32:	8c 93       	st	X, r24
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <EXIT_VoidDisableInt+0x62>
		break;
	case INT1:
		CLR_BIT(GICR_REG, INT1_PIN);
    1e36:	ab e5       	ldi	r26, 0x5B	; 91
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e5       	ldi	r30, 0x5B	; 91
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 77       	andi	r24, 0x7F	; 127
    1e42:	8c 93       	st	X, r24
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <EXIT_VoidDisableInt+0x62>
		break;
	case INT2:
		CLR_BIT(GICR_REG, INT2_PIN);
    1e46:	ab e5       	ldi	r26, 0x5B	; 91
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	eb e5       	ldi	r30, 0x5B	; 91
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 7d       	andi	r24, 0xDF	; 223
    1e52:	8c 93       	st	X, r24
		break;
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <EXIT_VoidCallBack>:

void EXIT_VoidCallBack(u8 Interrupt_number, void (*Ptr_f)(void)) {
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <EXIT_VoidCallBack+0x6>
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <EXIT_VoidCallBack+0x8>
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	7b 83       	std	Y+3, r23	; 0x03
    1e72:	6a 83       	std	Y+2, r22	; 0x02

		switch (Interrupt_number) {
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3d 83       	std	Y+5, r19	; 0x05
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <EXIT_VoidCallBack+0x48>
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	91 f0       	breq	.+36     	; 0x1eb6 <EXIT_VoidCallBack+0x56>
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	a1 f4       	brne	.+40     	; 0x1ec2 <EXIT_VoidCallBack+0x62>
		case INT0:
			Ptr_func = Ptr_f;
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	90 93 04 02 	sts	0x0204, r25
    1ea2:	80 93 03 02 	sts	0x0203, r24
    1ea6:	0d c0       	rjmp	.+26     	; 0x1ec2 <EXIT_VoidCallBack+0x62>
			break;
		case INT1:
			Ptr_func1 = Ptr_f;
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	90 93 06 02 	sts	0x0206, r25
    1eb0:	80 93 05 02 	sts	0x0205, r24
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <EXIT_VoidCallBack+0x62>
			break;
		case INT2:
			Ptr_func2 = Ptr_f;
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	90 93 08 02 	sts	0x0208, r25
    1ebe:	80 93 07 02 	sts	0x0207, r24
			break;
		}

}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <__vector_1>:

void __vector_1(void) {
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_func != NULL) {
    1efc:	80 91 03 02 	lds	r24, 0x0203
    1f00:	90 91 04 02 	lds	r25, 0x0204
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	29 f0       	breq	.+10     	; 0x1f12 <__vector_1+0x40>
		Ptr_func();
    1f08:	e0 91 03 02 	lds	r30, 0x0203
    1f0c:	f0 91 04 02 	lds	r31, 0x0204
    1f10:	09 95       	icall
	}
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	7f 91       	pop	r23
    1f24:	6f 91       	pop	r22
    1f26:	5f 91       	pop	r21
    1f28:	4f 91       	pop	r20
    1f2a:	3f 91       	pop	r19
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	0f 90       	pop	r0
    1f34:	1f 90       	pop	r1
    1f36:	18 95       	reti

00001f38 <__vector_2>:

void __vector_2(void) {
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	11 24       	eor	r1, r1
    1f42:	2f 93       	push	r18
    1f44:	3f 93       	push	r19
    1f46:	4f 93       	push	r20
    1f48:	5f 93       	push	r21
    1f4a:	6f 93       	push	r22
    1f4c:	7f 93       	push	r23
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	af 93       	push	r26
    1f54:	bf 93       	push	r27
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_func1 != NULL) {
    1f62:	80 91 05 02 	lds	r24, 0x0205
    1f66:	90 91 06 02 	lds	r25, 0x0206
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <__vector_2+0x40>
		Ptr_func1();
    1f6e:	e0 91 05 02 	lds	r30, 0x0205
    1f72:	f0 91 06 02 	lds	r31, 0x0206
    1f76:	09 95       	icall
	}
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	bf 91       	pop	r27
    1f82:	af 91       	pop	r26
    1f84:	9f 91       	pop	r25
    1f86:	8f 91       	pop	r24
    1f88:	7f 91       	pop	r23
    1f8a:	6f 91       	pop	r22
    1f8c:	5f 91       	pop	r21
    1f8e:	4f 91       	pop	r20
    1f90:	3f 91       	pop	r19
    1f92:	2f 91       	pop	r18
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	0f 90       	pop	r0
    1f9a:	1f 90       	pop	r1
    1f9c:	18 95       	reti

00001f9e <__vector_3>:

void __vector_3(void) {
    1f9e:	1f 92       	push	r1
    1fa0:	0f 92       	push	r0
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	0f 92       	push	r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	2f 93       	push	r18
    1faa:	3f 93       	push	r19
    1fac:	4f 93       	push	r20
    1fae:	5f 93       	push	r21
    1fb0:	6f 93       	push	r22
    1fb2:	7f 93       	push	r23
    1fb4:	8f 93       	push	r24
    1fb6:	9f 93       	push	r25
    1fb8:	af 93       	push	r26
    1fba:	bf 93       	push	r27
    1fbc:	ef 93       	push	r30
    1fbe:	ff 93       	push	r31
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_func2 != NULL) {
    1fc8:	80 91 07 02 	lds	r24, 0x0207
    1fcc:	90 91 08 02 	lds	r25, 0x0208
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	29 f0       	breq	.+10     	; 0x1fde <__vector_3+0x40>
		Ptr_func2();
    1fd4:	e0 91 07 02 	lds	r30, 0x0207
    1fd8:	f0 91 08 02 	lds	r31, 0x0208
    1fdc:	09 95       	icall
	}
}
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	bf 91       	pop	r27
    1fe8:	af 91       	pop	r26
    1fea:	9f 91       	pop	r25
    1fec:	8f 91       	pop	r24
    1fee:	7f 91       	pop	r23
    1ff0:	6f 91       	pop	r22
    1ff2:	5f 91       	pop	r21
    1ff4:	4f 91       	pop	r20
    1ff6:	3f 91       	pop	r19
    1ff8:	2f 91       	pop	r18
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	0f 90       	pop	r0
    2000:	1f 90       	pop	r1
    2002:	18 95       	reti

00002004 <DIO_VoidSetPinDirection>:
#include <DIO_Private.h>
#include "STD_TYPES.h"
#include"BIT_MATH.h"
#include"DIO_cfg.h"

void DIO_VoidSetPinDirection(PIN_NUM PIN, u8 Value) {
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <DIO_VoidSetPinDirection+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <DIO_VoidSetPinDirection+0x8>
    200c:	00 d0       	rcall	.+0      	; 0x200e <DIO_VoidSetPinDirection+0xa>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	6a 83       	std	Y+2, r22	; 0x02
	if (Value == OUTPUT) /*OUTPUT*/
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	09 f0       	breq	.+2      	; 0x201e <DIO_VoidSetPinDirection+0x1a>
    201c:	7f c0       	rjmp	.+254    	; 0x211c <DIO_VoidSetPinDirection+0x118>
	{
		switch (PIN / 8) {
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	86 95       	lsr	r24
    2022:	86 95       	lsr	r24
    2024:	86 95       	lsr	r24
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3e 83       	std	Y+6, r19	; 0x06
    202c:	2d 83       	std	Y+5, r18	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	69 f1       	breq	.+90     	; 0x2092 <DIO_VoidSetPinDirection+0x8e>
    2038:	2d 81       	ldd	r18, Y+5	; 0x05
    203a:	3e 81       	ldd	r19, Y+6	; 0x06
    203c:	22 30       	cpi	r18, 0x02	; 2
    203e:	31 05       	cpc	r19, r1
    2040:	2c f4       	brge	.+10     	; 0x204c <DIO_VoidSetPinDirection+0x48>
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	69 f0       	breq	.+26     	; 0x2064 <DIO_VoidSetPinDirection+0x60>
    204a:	ee c0       	rjmp	.+476    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
    204c:	2d 81       	ldd	r18, Y+5	; 0x05
    204e:	3e 81       	ldd	r19, Y+6	; 0x06
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	a9 f1       	breq	.+106    	; 0x20c0 <DIO_VoidSetPinDirection+0xbc>
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	91 05       	cpc	r25, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <DIO_VoidSetPinDirection+0x5e>
    2060:	46 c0       	rjmp	.+140    	; 0x20ee <DIO_VoidSetPinDirection+0xea>
    2062:	e2 c0       	rjmp	.+452    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
		case PORTA:
			SET_BIT(DDRA_REG, (PIN % 8));
    2064:	aa e3       	ldi	r26, 0x3A	; 58
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ea e3       	ldi	r30, 0x3A	; 58
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 01       	movw	r18, r24
    2078:	27 70       	andi	r18, 0x07	; 7
    207a:	30 70       	andi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <DIO_VoidSetPinDirection+0x84>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <DIO_VoidSetPinDirection+0x80>
    208c:	84 2b       	or	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	cb c0       	rjmp	.+406    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, (PIN % 8));
    2092:	a7 e3       	ldi	r26, 0x37	; 55
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e7 e3       	ldi	r30, 0x37	; 55
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9c 01       	movw	r18, r24
    20a6:	27 70       	andi	r18, 0x07	; 7
    20a8:	30 70       	andi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_VoidSetPinDirection+0xb2>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_VoidSetPinDirection+0xae>
    20ba:	84 2b       	or	r24, r20
    20bc:	8c 93       	st	X, r24
    20be:	b4 c0       	rjmp	.+360    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, (PIN % 8));
    20c0:	a4 e3       	ldi	r26, 0x34	; 52
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e4 e3       	ldi	r30, 0x34	; 52
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c 01       	movw	r18, r24
    20d4:	27 70       	andi	r18, 0x07	; 7
    20d6:	30 70       	andi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_VoidSetPinDirection+0xe0>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_VoidSetPinDirection+0xdc>
    20e8:	84 2b       	or	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	9d c0       	rjmp	.+314    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, (PIN % 8));
    20ee:	a1 e3       	ldi	r26, 0x31	; 49
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e1 e3       	ldi	r30, 0x31	; 49
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	48 2f       	mov	r20, r24
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 01       	movw	r18, r24
    2102:	27 70       	andi	r18, 0x07	; 7
    2104:	30 70       	andi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_VoidSetPinDirection+0x10e>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_VoidSetPinDirection+0x10a>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	86 c0       	rjmp	.+268    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		}

	} else if (Value == INPUT) /*input*/
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	88 23       	and	r24, r24
    2120:	09 f0       	breq	.+2      	; 0x2124 <DIO_VoidSetPinDirection+0x120>
    2122:	82 c0       	rjmp	.+260    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
	{
		switch (PIN / 8) {
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	86 95       	lsr	r24
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	3c 83       	std	Y+4, r19	; 0x04
    2132:	2b 83       	std	Y+3, r18	; 0x03
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	91 05       	cpc	r25, r1
    213c:	71 f1       	breq	.+92     	; 0x219a <DIO_VoidSetPinDirection+0x196>
    213e:	2b 81       	ldd	r18, Y+3	; 0x03
    2140:	3c 81       	ldd	r19, Y+4	; 0x04
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	31 05       	cpc	r19, r1
    2146:	2c f4       	brge	.+10     	; 0x2152 <DIO_VoidSetPinDirection+0x14e>
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f0       	breq	.+26     	; 0x216a <DIO_VoidSetPinDirection+0x166>
    2150:	6b c0       	rjmp	.+214    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	b9 f1       	breq	.+110    	; 0x21ca <DIO_VoidSetPinDirection+0x1c6>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	83 30       	cpi	r24, 0x03	; 3
    2162:	91 05       	cpc	r25, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <DIO_VoidSetPinDirection+0x164>
    2166:	49 c0       	rjmp	.+146    	; 0x21fa <DIO_VoidSetPinDirection+0x1f6>
    2168:	5f c0       	rjmp	.+190    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
		case PORTA:
			CLR_BIT(DDRA_REG, (PIN % 8));
    216a:	aa e3       	ldi	r26, 0x3A	; 58
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	ea e3       	ldi	r30, 0x3A	; 58
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 01       	movw	r18, r24
    217e:	27 70       	andi	r18, 0x07	; 7
    2180:	30 70       	andi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <DIO_VoidSetPinDirection+0x18a>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <DIO_VoidSetPinDirection+0x186>
    2192:	80 95       	com	r24
    2194:	84 23       	and	r24, r20
    2196:	8c 93       	st	X, r24
    2198:	47 c0       	rjmp	.+142    	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, (PIN % 8));
    219a:	a7 e3       	ldi	r26, 0x37	; 55
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e7 e3       	ldi	r30, 0x37	; 55
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	48 2f       	mov	r20, r24
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 01       	movw	r18, r24
    21ae:	27 70       	andi	r18, 0x07	; 7
    21b0:	30 70       	andi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_VoidSetPinDirection+0x1ba>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_VoidSetPinDirection+0x1b6>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	2f c0       	rjmp	.+94     	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, (PIN % 8));
    21ca:	a4 e3       	ldi	r26, 0x34	; 52
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e4 e3       	ldi	r30, 0x34	; 52
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	48 2f       	mov	r20, r24
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 01       	movw	r18, r24
    21de:	27 70       	andi	r18, 0x07	; 7
    21e0:	30 70       	andi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_VoidSetPinDirection+0x1ea>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_VoidSetPinDirection+0x1e6>
    21f2:	80 95       	com	r24
    21f4:	84 23       	and	r24, r20
    21f6:	8c 93       	st	X, r24
    21f8:	17 c0       	rjmp	.+46     	; 0x2228 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, (PIN % 8));
    21fa:	a1 e3       	ldi	r26, 0x31	; 49
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e1 e3       	ldi	r30, 0x31	; 49
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	88 2f       	mov	r24, r24
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 01       	movw	r18, r24
    220e:	27 70       	andi	r18, 0x07	; 7
    2210:	30 70       	andi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 2e       	mov	r0, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <DIO_VoidSetPinDirection+0x21a>
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <DIO_VoidSetPinDirection+0x216>
    2222:	80 95       	com	r24
    2224:	84 23       	and	r24, r20
    2226:	8c 93       	st	X, r24
			break;
		}

	}

}
    2228:	26 96       	adiw	r28, 0x06	; 6
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(PIN_NUM PIN, u8 Value) {
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <DIO_VoidSetPinValue+0x6>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <DIO_VoidSetPinValue+0x8>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <DIO_VoidSetPinValue+0xa>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	6a 83       	std	Y+2, r22	; 0x02
	if (Value == DIO_HIGH) /*OUTPUT*/
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	09 f0       	breq	.+2      	; 0x2254 <DIO_VoidSetPinValue+0x1a>
    2252:	7f c0       	rjmp	.+254    	; 0x2352 <DIO_VoidSetPinValue+0x118>
	{
		switch (PIN / 8) {
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	86 95       	lsr	r24
    2258:	86 95       	lsr	r24
    225a:	86 95       	lsr	r24
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	3e 83       	std	Y+6, r19	; 0x06
    2262:	2d 83       	std	Y+5, r18	; 0x05
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	91 05       	cpc	r25, r1
    226c:	69 f1       	breq	.+90     	; 0x22c8 <DIO_VoidSetPinValue+0x8e>
    226e:	2d 81       	ldd	r18, Y+5	; 0x05
    2270:	3e 81       	ldd	r19, Y+6	; 0x06
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	2c f4       	brge	.+10     	; 0x2282 <DIO_VoidSetPinValue+0x48>
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f0       	breq	.+26     	; 0x229a <DIO_VoidSetPinValue+0x60>
    2280:	ee c0       	rjmp	.+476    	; 0x245e <DIO_VoidSetPinValue+0x224>
    2282:	2d 81       	ldd	r18, Y+5	; 0x05
    2284:	3e 81       	ldd	r19, Y+6	; 0x06
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	a9 f1       	breq	.+106    	; 0x22f6 <DIO_VoidSetPinValue+0xbc>
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <DIO_VoidSetPinValue+0x5e>
    2296:	46 c0       	rjmp	.+140    	; 0x2324 <DIO_VoidSetPinValue+0xea>
    2298:	e2 c0       	rjmp	.+452    	; 0x245e <DIO_VoidSetPinValue+0x224>
		case PORTA:
			SET_BIT(PORTA_REG, (PIN % 8));
    229a:	ab e3       	ldi	r26, 0x3B	; 59
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 01       	movw	r18, r24
    22ae:	27 70       	andi	r18, 0x07	; 7
    22b0:	30 70       	andi	r19, 0x00	; 0
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	02 2e       	mov	r0, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <DIO_VoidSetPinValue+0x84>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	0a 94       	dec	r0
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <DIO_VoidSetPinValue+0x80>
    22c2:	84 2b       	or	r24, r20
    22c4:	8c 93       	st	X, r24
    22c6:	cb c0       	rjmp	.+406    	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, (PIN % 8));
    22c8:	a8 e3       	ldi	r26, 0x38	; 56
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e8 e3       	ldi	r30, 0x38	; 56
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 01       	movw	r18, r24
    22dc:	27 70       	andi	r18, 0x07	; 7
    22de:	30 70       	andi	r19, 0x00	; 0
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	02 2e       	mov	r0, r18
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <DIO_VoidSetPinValue+0xb2>
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	0a 94       	dec	r0
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <DIO_VoidSetPinValue+0xae>
    22f0:	84 2b       	or	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	b4 c0       	rjmp	.+360    	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, (PIN % 8));
    22f6:	a5 e3       	ldi	r26, 0x35	; 53
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e5 e3       	ldi	r30, 0x35	; 53
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	48 2f       	mov	r20, r24
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 01       	movw	r18, r24
    230a:	27 70       	andi	r18, 0x07	; 7
    230c:	30 70       	andi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <DIO_VoidSetPinValue+0xe0>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <DIO_VoidSetPinValue+0xdc>
    231e:	84 2b       	or	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	9d c0       	rjmp	.+314    	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, (PIN % 8));
    2324:	a2 e3       	ldi	r26, 0x32	; 50
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e2 e3       	ldi	r30, 0x32	; 50
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9c 01       	movw	r18, r24
    2338:	27 70       	andi	r18, 0x07	; 7
    233a:	30 70       	andi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <DIO_VoidSetPinValue+0x10e>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <DIO_VoidSetPinValue+0x10a>
    234c:	84 2b       	or	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	86 c0       	rjmp	.+268    	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		}

	} else if (Value == DIO_LOW) /*input*/
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	88 23       	and	r24, r24
    2356:	09 f0       	breq	.+2      	; 0x235a <DIO_VoidSetPinValue+0x120>
    2358:	82 c0       	rjmp	.+260    	; 0x245e <DIO_VoidSetPinValue+0x224>
	{
		switch (PIN / 8) {
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	86 95       	lsr	r24
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3c 83       	std	Y+4, r19	; 0x04
    2368:	2b 83       	std	Y+3, r18	; 0x03
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	71 f1       	breq	.+92     	; 0x23d0 <DIO_VoidSetPinValue+0x196>
    2374:	2b 81       	ldd	r18, Y+3	; 0x03
    2376:	3c 81       	ldd	r19, Y+4	; 0x04
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	2c f4       	brge	.+10     	; 0x2388 <DIO_VoidSetPinValue+0x14e>
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f0       	breq	.+26     	; 0x23a0 <DIO_VoidSetPinValue+0x166>
    2386:	6b c0       	rjmp	.+214    	; 0x245e <DIO_VoidSetPinValue+0x224>
    2388:	2b 81       	ldd	r18, Y+3	; 0x03
    238a:	3c 81       	ldd	r19, Y+4	; 0x04
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	b9 f1       	breq	.+110    	; 0x2400 <DIO_VoidSetPinValue+0x1c6>
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <DIO_VoidSetPinValue+0x164>
    239c:	49 c0       	rjmp	.+146    	; 0x2430 <DIO_VoidSetPinValue+0x1f6>
    239e:	5f c0       	rjmp	.+190    	; 0x245e <DIO_VoidSetPinValue+0x224>
		case PORTA:
			CLR_BIT(PORTA_REG, (PIN % 8));
    23a0:	ab e3       	ldi	r26, 0x3B	; 59
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	eb e3       	ldi	r30, 0x3B	; 59
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	48 2f       	mov	r20, r24
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9c 01       	movw	r18, r24
    23b4:	27 70       	andi	r18, 0x07	; 7
    23b6:	30 70       	andi	r19, 0x00	; 0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 2e       	mov	r0, r18
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <DIO_VoidSetPinValue+0x18a>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	0a 94       	dec	r0
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <DIO_VoidSetPinValue+0x186>
    23c8:	80 95       	com	r24
    23ca:	84 23       	and	r24, r20
    23cc:	8c 93       	st	X, r24
    23ce:	47 c0       	rjmp	.+142    	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, (PIN % 8));
    23d0:	a8 e3       	ldi	r26, 0x38	; 56
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e8 e3       	ldi	r30, 0x38	; 56
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 01       	movw	r18, r24
    23e4:	27 70       	andi	r18, 0x07	; 7
    23e6:	30 70       	andi	r19, 0x00	; 0
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 2e       	mov	r0, r18
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <DIO_VoidSetPinValue+0x1ba>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <DIO_VoidSetPinValue+0x1b6>
    23f8:	80 95       	com	r24
    23fa:	84 23       	and	r24, r20
    23fc:	8c 93       	st	X, r24
    23fe:	2f c0       	rjmp	.+94     	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, (PIN % 8));
    2400:	a5 e3       	ldi	r26, 0x35	; 53
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e3       	ldi	r30, 0x35	; 53
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 01       	movw	r18, r24
    2414:	27 70       	andi	r18, 0x07	; 7
    2416:	30 70       	andi	r19, 0x00	; 0
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 2e       	mov	r0, r18
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <DIO_VoidSetPinValue+0x1ea>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <DIO_VoidSetPinValue+0x1e6>
    2428:	80 95       	com	r24
    242a:	84 23       	and	r24, r20
    242c:	8c 93       	st	X, r24
    242e:	17 c0       	rjmp	.+46     	; 0x245e <DIO_VoidSetPinValue+0x224>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, (PIN % 8));
    2430:	a2 e3       	ldi	r26, 0x32	; 50
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e2 e3       	ldi	r30, 0x32	; 50
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	48 2f       	mov	r20, r24
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 01       	movw	r18, r24
    2444:	27 70       	andi	r18, 0x07	; 7
    2446:	30 70       	andi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 2e       	mov	r0, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <DIO_VoidSetPinValue+0x21a>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <DIO_VoidSetPinValue+0x216>
    2458:	80 95       	com	r24
    245a:	84 23       	and	r24, r20
    245c:	8c 93       	st	X, r24
			break;
		}

	}

}
    245e:	26 96       	adiw	r28, 0x06	; 6
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 PORT, u8 Value) {
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <DIO_VoidSetPortValue+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <DIO_VoidSetPortValue+0x8>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3c 83       	std	Y+4, r19	; 0x04
    2488:	2b 83       	std	Y+3, r18	; 0x03
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	d1 f0       	breq	.+52     	; 0x24c8 <DIO_VoidSetPortValue+0x58>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <DIO_VoidSetPortValue+0x38>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	61 f0       	breq	.+24     	; 0x24be <DIO_VoidSetPortValue+0x4e>
    24a6:	1e c0       	rjmp	.+60     	; 0x24e4 <DIO_VoidSetPortValue+0x74>
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	3c 81       	ldd	r19, Y+4	; 0x04
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	81 f0       	breq	.+32     	; 0x24d2 <DIO_VoidSetPortValue+0x62>
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	91 05       	cpc	r25, r1
    24ba:	81 f0       	breq	.+32     	; 0x24dc <DIO_VoidSetPortValue+0x6c>
    24bc:	13 c0       	rjmp	.+38     	; 0x24e4 <DIO_VoidSetPortValue+0x74>
	case PORTA:
		PORTA_REG = Value;
    24be:	eb e3       	ldi	r30, 0x3B	; 59
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	80 83       	st	Z, r24
    24c6:	0e c0       	rjmp	.+28     	; 0x24e4 <DIO_VoidSetPortValue+0x74>
		break;
	case PORTB:
		PORTB_REG = Value;
    24c8:	e8 e3       	ldi	r30, 0x38	; 56
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	80 83       	st	Z, r24
    24d0:	09 c0       	rjmp	.+18     	; 0x24e4 <DIO_VoidSetPortValue+0x74>
		break;
	case PORTC:
		PORTC_REG = Value;
    24d2:	e5 e3       	ldi	r30, 0x35	; 53
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	80 83       	st	Z, r24
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <DIO_VoidSetPortValue+0x74>
		break;
	case PORTD:
		PORTD_REG = Value;
    24dc:	e2 e3       	ldi	r30, 0x32	; 50
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	80 83       	st	Z, r24
		break;
	}
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 PORT, u8 Value) {
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <DIO_VoidSetPortDirection+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <DIO_VoidSetPortDirection+0x8>
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	3c 83       	std	Y+4, r19	; 0x04
    250a:	2b 83       	std	Y+3, r18	; 0x03
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	91 05       	cpc	r25, r1
    2514:	d1 f0       	breq	.+52     	; 0x254a <DIO_VoidSetPortDirection+0x58>
    2516:	2b 81       	ldd	r18, Y+3	; 0x03
    2518:	3c 81       	ldd	r19, Y+4	; 0x04
    251a:	22 30       	cpi	r18, 0x02	; 2
    251c:	31 05       	cpc	r19, r1
    251e:	2c f4       	brge	.+10     	; 0x252a <DIO_VoidSetPortDirection+0x38>
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	61 f0       	breq	.+24     	; 0x2540 <DIO_VoidSetPortDirection+0x4e>
    2528:	1e c0       	rjmp	.+60     	; 0x2566 <DIO_VoidSetPortDirection+0x74>
    252a:	2b 81       	ldd	r18, Y+3	; 0x03
    252c:	3c 81       	ldd	r19, Y+4	; 0x04
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	81 f0       	breq	.+32     	; 0x2554 <DIO_VoidSetPortDirection+0x62>
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	91 05       	cpc	r25, r1
    253c:	81 f0       	breq	.+32     	; 0x255e <DIO_VoidSetPortDirection+0x6c>
    253e:	13 c0       	rjmp	.+38     	; 0x2566 <DIO_VoidSetPortDirection+0x74>
	case PORTA:
		DDRA_REG = Value;
    2540:	ea e3       	ldi	r30, 0x3A	; 58
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	80 83       	st	Z, r24
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTB:
		DDRB_REG = Value;
    254a:	e7 e3       	ldi	r30, 0x37	; 55
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	80 83       	st	Z, r24
    2552:	09 c0       	rjmp	.+18     	; 0x2566 <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTC:
		DDRC_REG = Value;
    2554:	e4 e3       	ldi	r30, 0x34	; 52
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	80 83       	st	Z, r24
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTD:
		DDRD_REG = Value;
    255e:	e1 e3       	ldi	r30, 0x31	; 49
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	80 83       	st	Z, r24
		break;
	}
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(PIN_NUM PIN) {
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <DIO_U8GetPinValue+0x6>
    257a:	00 d0       	rcall	.+0      	; 0x257c <DIO_U8GetPinValue+0x8>
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
    2582:	19 82       	std	Y+1, r1	; 0x01
	switch (PIN / 8) {
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	86 95       	lsr	r24
    2588:	86 95       	lsr	r24
    258a:	86 95       	lsr	r24
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3c 83       	std	Y+4, r19	; 0x04
    2592:	2b 83       	std	Y+3, r18	; 0x03
    2594:	4b 81       	ldd	r20, Y+3	; 0x03
    2596:	5c 81       	ldd	r21, Y+4	; 0x04
    2598:	41 30       	cpi	r20, 0x01	; 1
    259a:	51 05       	cpc	r21, r1
    259c:	59 f1       	breq	.+86     	; 0x25f4 <DIO_U8GetPinValue+0x80>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	82 30       	cpi	r24, 0x02	; 2
    25a4:	91 05       	cpc	r25, r1
    25a6:	34 f4       	brge	.+12     	; 0x25b4 <DIO_U8GetPinValue+0x40>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	21 15       	cp	r18, r1
    25ae:	31 05       	cpc	r19, r1
    25b0:	69 f0       	breq	.+26     	; 0x25cc <DIO_U8GetPinValue+0x58>
    25b2:	5b c0       	rjmp	.+182    	; 0x266a <DIO_U8GetPinValue+0xf6>
    25b4:	4b 81       	ldd	r20, Y+3	; 0x03
    25b6:	5c 81       	ldd	r21, Y+4	; 0x04
    25b8:	42 30       	cpi	r20, 0x02	; 2
    25ba:	51 05       	cpc	r21, r1
    25bc:	79 f1       	breq	.+94     	; 0x261c <DIO_U8GetPinValue+0xa8>
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	83 30       	cpi	r24, 0x03	; 3
    25c4:	91 05       	cpc	r25, r1
    25c6:	09 f4       	brne	.+2      	; 0x25ca <DIO_U8GetPinValue+0x56>
    25c8:	3d c0       	rjmp	.+122    	; 0x2644 <DIO_U8GetPinValue+0xd0>
    25ca:	4f c0       	rjmp	.+158    	; 0x266a <DIO_U8GetPinValue+0xf6>
	case PORTA:
		value = GET_BIT(PINA_REG, (PIN % 8));
    25cc:	e9 e3       	ldi	r30, 0x39	; 57
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	87 70       	andi	r24, 0x07	; 7
    25de:	90 70       	andi	r25, 0x00	; 0
    25e0:	a9 01       	movw	r20, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <DIO_U8GetPinValue+0x74>
    25e4:	55 95       	asr	r21
    25e6:	47 95       	ror	r20
    25e8:	8a 95       	dec	r24
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <DIO_U8GetPinValue+0x70>
    25ec:	ca 01       	movw	r24, r20
    25ee:	81 70       	andi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	3b c0       	rjmp	.+118    	; 0x266a <DIO_U8GetPinValue+0xf6>
		break;
	case PORTB:
		value = GET_BIT(PINB_REG, (PIN % 8));
    25f4:	e6 e3       	ldi	r30, 0x36	; 54
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	87 70       	andi	r24, 0x07	; 7
    2606:	90 70       	andi	r25, 0x00	; 0
    2608:	a9 01       	movw	r20, r18
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <DIO_U8GetPinValue+0x9c>
    260c:	55 95       	asr	r21
    260e:	47 95       	ror	r20
    2610:	8a 95       	dec	r24
    2612:	e2 f7       	brpl	.-8      	; 0x260c <DIO_U8GetPinValue+0x98>
    2614:	ca 01       	movw	r24, r20
    2616:	81 70       	andi	r24, 0x01	; 1
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	27 c0       	rjmp	.+78     	; 0x266a <DIO_U8GetPinValue+0xf6>
		break;
	case PORTC:
		value = GET_BIT(PINC_REG, (PIN % 8));
    261c:	e3 e3       	ldi	r30, 0x33	; 51
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	87 70       	andi	r24, 0x07	; 7
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	a9 01       	movw	r20, r18
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <DIO_U8GetPinValue+0xc4>
    2634:	55 95       	asr	r21
    2636:	47 95       	ror	r20
    2638:	8a 95       	dec	r24
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <DIO_U8GetPinValue+0xc0>
    263c:	ca 01       	movw	r24, r20
    263e:	81 70       	andi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	13 c0       	rjmp	.+38     	; 0x266a <DIO_U8GetPinValue+0xf6>
		break;
	case PORTD:
		value = GET_BIT(PIND_REG, (PIN % 8));
    2644:	e0 e3       	ldi	r30, 0x30	; 48
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	87 70       	andi	r24, 0x07	; 7
    2656:	90 70       	andi	r25, 0x00	; 0
    2658:	a9 01       	movw	r20, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_U8GetPinValue+0xec>
    265c:	55 95       	asr	r21
    265e:	47 95       	ror	r20
    2660:	8a 95       	dec	r24
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_U8GetPinValue+0xe8>
    2664:	ca 01       	movw	r24, r20
    2666:	81 70       	andi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <DIO_SetPin_PULLUP>:
void DIO_SetPin_PULLUP(PIN_NUM PIN)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <DIO_SetPin_PULLUP+0x6>
    2680:	0f 92       	push	r0
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
	switch (PIN / 8)
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	86 95       	lsr	r24
    268c:	86 95       	lsr	r24
    268e:	86 95       	lsr	r24
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	3b 83       	std	Y+3, r19	; 0x03
    2696:	2a 83       	std	Y+2, r18	; 0x02
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	9b 81       	ldd	r25, Y+3	; 0x03
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	69 f1       	breq	.+90     	; 0x26fc <DIO_SetPin_PULLUP+0x82>
    26a2:	2a 81       	ldd	r18, Y+2	; 0x02
    26a4:	3b 81       	ldd	r19, Y+3	; 0x03
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <DIO_SetPin_PULLUP+0x3c>
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f0       	breq	.+26     	; 0x26ce <DIO_SetPin_PULLUP+0x54>
    26b4:	67 c0       	rjmp	.+206    	; 0x2784 <DIO_SetPin_PULLUP+0x10a>
    26b6:	2a 81       	ldd	r18, Y+2	; 0x02
    26b8:	3b 81       	ldd	r19, Y+3	; 0x03
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	a9 f1       	breq	.+106    	; 0x272a <DIO_SetPin_PULLUP+0xb0>
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	9b 81       	ldd	r25, Y+3	; 0x03
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <DIO_SetPin_PULLUP+0x52>
    26ca:	46 c0       	rjmp	.+140    	; 0x2758 <DIO_SetPin_PULLUP+0xde>
    26cc:	5b c0       	rjmp	.+182    	; 0x2784 <DIO_SetPin_PULLUP+0x10a>
	{
	case PORTA:
		SET_BIT(PORTA_REG, (PIN % 8));
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	48 2f       	mov	r20, r24
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c 01       	movw	r18, r24
    26e2:	27 70       	andi	r18, 0x07	; 7
    26e4:	30 70       	andi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <DIO_SetPin_PULLUP+0x78>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <DIO_SetPin_PULLUP+0x74>
    26f6:	84 2b       	or	r24, r20
    26f8:	8c 93       	st	X, r24
    26fa:	44 c0       	rjmp	.+136    	; 0x2784 <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTB:
		SET_BIT(PORTB_REG, (PIN % 8));
    26fc:	a8 e3       	ldi	r26, 0x38	; 56
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e8 e3       	ldi	r30, 0x38	; 56
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	48 2f       	mov	r20, r24
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9c 01       	movw	r18, r24
    2710:	27 70       	andi	r18, 0x07	; 7
    2712:	30 70       	andi	r19, 0x00	; 0
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	02 2e       	mov	r0, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <DIO_SetPin_PULLUP+0xa6>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	0a 94       	dec	r0
    2722:	e2 f7       	brpl	.-8      	; 0x271c <DIO_SetPin_PULLUP+0xa2>
    2724:	84 2b       	or	r24, r20
    2726:	8c 93       	st	X, r24
    2728:	2d c0       	rjmp	.+90     	; 0x2784 <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTC:
		SET_BIT(PORTC_REG, (PIN % 8));
    272a:	a5 e3       	ldi	r26, 0x35	; 53
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e5 e3       	ldi	r30, 0x35	; 53
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	48 2f       	mov	r20, r24
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9c 01       	movw	r18, r24
    273e:	27 70       	andi	r18, 0x07	; 7
    2740:	30 70       	andi	r19, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	02 2e       	mov	r0, r18
    2748:	02 c0       	rjmp	.+4      	; 0x274e <DIO_SetPin_PULLUP+0xd4>
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	0a 94       	dec	r0
    2750:	e2 f7       	brpl	.-8      	; 0x274a <DIO_SetPin_PULLUP+0xd0>
    2752:	84 2b       	or	r24, r20
    2754:	8c 93       	st	X, r24
    2756:	16 c0       	rjmp	.+44     	; 0x2784 <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTD:
		SET_BIT(PORTD_REG, (PIN % 8));
    2758:	a2 e3       	ldi	r26, 0x32	; 50
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e2 e3       	ldi	r30, 0x32	; 50
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	48 2f       	mov	r20, r24
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9c 01       	movw	r18, r24
    276c:	27 70       	andi	r18, 0x07	; 7
    276e:	30 70       	andi	r19, 0x00	; 0
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 2e       	mov	r0, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <DIO_SetPin_PULLUP+0x102>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	0a 94       	dec	r0
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <DIO_SetPin_PULLUP+0xfe>
    2780:	84 2b       	or	r24, r20
    2782:	8c 93       	st	X, r24
		break;
	}
}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <ADC_INIT>:
#include<util/delay.h>

void (*ADC_f)(void)=NULL;


void ADC_INIT(Voltage_Reference Voltage_Selection) {
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <ADC_INIT+0x6>
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	89 83       	std	Y+1, r24	; 0x01
    switch (Voltage_Selection) {
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	3b 83       	std	Y+3, r19	; 0x03
    27a6:	2a 83       	std	Y+2, r18	; 0x02
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	91 05       	cpc	r25, r1
    27b0:	21 f1       	breq	.+72     	; 0x27fa <ADC_INIT+0x6a>
    27b2:	2a 81       	ldd	r18, Y+2	; 0x02
    27b4:	3b 81       	ldd	r19, Y+3	; 0x03
    27b6:	22 30       	cpi	r18, 0x02	; 2
    27b8:	31 05       	cpc	r19, r1
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <ADC_INIT+0x36>
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	9b 81       	ldd	r25, Y+3	; 0x03
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	61 f0       	breq	.+24     	; 0x27dc <ADC_INIT+0x4c>
    27c4:	46 c0       	rjmp	.+140    	; 0x2852 <ADC_INIT+0xc2>
    27c6:	2a 81       	ldd	r18, Y+2	; 0x02
    27c8:	3b 81       	ldd	r19, Y+3	; 0x03
    27ca:	22 30       	cpi	r18, 0x02	; 2
    27cc:	31 05       	cpc	r19, r1
    27ce:	21 f1       	breq	.+72     	; 0x2818 <ADC_INIT+0x88>
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	9b 81       	ldd	r25, Y+3	; 0x03
    27d4:	83 30       	cpi	r24, 0x03	; 3
    27d6:	91 05       	cpc	r25, r1
    27d8:	71 f1       	breq	.+92     	; 0x2836 <ADC_INIT+0xa6>
    27da:	3b c0       	rjmp	.+118    	; 0x2852 <ADC_INIT+0xc2>
        case Internal_Vref_turned_off:
            CLR_BIT(ADMUX, REFS0);
    27dc:	a7 e2       	ldi	r26, 0x27	; 39
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e7 e2       	ldi	r30, 0x27	; 39
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8f 7b       	andi	r24, 0xBF	; 191
    27e8:	8c 93       	st	X, r24
            CLR_BIT(ADMUX, REFS1);
    27ea:	a7 e2       	ldi	r26, 0x27	; 39
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e7 e2       	ldi	r30, 0x27	; 39
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 77       	andi	r24, 0x7F	; 127
    27f6:	8c 93       	st	X, r24
    27f8:	2c c0       	rjmp	.+88     	; 0x2852 <ADC_INIT+0xc2>
            break;
        case AVCC:
            SET_BIT(ADMUX, REFS0);
    27fa:	a7 e2       	ldi	r26, 0x27	; 39
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e7 e2       	ldi	r30, 0x27	; 39
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 64       	ori	r24, 0x40	; 64
    2806:	8c 93       	st	X, r24
            CLR_BIT(ADMUX, REFS1);
    2808:	a7 e2       	ldi	r26, 0x27	; 39
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e7 e2       	ldi	r30, 0x27	; 39
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8f 77       	andi	r24, 0x7F	; 127
    2814:	8c 93       	st	X, r24
    2816:	1d c0       	rjmp	.+58     	; 0x2852 <ADC_INIT+0xc2>
            break;
        case Res:
            CLR_BIT(ADMUX, REFS0);
    2818:	a7 e2       	ldi	r26, 0x27	; 39
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e7 e2       	ldi	r30, 0x27	; 39
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8f 7b       	andi	r24, 0xBF	; 191
    2824:	8c 93       	st	X, r24
            SET_BIT(ADMUX, REFS1);
    2826:	a7 e2       	ldi	r26, 0x27	; 39
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e7 e2       	ldi	r30, 0x27	; 39
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	80 68       	ori	r24, 0x80	; 128
    2832:	8c 93       	st	X, r24
    2834:	0e c0       	rjmp	.+28     	; 0x2852 <ADC_INIT+0xc2>
            break;
        case Internal_Voltage_Reference:
            SET_BIT(ADMUX, REFS0);
    2836:	a7 e2       	ldi	r26, 0x27	; 39
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e7 e2       	ldi	r30, 0x27	; 39
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 64       	ori	r24, 0x40	; 64
    2842:	8c 93       	st	X, r24
            SET_BIT(ADMUX, REFS1);
    2844:	a7 e2       	ldi	r26, 0x27	; 39
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e7 e2       	ldi	r30, 0x27	; 39
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	80 68       	ori	r24, 0x80	; 128
    2850:	8c 93       	st	X, r24
            break;
    }
    SET_BIT(ADCSRA, ADPS2); // select the prescaler
    2852:	a6 e2       	ldi	r26, 0x26	; 38
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e6 e2       	ldi	r30, 0x26	; 38
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	84 60       	ori	r24, 0x04	; 4
    285e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS1);
    2860:	a6 e2       	ldi	r26, 0x26	; 38
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e2       	ldi	r30, 0x26	; 38
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	82 60       	ori	r24, 0x02	; 2
    286c:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS0);
    286e:	a6 e2       	ldi	r26, 0x26	; 38
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e6 e2       	ldi	r30, 0x26	; 38
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	81 60       	ori	r24, 0x01	; 1
    287a:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADLAR);
    287c:	a7 e2       	ldi	r26, 0x27	; 39
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e7 e2       	ldi	r30, 0x27	; 39
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8f 7d       	andi	r24, 0xDF	; 223
    2888:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADATE);
    288a:	a6 e2       	ldi	r26, 0x26	; 38
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e6 e2       	ldi	r30, 0x26	; 38
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8f 7d       	andi	r24, 0xDF	; 223
    2896:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADIE); // enable ADC interrupt
    2898:	a6 e2       	ldi	r26, 0x26	; 38
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e6 e2       	ldi	r30, 0x26	; 38
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	88 60       	ori	r24, 0x08	; 8
    28a4:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADEN); // enable the ADC
    28a6:	a6 e2       	ldi	r26, 0x26	; 38
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e6 e2       	ldi	r30, 0x26	; 38
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	80 68       	ori	r24, 0x80	; 128
    28b2:	8c 93       	st	X, r24
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <ADC_READ>:

u32 ADC_READ(ADC_channel channel) {
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	6b 97       	sbiw	r28, 0x1b	; 27
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	8b 8f       	std	Y+27, r24	; 0x1b
	int ADC_Value = 0;
    28d6:	1a 8e       	std	Y+26, r1	; 0x1a
    28d8:	19 8e       	std	Y+25, r1	; 0x19
	ADMUX = (ADMUX & 0xE0) | channel; //masking and then and select the input pin
    28da:	a7 e2       	ldi	r26, 0x27	; 39
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e7 e2       	ldi	r30, 0x27	; 39
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	98 2f       	mov	r25, r24
    28e6:	90 7e       	andi	r25, 0xE0	; 224
    28e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ea:	89 2b       	or	r24, r25
    28ec:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); // : ADC Start Conversion
    28ee:	a6 e2       	ldi	r26, 0x26	; 38
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e6 e2       	ldi	r30, 0x26	; 38
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	80 64       	ori	r24, 0x40	; 64
    28fa:	8c 93       	st	X, r24

	while (GET_BIT(ADCSRA,ADIF) == 0) {
    28fc:	e6 e2       	ldi	r30, 0x26	; 38
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	82 95       	swap	r24
    2904:	8f 70       	andi	r24, 0x0F	; 15
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	81 70       	andi	r24, 0x01	; 1
    290c:	90 70       	andi	r25, 0x00	; 0
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	a9 f3       	breq	.-22     	; 0x28fc <ADC_READ+0x3c>
		//flag
	}
	SET_BIT(ADCSRA, ADIF);
    2912:	a6 e2       	ldi	r26, 0x26	; 38
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e6 e2       	ldi	r30, 0x26	; 38
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	80 61       	ori	r24, 0x10	; 16
    291e:	8c 93       	st	X, r24
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 e2       	ldi	r26, 0x20	; 32
    2926:	b1 e4       	ldi	r27, 0x41	; 65
    2928:	8d 8b       	std	Y+21, r24	; 0x15
    292a:	9e 8b       	std	Y+22, r25	; 0x16
    292c:	af 8b       	std	Y+23, r26	; 0x17
    292e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	2b ea       	ldi	r18, 0xAB	; 171
    293a:	3a ea       	ldi	r19, 0xAA	; 170
    293c:	4a ea       	ldi	r20, 0xAA	; 170
    293e:	50 e4       	ldi	r21, 0x40	; 64
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	89 8b       	std	Y+17, r24	; 0x11
    294a:	9a 8b       	std	Y+18, r25	; 0x12
    294c:	ab 8b       	std	Y+19, r26	; 0x13
    294e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2950:	69 89       	ldd	r22, Y+17	; 0x11
    2952:	7a 89       	ldd	r23, Y+18	; 0x12
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	1c f4       	brge	.+6      	; 0x296e <ADC_READ+0xae>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	88 8b       	std	Y+16, r24	; 0x10
    296c:	91 c0       	rjmp	.+290    	; 0x2a90 <ADC_READ+0x1d0>
	else if (__tmp > 255)
    296e:	69 89       	ldd	r22, Y+17	; 0x11
    2970:	7a 89       	ldd	r23, Y+18	; 0x12
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	53 e4       	ldi	r21, 0x43	; 67
    297e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2982:	18 16       	cp	r1, r24
    2984:	0c f0       	brlt	.+2      	; 0x2988 <ADC_READ+0xc8>
    2986:	7b c0       	rjmp	.+246    	; 0x2a7e <ADC_READ+0x1be>
	{
		_delay_ms(__us / 1000.0);
    2988:	6d 89       	ldd	r22, Y+21	; 0x15
    298a:	7e 89       	ldd	r23, Y+22	; 0x16
    298c:	8f 89       	ldd	r24, Y+23	; 0x17
    298e:	98 8d       	ldd	r25, Y+24	; 0x18
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a e7       	ldi	r20, 0x7A	; 122
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8c 87       	std	Y+12, r24	; 0x0c
    29a2:	9d 87       	std	Y+13, r25	; 0x0d
    29a4:	ae 87       	std	Y+14, r26	; 0x0e
    29a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    29aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    29ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a e7       	ldi	r20, 0x7A	; 122
    29b6:	55 e4       	ldi	r21, 0x45	; 69
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	88 87       	std	Y+8, r24	; 0x08
    29c2:	99 87       	std	Y+9, r25	; 0x09
    29c4:	aa 87       	std	Y+10, r26	; 0x0a
    29c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29c8:	68 85       	ldd	r22, Y+8	; 0x08
    29ca:	79 85       	ldd	r23, Y+9	; 0x09
    29cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <ADC_READ+0x12a>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9f 83       	std	Y+7, r25	; 0x07
    29e6:	8e 83       	std	Y+6, r24	; 0x06
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <ADC_READ+0x1a8>
	else if (__tmp > 65535)
    29ea:	68 85       	ldd	r22, Y+8	; 0x08
    29ec:	79 85       	ldd	r23, Y+9	; 0x09
    29ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <ADC_READ+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a04:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9f 83       	std	Y+7, r25	; 0x07
    2a28:	8e 83       	std	Y+6, r24	; 0x06
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <ADC_READ+0x18a>
    2a2c:	80 e9       	ldi	r24, 0x90	; 144
    2a2e:	91 e0       	ldi	r25, 0x01	; 1
    2a30:	9d 83       	std	Y+5, r25	; 0x05
    2a32:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <ADC_READ+0x178>
    2a3c:	9d 83       	std	Y+5, r25	; 0x05
    2a3e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9f 83       	std	Y+7, r25	; 0x07
    2a48:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <ADC_READ+0x16c>
    2a52:	24 c0       	rjmp	.+72     	; 0x2a9c <ADC_READ+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	68 85       	ldd	r22, Y+8	; 0x08
    2a56:	79 85       	ldd	r23, Y+9	; 0x09
    2a58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9f 83       	std	Y+7, r25	; 0x07
    2a66:	8e 83       	std	Y+6, r24	; 0x06
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6c:	9b 83       	std	Y+3, r25	; 0x03
    2a6e:	8a 83       	std	Y+2, r24	; 0x02
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	9b 81       	ldd	r25, Y+3	; 0x03
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <ADC_READ+0x1b4>
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <ADC_READ+0x1dc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7e:	69 89       	ldd	r22, Y+17	; 0x11
    2a80:	7a 89       	ldd	r23, Y+18	; 0x12
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	88 8b       	std	Y+16, r24	; 0x10
    2a90:	88 89       	ldd	r24, Y+16	; 0x10
    2a92:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	8a 95       	dec	r24
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <ADC_READ+0x1d6>
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

	ADC_Value = (int) ADCL + (int) ADCH * 256; //to store the data in 10 bits
    2a9c:	e4 e2       	ldi	r30, 0x24	; 36
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	e5 e2       	ldi	r30, 0x25	; 37
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	88 27       	eor	r24, r24
    2ab4:	82 0f       	add	r24, r18
    2ab6:	93 1f       	adc	r25, r19
    2ab8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aba:	89 8f       	std	Y+25, r24	; 0x19

	return ADC_Value;
    2abc:	89 8d       	ldd	r24, Y+25	; 0x19
    2abe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ac0:	aa 27       	eor	r26, r26
    2ac2:	97 fd       	sbrc	r25, 7
    2ac4:	a0 95       	com	r26
    2ac6:	ba 2f       	mov	r27, r26
}
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	6b 96       	adiw	r28, 0x1b	; 27
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <start_ADC_conversion>:
//		ADC_f();
//	}
//	SET_BIT(ADCSRA, ADIF);
//}

void start_ADC_conversion(ADC_channel channel) {
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	0f 92       	push	r0
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    ADMUX = (ADMUX & 0xE0) | channel; // Masking and then select the input pin
    2aea:	a7 e2       	ldi	r26, 0x27	; 39
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e7 e2       	ldi	r30, 0x27	; 39
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	98 2f       	mov	r25, r24
    2af6:	90 7e       	andi	r25, 0xE0	; 224
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	89 2b       	or	r24, r25
    2afc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADSC); // ADC Start Conversion
    2afe:	a6 e2       	ldi	r26, 0x26	; 38
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e6 e2       	ldi	r30, 0x26	; 38
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	80 64       	ori	r24, 0x40	; 64
    2b0a:	8c 93       	st	X, r24
}
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <__vector_16>:


void __vector_16(void) {
    2b14:	1f 92       	push	r1
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    if (ADC_f != NULL) {
    2b3e:	80 91 09 02 	lds	r24, 0x0209
    2b42:	90 91 0a 02 	lds	r25, 0x020A
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	29 f0       	breq	.+10     	; 0x2b54 <__vector_16+0x40>
        ADC_f();
    2b4a:	e0 91 09 02 	lds	r30, 0x0209
    2b4e:	f0 91 0a 02 	lds	r31, 0x020A
    2b52:	09 95       	icall
    }
    SET_BIT(ADCSRA, ADIF); // Clear the interrupt flag
    2b54:	a6 e2       	ldi	r26, 0x26	; 38
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e6 e2       	ldi	r30, 0x26	; 38
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 61       	ori	r24, 0x10	; 16
    2b60:	8c 93       	st	X, r24
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	ff 91       	pop	r31
    2b68:	ef 91       	pop	r30
    2b6a:	bf 91       	pop	r27
    2b6c:	af 91       	pop	r26
    2b6e:	9f 91       	pop	r25
    2b70:	8f 91       	pop	r24
    2b72:	7f 91       	pop	r23
    2b74:	6f 91       	pop	r22
    2b76:	5f 91       	pop	r21
    2b78:	4f 91       	pop	r20
    2b7a:	3f 91       	pop	r19
    2b7c:	2f 91       	pop	r18
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	1f 90       	pop	r1
    2b86:	18 95       	reti

00002b88 <ADC_VoidCallBack>:

void ADC_VoidCallBack(void (*Ptr_f)(void)) {
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <ADC_VoidCallBack+0x6>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
    ADC_f = Ptr_f;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	90 93 0a 02 	sts	0x020A, r25
    2b9e:	80 93 09 02 	sts	0x0209, r24
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <LED_ON>:

#include "LED_Interface.h"
#include "BIT_MATH.h"
#include "DIO_Private.h"

void LED_ON(u16 number) {
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <LED_ON+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0) {
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	31 f4       	brne	.+12     	; 0x2bce <LED_ON+0x22>
		DIO_VoidSetPinValue(LED0, DIO_HIGH);
    2bc2:	82 e1       	ldi	r24, 0x12	; 18
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
	if (number == 1) {
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	31 f4       	brne	.+12     	; 0x2be4 <LED_ON+0x38>
		DIO_VoidSetPinValue(LED1, DIO_HIGH);
    2bd8:	87 e1       	ldi	r24, 0x17	; 23
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
	if (number == 2) {
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	91 05       	cpc	r25, r1
    2bec:	31 f4       	brne	.+12     	; 0x2bfa <LED_ON+0x4e>
		DIO_VoidSetPinValue(LED2, DIO_HIGH);
    2bee:	8b e1       	ldi	r24, 0x1B	; 27
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
}
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <LED_OFF>:
void LED_OFF(u16 num) {
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <LED_OFF+0x6>
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
	if (num == 0) {
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	31 f4       	brne	.+12     	; 0x2c26 <LED_OFF+0x22>
		DIO_VoidSetPinValue(LED0, DIO_LOW);
    2c1a:	82 e1       	ldi	r24, 0x12	; 18
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
	if (num == 1) {
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	81 30       	cpi	r24, 0x01	; 1
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	31 f4       	brne	.+12     	; 0x2c3c <LED_OFF+0x38>
		DIO_VoidSetPinValue(LED1, DIO_LOW);
    2c30:	87 e1       	ldi	r24, 0x17	; 23
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
	if (num == 2) {
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	91 05       	cpc	r25, r1
    2c44:	31 f4       	brne	.+12     	; 0x2c52 <LED_OFF+0x4e>
		DIO_VoidSetPinValue(LED2, DIO_LOW);
    2c46:	8b e1       	ldi	r24, 0x1B	; 27
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}
}
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <LED_TOGGLE>:

void LED_TOGGLE(u16 number) {
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <LED_TOGGLE+0x6>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01

	if (number == 0) {
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	41 f4       	brne	.+16     	; 0x2c82 <LED_TOGGLE+0x26>
		TOGGLE_BIT(PORTC_REG, 2);
    2c72:	a5 e3       	ldi	r26, 0x35	; 53
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e5 e3       	ldi	r30, 0x35	; 53
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	90 81       	ld	r25, Z
    2c7c:	84 e0       	ldi	r24, 0x04	; 4
    2c7e:	89 27       	eor	r24, r25
    2c80:	8c 93       	st	X, r24
	}
	if (number == 1) {
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	91 05       	cpc	r25, r1
    2c8a:	41 f4       	brne	.+16     	; 0x2c9c <LED_TOGGLE+0x40>
		TOGGLE_BIT(PORTC_REG, 7);
    2c8c:	a5 e3       	ldi	r26, 0x35	; 53
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e5 e3       	ldi	r30, 0x35	; 53
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	90 81       	ld	r25, Z
    2c96:	80 e8       	ldi	r24, 0x80	; 128
    2c98:	89 27       	eor	r24, r25
    2c9a:	8c 93       	st	X, r24
	}
	if (number == 2) {
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	82 30       	cpi	r24, 0x02	; 2
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	41 f4       	brne	.+16     	; 0x2cb6 <LED_TOGGLE+0x5a>
		TOGGLE_BIT(PORTD_REG, 3);
    2ca6:	a2 e3       	ldi	r26, 0x32	; 50
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e2 e3       	ldi	r30, 0x32	; 50
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	90 81       	ld	r25, Z
    2cb0:	88 e0       	ldi	r24, 0x08	; 8
    2cb2:	89 27       	eor	r24, r25
    2cb4:	8c 93       	st	X, r24
	}
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <LCD_VoidLatch>:
    0b00100,
    0b00000,
    0b00000
};

static void LCD_VoidLatch(u8 Copy_byte) {
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	6d 97       	sbiw	r28, 0x1d	; 29
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == LCD_4_bit
//	DIO_VoidSetPinValue(D7,GET_BIT(Copy_byte,7));
//	DIO_VoidSetPinValue(D6,GET_BIT(Copy_byte,6));
//	DIO_VoidSetPinValue(D5,GET_BIT(Copy_byte,5));
//	DIO_VoidSetPinValue(D4,GET_BIT(Copy_byte,4));
	PORTD_REG = (PORTD_REG & 0x0F) | ((Copy_byte) & 0xF0);
    2cd6:	a2 e3       	ldi	r26, 0x32	; 50
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e2 e3       	ldi	r30, 0x32	; 50
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	9f 70       	andi	r25, 0x0F	; 15
    2ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce6:	80 7f       	andi	r24, 0xF0	; 240
    2ce8:	89 2b       	or	r24, r25
    2cea:	8c 93       	st	X, r24
	DIO_VoidSetPinValue(En, DIO_HIGH);
    2cec:	8b e0       	ldi	r24, 0x0B	; 11
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e8       	ldi	r26, 0x80	; 128
    2cfa:	bf e3       	ldi	r27, 0x3F	; 63
    2cfc:	89 8f       	std	Y+25, r24	; 0x19
    2cfe:	9a 8f       	std	Y+26, r25	; 0x1a
    2d00:	ab 8f       	std	Y+27, r26	; 0x1b
    2d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	69 8d       	ldd	r22, Y+25	; 0x19
    2d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a e7       	ldi	r20, 0x7A	; 122
    2d12:	55 e4       	ldi	r21, 0x45	; 69
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	8d 8b       	std	Y+21, r24	; 0x15
    2d1e:	9e 8b       	std	Y+22, r25	; 0x16
    2d20:	af 8b       	std	Y+23, r26	; 0x17
    2d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d24:	6d 89       	ldd	r22, Y+21	; 0x15
    2d26:	7e 89       	ldd	r23, Y+22	; 0x16
    2d28:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <LCD_VoidLatch+0x86>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <LCD_VoidLatch+0x104>
	else if (__tmp > 65535)
    2d46:	6d 89       	ldd	r22, Y+21	; 0x15
    2d48:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <LCD_VoidLatch+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9c 8b       	std	Y+20, r25	; 0x14
    2d84:	8b 8b       	std	Y+19, r24	; 0x13
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <LCD_VoidLatch+0xe6>
    2d88:	80 e9       	ldi	r24, 0x90	; 144
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	9a 8b       	std	Y+18, r25	; 0x12
    2d8e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d90:	89 89       	ldd	r24, Y+17	; 0x11
    2d92:	9a 89       	ldd	r25, Y+18	; 0x12
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <LCD_VoidLatch+0xd4>
    2d98:	9a 8b       	std	Y+18, r25	; 0x12
    2d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9c 8b       	std	Y+20, r25	; 0x14
    2da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	8b 89       	ldd	r24, Y+19	; 0x13
    2da8:	9c 89       	ldd	r25, Y+20	; 0x14
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <LCD_VoidLatch+0xc8>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <LCD_VoidLatch+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	6d 89       	ldd	r22, Y+21	; 0x15
    2db2:	7e 89       	ldd	r23, Y+22	; 0x16
    2db4:	8f 89       	ldd	r24, Y+23	; 0x17
    2db6:	98 8d       	ldd	r25, Y+24	; 0x18
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9c 8b       	std	Y+20, r25	; 0x14
    2dc2:	8b 8b       	std	Y+19, r24	; 0x13
    2dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc8:	98 8b       	std	Y+16, r25	; 0x10
    2dca:	8f 87       	std	Y+15, r24	; 0x0f
    2dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dce:	98 89       	ldd	r25, Y+16	; 0x10
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_VoidLatch+0x110>
    2dd4:	98 8b       	std	Y+16, r25	; 0x10
    2dd6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(En, DIO_LOW);
    2dd8:	8b e0       	ldi	r24, 0x0B	; 11
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
//	DIO_VoidSetPinValue(D7,GET_BIT(Copy_byte,3));
//	DIO_VoidSetPinValue(D6,GET_BIT(Copy_byte,2));
//	DIO_VoidSetPinValue(D5,GET_BIT(Copy_byte,1));
//	DIO_VoidSetPinValue(D4,GET_BIT(Copy_byte,0));
	PORTD_REG = (PORTD_REG & 0x0F) | ((Copy_byte & 0x0F) << 4);
    2de0:	a2 e3       	ldi	r26, 0x32	; 50
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e2 e3       	ldi	r30, 0x32	; 50
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	28 2f       	mov	r18, r24
    2dec:	2f 70       	andi	r18, 0x0F	; 15
    2dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	82 95       	swap	r24
    2df6:	92 95       	swap	r25
    2df8:	90 7f       	andi	r25, 0xF0	; 240
    2dfa:	98 27       	eor	r25, r24
    2dfc:	80 7f       	andi	r24, 0xF0	; 240
    2dfe:	98 27       	eor	r25, r24
    2e00:	82 2b       	or	r24, r18
    2e02:	8c 93       	st	X, r24
	DIO_VoidSetPinValue(En, DIO_HIGH);
    2e04:	8b e0       	ldi	r24, 0x0B	; 11
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e8       	ldi	r26, 0x80	; 128
    2e12:	bf e3       	ldi	r27, 0x3F	; 63
    2e14:	8b 87       	std	Y+11, r24	; 0x0b
    2e16:	9c 87       	std	Y+12, r25	; 0x0c
    2e18:	ad 87       	std	Y+13, r26	; 0x0d
    2e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	55 e4       	ldi	r21, 0x45	; 69
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8f 83       	std	Y+7, r24	; 0x07
    2e36:	98 87       	std	Y+8, r25	; 0x08
    2e38:	a9 87       	std	Y+9, r26	; 0x09
    2e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <LCD_VoidLatch+0x19e>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <LCD_VoidLatch+0x21c>
	else if (__tmp > 65535)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <LCD_VoidLatch+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <LCD_VoidLatch+0x1fe>
    2ea0:	80 e9       	ldi	r24, 0x90	; 144
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	9c 83       	std	Y+4, r25	; 0x04
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_VoidLatch+0x1ec>
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <LCD_VoidLatch+0x1e0>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <LCD_VoidLatch+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_VoidLatch+0x228>
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinValue(En, DIO_LOW);
    2ef0:	8b e0       	ldi	r24, 0x0B	; 11
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
#endif
}
    2ef8:	6d 96       	adiw	r28, 0x1d	; 29
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <LCD_VoidWriteInst>:

static void LCD_VoidWriteInst(u8 ins) {
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	0f 92       	push	r0
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RS, DIO_LOW);
    2f16:	89 e0       	ldi	r24, 0x09	; 9
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW, DIO_LOW);
    2f1e:	8a e0       	ldi	r24, 0x0A	; 10
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	LCD_VoidLatch(ins);
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <LCD_VoidLatch>

}
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <LCD_VoidInit>:
void LCD_VoidInit(void) {
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	e8 97       	sbiw	r28, 0x38	; 56
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidSetPinDirection(En, OUTPUT);
    2f48:	8b e0       	ldi	r24, 0x0B	; 11
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RS, OUTPUT);
    2f50:	89 e0       	ldi	r24, 0x09	; 9
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RW, OUTPUT);
    2f58:	8a e0       	ldi	r24, 0x0A	; 10
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
    2f5c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	_delay_ms(1);
	LCD_VoidWriteInst(0x01);
	_delay_ms(2);
	LCD_VoidWriteInst(0x06);
#elif LCD_MODE == LCD_4_bit
	DIO_VoidSetPinDirection(D4, OUTPUT);
    2f60:	8c e1       	ldi	r24, 0x1C	; 28
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D5, OUTPUT);
    2f68:	8d e1       	ldi	r24, 0x1D	; 29
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D6, OUTPUT);
    2f70:	8e e1       	ldi	r24, 0x1E	; 30
    2f72:	61 e0       	ldi	r22, 0x01	; 1
    2f74:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D7, OUTPUT);
    2f78:	8f e1       	ldi	r24, 0x1F	; 31
    2f7a:	61 e0       	ldi	r22, 0x01	; 1
    2f7c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a8 e4       	ldi	r26, 0x48	; 72
    2f86:	b2 e4       	ldi	r27, 0x42	; 66
    2f88:	8d ab       	std	Y+53, r24	; 0x35
    2f8a:	9e ab       	std	Y+54, r25	; 0x36
    2f8c:	af ab       	std	Y+55, r26	; 0x37
    2f8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f90:	6d a9       	ldd	r22, Y+53	; 0x35
    2f92:	7e a9       	ldd	r23, Y+54	; 0x36
    2f94:	8f a9       	ldd	r24, Y+55	; 0x37
    2f96:	98 ad       	ldd	r25, Y+56	; 0x38
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4a e7       	ldi	r20, 0x7A	; 122
    2f9e:	55 e4       	ldi	r21, 0x45	; 69
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	89 ab       	std	Y+49, r24	; 0x31
    2faa:	9a ab       	std	Y+50, r25	; 0x32
    2fac:	ab ab       	std	Y+51, r26	; 0x33
    2fae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	2c f4       	brge	.+10     	; 0x2fd2 <LCD_VoidInit+0x9e>
		__ticks = 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	98 ab       	std	Y+48, r25	; 0x30
    2fce:	8f a7       	std	Y+47, r24	; 0x2f
    2fd0:	3f c0       	rjmp	.+126    	; 0x3050 <LCD_VoidInit+0x11c>
	else if (__tmp > 65535)
    2fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	4c f5       	brge	.+82     	; 0x303c <LCD_VoidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	6d a9       	ldd	r22, Y+53	; 0x35
    2fec:	7e a9       	ldd	r23, Y+54	; 0x36
    2fee:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	98 ab       	std	Y+48, r25	; 0x30
    3010:	8f a7       	std	Y+47, r24	; 0x2f
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_VoidInit+0xfe>
    3014:	80 e9       	ldi	r24, 0x90	; 144
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	9e a7       	std	Y+46, r25	; 0x2e
    301a:	8d a7       	std	Y+45, r24	; 0x2d
    301c:	8d a5       	ldd	r24, Y+45	; 0x2d
    301e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_VoidInit+0xec>
    3024:	9e a7       	std	Y+46, r25	; 0x2e
    3026:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	8f a5       	ldd	r24, Y+47	; 0x2f
    302a:	98 a9       	ldd	r25, Y+48	; 0x30
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	98 ab       	std	Y+48, r25	; 0x30
    3030:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	8f a5       	ldd	r24, Y+47	; 0x2f
    3034:	98 a9       	ldd	r25, Y+48	; 0x30
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <LCD_VoidInit+0xe0>
    303a:	14 c0       	rjmp	.+40     	; 0x3064 <LCD_VoidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	69 a9       	ldd	r22, Y+49	; 0x31
    303e:	7a a9       	ldd	r23, Y+50	; 0x32
    3040:	8b a9       	ldd	r24, Y+51	; 0x33
    3042:	9c a9       	ldd	r25, Y+52	; 0x34
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	98 ab       	std	Y+48, r25	; 0x30
    304e:	8f a7       	std	Y+47, r24	; 0x2f
    3050:	8f a5       	ldd	r24, Y+47	; 0x2f
    3052:	98 a9       	ldd	r25, Y+48	; 0x30
    3054:	9c a7       	std	Y+44, r25	; 0x2c
    3056:	8b a7       	std	Y+43, r24	; 0x2b
    3058:	8b a5       	ldd	r24, Y+43	; 0x2b
    305a:	9c a5       	ldd	r25, Y+44	; 0x2c
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <LCD_VoidInit+0x128>
    3060:	9c a7       	std	Y+44, r25	; 0x2c
    3062:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_VoidWriteInst(0x33);
    3064:	83 e3       	ldi	r24, 0x33	; 51
    3066:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
	LCD_VoidWriteInst(0x32);
    306a:	82 e3       	ldi	r24, 0x32	; 50
    306c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
	LCD_VoidWriteInst(0x28);
    3070:	88 e2       	ldi	r24, 0x28	; 40
    3072:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e8       	ldi	r26, 0x80	; 128
    307c:	bf e3       	ldi	r27, 0x3F	; 63
    307e:	8f a3       	std	Y+39, r24	; 0x27
    3080:	98 a7       	std	Y+40, r25	; 0x28
    3082:	a9 a7       	std	Y+41, r26	; 0x29
    3084:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	6f a1       	ldd	r22, Y+39	; 0x27
    3088:	78 a5       	ldd	r23, Y+40	; 0x28
    308a:	89 a5       	ldd	r24, Y+41	; 0x29
    308c:	9a a5       	ldd	r25, Y+42	; 0x2a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	4a e7       	ldi	r20, 0x7A	; 122
    3094:	55 e4       	ldi	r21, 0x45	; 69
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8b a3       	std	Y+35, r24	; 0x23
    30a0:	9c a3       	std	Y+36, r25	; 0x24
    30a2:	ad a3       	std	Y+37, r26	; 0x25
    30a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	2c f4       	brge	.+10     	; 0x30c8 <LCD_VoidInit+0x194>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <LCD_VoidInit+0x212>
	else if (__tmp > 65535)
    30c8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ca:	7c a1       	ldd	r23, Y+36	; 0x24
    30cc:	8d a1       	ldd	r24, Y+37	; 0x25
    30ce:	9e a1       	ldd	r25, Y+38	; 0x26
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	3f ef       	ldi	r19, 0xFF	; 255
    30d4:	4f e7       	ldi	r20, 0x7F	; 127
    30d6:	57 e4       	ldi	r21, 0x47	; 71
    30d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30dc:	18 16       	cp	r1, r24
    30de:	4c f5       	brge	.+82     	; 0x3132 <LCD_VoidInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	6f a1       	ldd	r22, Y+39	; 0x27
    30e2:	78 a5       	ldd	r23, Y+40	; 0x28
    30e4:	89 a5       	ldd	r24, Y+41	; 0x29
    30e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9a a3       	std	Y+34, r25	; 0x22
    3106:	89 a3       	std	Y+33, r24	; 0x21
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_VoidInit+0x1f4>
    310a:	80 e9       	ldi	r24, 0x90	; 144
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	98 a3       	std	Y+32, r25	; 0x20
    3110:	8f 8f       	std	Y+31, r24	; 0x1f
    3112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3114:	98 a1       	ldd	r25, Y+32	; 0x20
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <LCD_VoidInit+0x1e2>
    311a:	98 a3       	std	Y+32, r25	; 0x20
    311c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	89 a1       	ldd	r24, Y+33	; 0x21
    3120:	9a a1       	ldd	r25, Y+34	; 0x22
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	9a a3       	std	Y+34, r25	; 0x22
    3126:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	89 a1       	ldd	r24, Y+33	; 0x21
    312a:	9a a1       	ldd	r25, Y+34	; 0x22
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	69 f7       	brne	.-38     	; 0x310a <LCD_VoidInit+0x1d6>
    3130:	14 c0       	rjmp	.+40     	; 0x315a <LCD_VoidInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	6b a1       	ldd	r22, Y+35	; 0x23
    3134:	7c a1       	ldd	r23, Y+36	; 0x24
    3136:	8d a1       	ldd	r24, Y+37	; 0x25
    3138:	9e a1       	ldd	r25, Y+38	; 0x26
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9a a3       	std	Y+34, r25	; 0x22
    3144:	89 a3       	std	Y+33, r24	; 0x21
    3146:	89 a1       	ldd	r24, Y+33	; 0x21
    3148:	9a a1       	ldd	r25, Y+34	; 0x22
    314a:	9e 8f       	std	Y+30, r25	; 0x1e
    314c:	8d 8f       	std	Y+29, r24	; 0x1d
    314e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <LCD_VoidInit+0x21e>
    3156:	9e 8f       	std	Y+30, r25	; 0x1e
    3158:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidWriteInst(0x0F);
    315a:	8f e0       	ldi	r24, 0x0F	; 15
    315c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	a0 e8       	ldi	r26, 0x80	; 128
    3166:	bf e3       	ldi	r27, 0x3F	; 63
    3168:	89 8f       	std	Y+25, r24	; 0x19
    316a:	9a 8f       	std	Y+26, r25	; 0x1a
    316c:	ab 8f       	std	Y+27, r26	; 0x1b
    316e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3170:	69 8d       	ldd	r22, Y+25	; 0x19
    3172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	4a e7       	ldi	r20, 0x7A	; 122
    317e:	55 e4       	ldi	r21, 0x45	; 69
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	8d 8b       	std	Y+21, r24	; 0x15
    318a:	9e 8b       	std	Y+22, r25	; 0x16
    318c:	af 8b       	std	Y+23, r26	; 0x17
    318e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3190:	6d 89       	ldd	r22, Y+21	; 0x15
    3192:	7e 89       	ldd	r23, Y+22	; 0x16
    3194:	8f 89       	ldd	r24, Y+23	; 0x17
    3196:	98 8d       	ldd	r25, Y+24	; 0x18
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e8       	ldi	r20, 0x80	; 128
    319e:	5f e3       	ldi	r21, 0x3F	; 63
    31a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a4:	88 23       	and	r24, r24
    31a6:	2c f4       	brge	.+10     	; 0x31b2 <LCD_VoidInit+0x27e>
		__ticks = 1;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
    31b0:	3f c0       	rjmp	.+126    	; 0x3230 <LCD_VoidInit+0x2fc>
	else if (__tmp > 65535)
    31b2:	6d 89       	ldd	r22, Y+21	; 0x15
    31b4:	7e 89       	ldd	r23, Y+22	; 0x16
    31b6:	8f 89       	ldd	r24, Y+23	; 0x17
    31b8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	3f ef       	ldi	r19, 0xFF	; 255
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	57 e4       	ldi	r21, 0x47	; 71
    31c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	4c f5       	brge	.+82     	; 0x321c <LCD_VoidInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	69 8d       	ldd	r22, Y+25	; 0x19
    31cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9c 8b       	std	Y+20, r25	; 0x14
    31f0:	8b 8b       	std	Y+19, r24	; 0x13
    31f2:	0f c0       	rjmp	.+30     	; 0x3212 <LCD_VoidInit+0x2de>
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	9a 8b       	std	Y+18, r25	; 0x12
    31fa:	89 8b       	std	Y+17, r24	; 0x11
    31fc:	89 89       	ldd	r24, Y+17	; 0x11
    31fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <LCD_VoidInit+0x2cc>
    3204:	9a 8b       	std	Y+18, r25	; 0x12
    3206:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3208:	8b 89       	ldd	r24, Y+19	; 0x13
    320a:	9c 89       	ldd	r25, Y+20	; 0x14
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3212:	8b 89       	ldd	r24, Y+19	; 0x13
    3214:	9c 89       	ldd	r25, Y+20	; 0x14
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	69 f7       	brne	.-38     	; 0x31f4 <LCD_VoidInit+0x2c0>
    321a:	14 c0       	rjmp	.+40     	; 0x3244 <LCD_VoidInit+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9c 8b       	std	Y+20, r25	; 0x14
    322e:	8b 8b       	std	Y+19, r24	; 0x13
    3230:	8b 89       	ldd	r24, Y+19	; 0x13
    3232:	9c 89       	ldd	r25, Y+20	; 0x14
    3234:	98 8b       	std	Y+16, r25	; 0x10
    3236:	8f 87       	std	Y+15, r24	; 0x0f
    3238:	8f 85       	ldd	r24, Y+15	; 0x0f
    323a:	98 89       	ldd	r25, Y+16	; 0x10
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <LCD_VoidInit+0x308>
    3240:	98 8b       	std	Y+16, r25	; 0x10
    3242:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidWriteInst(0x01);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a0 e0       	ldi	r26, 0x00	; 0
    3250:	b0 e4       	ldi	r27, 0x40	; 64
    3252:	8b 87       	std	Y+11, r24	; 0x0b
    3254:	9c 87       	std	Y+12, r25	; 0x0c
    3256:	ad 87       	std	Y+13, r26	; 0x0d
    3258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	6b 85       	ldd	r22, Y+11	; 0x0b
    325c:	7c 85       	ldd	r23, Y+12	; 0x0c
    325e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3260:	9e 85       	ldd	r25, Y+14	; 0x0e
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a e7       	ldi	r20, 0x7A	; 122
    3268:	55 e4       	ldi	r21, 0x45	; 69
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8f 83       	std	Y+7, r24	; 0x07
    3274:	98 87       	std	Y+8, r25	; 0x08
    3276:	a9 87       	std	Y+9, r26	; 0x09
    3278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    327a:	6f 81       	ldd	r22, Y+7	; 0x07
    327c:	78 85       	ldd	r23, Y+8	; 0x08
    327e:	89 85       	ldd	r24, Y+9	; 0x09
    3280:	9a 85       	ldd	r25, Y+10	; 0x0a
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <LCD_VoidInit+0x368>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	3f c0       	rjmp	.+126    	; 0x331a <LCD_VoidInit+0x3e6>
	else if (__tmp > 65535)
    329c:	6f 81       	ldd	r22, Y+7	; 0x07
    329e:	78 85       	ldd	r23, Y+8	; 0x08
    32a0:	89 85       	ldd	r24, Y+9	; 0x09
    32a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <LCD_VoidInit+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9e 83       	std	Y+6, r25	; 0x06
    32da:	8d 83       	std	Y+5, r24	; 0x05
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <LCD_VoidInit+0x3c8>
    32de:	80 e9       	ldi	r24, 0x90	; 144
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	8b 83       	std	Y+3, r24	; 0x03
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <LCD_VoidInit+0x3b6>
    32ee:	9c 83       	std	Y+4, r25	; 0x04
    32f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	9e 81       	ldd	r25, Y+6	; 0x06
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	8d 81       	ldd	r24, Y+5	; 0x05
    32fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <LCD_VoidInit+0x3aa>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <LCD_VoidInit+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	6f 81       	ldd	r22, Y+7	; 0x07
    3308:	78 85       	ldd	r23, Y+8	; 0x08
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	9a 85       	ldd	r25, Y+10	; 0x0a
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	8d 81       	ldd	r24, Y+5	; 0x05
    331c:	9e 81       	ldd	r25, Y+6	; 0x06
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_VoidInit+0x3f2>
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VoidWriteInst(0x06);
    332e:	86 e0       	ldi	r24, 0x06	; 6
    3330:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
#endif

}
    3334:	e8 96       	adiw	r28, 0x38	; 56
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <LCD_VoidWriteData>:
void LCD_VoidWriteData(u8 LCD_Char) {
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	0f 92       	push	r0
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RS, DIO_HIGH);
    3352:	89 e0       	ldi	r24, 0x09	; 9
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW, DIO_LOW);
    335a:	8a e0       	ldi	r24, 0x0A	; 10
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	LCD_VoidLatch(LCD_Char);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <LCD_VoidLatch>
}
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <LCD_VoidWriteString>:

void LCD_VoidWriteString(u8 *str) {
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	61 97       	sbiw	r28, 0x11	; 17
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	99 8b       	std	Y+17, r25	; 0x11
    3386:	88 8b       	std	Y+16, r24	; 0x10
	for (u8 i = 0; str[i]; i++) {
    3388:	1f 86       	std	Y+15, r1	; 0x0f
    338a:	80 c0       	rjmp	.+256    	; 0x348c <LCD_VoidWriteString+0x11c>
		LCD_VoidWriteData(str[i]);
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	88 89       	ldd	r24, Y+16	; 0x10
    3394:	99 89       	ldd	r25, Y+17	; 0x11
    3396:	fc 01       	movw	r30, r24
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	80 81       	ld	r24, Z
    339e:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_VoidWriteData>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a8 ec       	ldi	r26, 0xC8	; 200
    33a8:	b2 e4       	ldi	r27, 0x42	; 66
    33aa:	8b 87       	std	Y+11, r24	; 0x0b
    33ac:	9c 87       	std	Y+12, r25	; 0x0c
    33ae:	ad 87       	std	Y+13, r26	; 0x0d
    33b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a e7       	ldi	r20, 0x7A	; 122
    33c0:	55 e4       	ldi	r21, 0x45	; 69
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8f 83       	std	Y+7, r24	; 0x07
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	a9 87       	std	Y+9, r26	; 0x09
    33d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <LCD_VoidWriteString+0x84>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <LCD_VoidWriteString+0x102>
	else if (__tmp > 65535)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <LCD_VoidWriteString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <LCD_VoidWriteString+0xe4>
    3436:	80 e9       	ldi	r24, 0x90	; 144
    3438:	91 e0       	ldi	r25, 0x01	; 1
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCD_VoidWriteString+0xd2>
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <LCD_VoidWriteString+0xc6>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <LCD_VoidWriteString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <LCD_VoidWriteString+0x10e>
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RW, DIO_LOW);
	LCD_VoidLatch(LCD_Char);
}

void LCD_VoidWriteString(u8 *str) {
	for (u8 i = 0; str[i]; i++) {
    3486:	8f 85       	ldd	r24, Y+15	; 0x0f
    3488:	8f 5f       	subi	r24, 0xFF	; 255
    348a:	8f 87       	std	Y+15, r24	; 0x0f
    348c:	8f 85       	ldd	r24, Y+15	; 0x0f
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	88 89       	ldd	r24, Y+16	; 0x10
    3494:	99 89       	ldd	r25, Y+17	; 0x11
    3496:	fc 01       	movw	r30, r24
    3498:	e2 0f       	add	r30, r18
    349a:	f3 1f       	adc	r31, r19
    349c:	80 81       	ld	r24, Z
    349e:	88 23       	and	r24, r24
    34a0:	09 f0       	breq	.+2      	; 0x34a4 <LCD_VoidWriteString+0x134>
    34a2:	74 cf       	rjmp	.-280    	; 0x338c <LCD_VoidWriteString+0x1c>
		LCD_VoidWriteData(str[i]);
		_delay_ms(100);

	}
}
    34a4:	61 96       	adiw	r28, 0x11	; 17
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <LCD_VoidWriteNumber>:

void LCD_VoidWriteNumber(u32 num) {
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	2e 97       	sbiw	r28, 0x0e	; 14
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	6b 87       	std	Y+11, r22	; 0x0b
    34d4:	7c 87       	std	Y+12, r23	; 0x0c
    34d6:	8d 87       	std	Y+13, r24	; 0x0d
    34d8:	9e 87       	std	Y+14, r25	; 0x0e
	u32 copy_num = num, Rev;
    34da:	8b 85       	ldd	r24, Y+11	; 0x0b
    34dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34de:	ad 85       	ldd	r26, Y+13	; 0x0d
    34e0:	be 85       	ldd	r27, Y+14	; 0x0e
    34e2:	8f 83       	std	Y+7, r24	; 0x07
    34e4:	98 87       	std	Y+8, r25	; 0x08
    34e6:	a9 87       	std	Y+9, r26	; 0x09
    34e8:	ba 87       	std	Y+10, r27	; 0x0a
	u8 digit = 0, c = 0;
    34ea:	1a 82       	std	Y+2, r1	; 0x02
    34ec:	19 82       	std	Y+1, r1	; 0x01
    34ee:	15 c0       	rjmp	.+42     	; 0x351a <LCD_VoidWriteNumber+0x64>
	while (copy_num != 0) {
		c++;
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	89 83       	std	Y+1, r24	; 0x01
		copy_num = copy_num / 10;
    34f6:	8f 81       	ldd	r24, Y+7	; 0x07
    34f8:	98 85       	ldd	r25, Y+8	; 0x08
    34fa:	a9 85       	ldd	r26, Y+9	; 0x09
    34fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    34fe:	2a e0       	ldi	r18, 0x0A	; 10
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	40 e0       	ldi	r20, 0x00	; 0
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    350e:	da 01       	movw	r26, r20
    3510:	c9 01       	movw	r24, r18
    3512:	8f 83       	std	Y+7, r24	; 0x07
    3514:	98 87       	std	Y+8, r25	; 0x08
    3516:	a9 87       	std	Y+9, r26	; 0x09
    3518:	ba 87       	std	Y+10, r27	; 0x0a
}

void LCD_VoidWriteNumber(u32 num) {
	u32 copy_num = num, Rev;
	u8 digit = 0, c = 0;
	while (copy_num != 0) {
    351a:	8f 81       	ldd	r24, Y+7	; 0x07
    351c:	98 85       	ldd	r25, Y+8	; 0x08
    351e:	a9 85       	ldd	r26, Y+9	; 0x09
    3520:	ba 85       	ldd	r27, Y+10	; 0x0a
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	a1 05       	cpc	r26, r1
    3526:	b1 05       	cpc	r27, r1
    3528:	19 f7       	brne	.-58     	; 0x34f0 <LCD_VoidWriteNumber+0x3a>
    352a:	36 c0       	rjmp	.+108    	; 0x3598 <LCD_VoidWriteNumber+0xe2>
		c++;
		copy_num = copy_num / 10;
	}
	while (num > 0) {
		Rev = Rev * 10 + num % 10;
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	ad 81       	ldd	r26, Y+5	; 0x05
    3532:	be 81       	ldd	r27, Y+6	; 0x06
    3534:	2a e0       	ldi	r18, 0x0A	; 10
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__mulsi3>
    3544:	7b 01       	movw	r14, r22
    3546:	8c 01       	movw	r16, r24
    3548:	8b 85       	ldd	r24, Y+11	; 0x0b
    354a:	9c 85       	ldd	r25, Y+12	; 0x0c
    354c:	ad 85       	ldd	r26, Y+13	; 0x0d
    354e:	be 85       	ldd	r27, Y+14	; 0x0e
    3550:	2a e0       	ldi	r18, 0x0A	; 10
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	8e 0d       	add	r24, r14
    3566:	9f 1d       	adc	r25, r15
    3568:	a0 1f       	adc	r26, r16
    356a:	b1 1f       	adc	r27, r17
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	9c 83       	std	Y+4, r25	; 0x04
    3570:	ad 83       	std	Y+5, r26	; 0x05
    3572:	be 83       	std	Y+6, r27	; 0x06
		num = num / 10;
    3574:	8b 85       	ldd	r24, Y+11	; 0x0b
    3576:	9c 85       	ldd	r25, Y+12	; 0x0c
    3578:	ad 85       	ldd	r26, Y+13	; 0x0d
    357a:	be 85       	ldd	r27, Y+14	; 0x0e
    357c:	2a e0       	ldi	r18, 0x0A	; 10
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    358c:	da 01       	movw	r26, r20
    358e:	c9 01       	movw	r24, r18
    3590:	8b 87       	std	Y+11, r24	; 0x0b
    3592:	9c 87       	std	Y+12, r25	; 0x0c
    3594:	ad 87       	std	Y+13, r26	; 0x0d
    3596:	be 87       	std	Y+14, r27	; 0x0e
	u8 digit = 0, c = 0;
	while (copy_num != 0) {
		c++;
		copy_num = copy_num / 10;
	}
	while (num > 0) {
    3598:	8b 85       	ldd	r24, Y+11	; 0x0b
    359a:	9c 85       	ldd	r25, Y+12	; 0x0c
    359c:	ad 85       	ldd	r26, Y+13	; 0x0d
    359e:	be 85       	ldd	r27, Y+14	; 0x0e
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	a1 05       	cpc	r26, r1
    35a4:	b1 05       	cpc	r27, r1
    35a6:	11 f6       	brne	.-124    	; 0x352c <LCD_VoidWriteNumber+0x76>
    35a8:	28 c0       	rjmp	.+80     	; 0x35fa <LCD_VoidWriteNumber+0x144>
		Rev = Rev * 10 + num % 10;
		num = num / 10;
	}
	while (c != 0) {
		digit = Rev % 10;
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	9c 81       	ldd	r25, Y+4	; 0x04
    35ae:	ad 81       	ldd	r26, Y+5	; 0x05
    35b0:	be 81       	ldd	r27, Y+6	; 0x06
    35b2:	2a e0       	ldi	r18, 0x0A	; 10
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	8a 83       	std	Y+2, r24	; 0x02
		Rev = Rev / 10;
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	9c 81       	ldd	r25, Y+4	; 0x04
    35cc:	ad 81       	ldd	r26, Y+5	; 0x05
    35ce:	be 81       	ldd	r27, Y+6	; 0x06
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    35e0:	da 01       	movw	r26, r20
    35e2:	c9 01       	movw	r24, r18
    35e4:	8b 83       	std	Y+3, r24	; 0x03
    35e6:	9c 83       	std	Y+4, r25	; 0x04
    35e8:	ad 83       	std	Y+5, r26	; 0x05
    35ea:	be 83       	std	Y+6, r27	; 0x06
		LCD_VoidWriteData(digit + '0');
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	80 5d       	subi	r24, 0xD0	; 208
    35f0:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_VoidWriteData>
		c--;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	81 50       	subi	r24, 0x01	; 1
    35f8:	89 83       	std	Y+1, r24	; 0x01
	}
	while (num > 0) {
		Rev = Rev * 10 + num % 10;
		num = num / 10;
	}
	while (c != 0) {
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	88 23       	and	r24, r24
    35fe:	a9 f6       	brne	.-86     	; 0x35aa <LCD_VoidWriteNumber+0xf4>
		Rev = Rev / 10;
		LCD_VoidWriteData(digit + '0');
		c--;
	}

}
    3600:	2e 96       	adiw	r28, 0x0e	; 14
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	08 95       	ret

0000361a <LCD_VoidClearScreen>:

void LCD_VoidClearScreen(void) {
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidWriteInst(CLR_Screen);
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
}
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <LCD_VoidSetCursor>:

void LCD_VoidSetCursor(u8 row, u8 col) {
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <LCD_VoidSetCursor+0x6>
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	6a 83       	std	Y+2, r22	; 0x02
	if (row == 1) {
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	29 f4       	brne	.+10     	; 0x364c <LCD_VoidSetCursor+0x1e>
		LCD_VoidWriteInst(0x80 + col);
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	80 58       	subi	r24, 0x80	; 128
    3646:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
    364a:	07 c0       	rjmp	.+14     	; 0x365a <LCD_VoidSetCursor+0x2c>
	} else if (row == 2) {
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	82 30       	cpi	r24, 0x02	; 2
    3650:	21 f4       	brne	.+8      	; 0x365a <LCD_VoidSetCursor+0x2c>
		LCD_VoidWriteInst(0x80 + 0x40 + col);
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	80 54       	subi	r24, 0x40	; 64
    3656:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
	}
}
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <LCD_VoidDisplayHeart>:
void LCD_VoidDisplayHeart(void) {
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    // Load the heart symbol into CGRAM
    LCD_VoidWriteInst(0x40); // Start CGRAM address for custom characters
    366e:	80 e4       	ldi	r24, 0x40	; 64
    3670:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <LCD_VoidWriteInst>
    for (u8 i = 0; i < 8; i++) {
    3674:	19 82       	std	Y+1, r1	; 0x01
    3676:	0c c0       	rjmp	.+24     	; 0x3690 <LCD_VoidDisplayHeart+0x2c>
        LCD_VoidWriteData(heartSymbol[i]);
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	88 2f       	mov	r24, r24
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	e9 52       	subi	r30, 0x29	; 41
    3682:	fe 4f       	sbci	r31, 0xFE	; 254
    3684:	80 81       	ld	r24, Z
    3686:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_VoidWriteData>
	}
}
void LCD_VoidDisplayHeart(void) {
    // Load the heart symbol into CGRAM
    LCD_VoidWriteInst(0x40); // Start CGRAM address for custom characters
    for (u8 i = 0; i < 8; i++) {
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	88 30       	cpi	r24, 0x08	; 8
    3694:	88 f3       	brcs	.-30     	; 0x3678 <LCD_VoidDisplayHeart+0x14>
        LCD_VoidWriteData(heartSymbol[i]);
    }
    LCD_VoidSetCursor(1, 2);
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	62 e0       	ldi	r22, 0x02	; 2
    369a:	0e 94 17 1b 	call	0x362e	; 0x362e <LCD_VoidSetCursor>
}
    369e:	0f 90       	pop	r0
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <displayMessage>:
void displayMessage(const char* message) {
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	00 d0       	rcall	.+0      	; 0x36ac <displayMessage+0x6>
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    LCD_VoidClearScreen();
    36b4:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_VoidClearScreen>
    LCD_VoidWriteString(message);
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	0e 94 b8 19 	call	0x3370	; 0x3370 <LCD_VoidWriteString>
}
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <KEYPAD_VoidInit>:
#include "util/delay.h"

extern u8 KEYARR[ROWS][COLUMNS];

void KEYPAD_VoidInit(void)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_PINB4,OUTPUT);
    36d2:	8c e0       	ldi	r24, 0x0C	; 12
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINB5,OUTPUT);
    36da:	8d e0       	ldi	r24, 0x0D	; 13
    36dc:	61 e0       	ldi	r22, 0x01	; 1
    36de:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINB6,OUTPUT);
    36e2:	8e e0       	ldi	r24, 0x0E	; 14
    36e4:	61 e0       	ldi	r22, 0x01	; 1
    36e6:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINB7,OUTPUT);
    36ea:	8f e0       	ldi	r24, 0x0F	; 15
    36ec:	61 e0       	ldi	r22, 0x01	; 1
    36ee:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(DIO_PINB4,DIO_HIGH);
    36f2:	8c e0       	ldi	r24, 0x0C	; 12
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DIO_PINB5,DIO_HIGH);
    36fa:	8d e0       	ldi	r24, 0x0D	; 13
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DIO_PINB6,DIO_HIGH);
    3702:	8e e0       	ldi	r24, 0x0E	; 14
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DIO_PINB7,DIO_HIGH);
    370a:	8f e0       	ldi	r24, 0x0F	; 15
    370c:	61 e0       	ldi	r22, 0x01	; 1
    370e:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPortDirection(PORTC,0x00); //set the input pins
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	0e 94 79 12 	call	0x24f2	; 0x24f2 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(PORTC,0x78); // active the Pull up resistance
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	68 e7       	ldi	r22, 0x78	; 120
    371e:	0e 94 38 12 	call	0x2470	; 0x2470 <DIO_VoidSetPortValue>
}
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <KEYPAD_U8GetPressedKey>:

u8 KEYPAD_U8GetPressedKey(void)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	61 97       	sbiw	r28, 0x11	; 17
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
	u8 Row,Col,key=UNPRESSED_KEY;
    373c:	86 e9       	ldi	r24, 0x96	; 150
    373e:	8f 87       	std	Y+15, r24	; 0x0f

	for(Row=0;Row<ROWS;Row++)
    3740:	19 8a       	std	Y+17, r1	; 0x11
    3742:	a7 c0       	rjmp	.+334    	; 0x3892 <KEYPAD_U8GetPressedKey+0x16a>
	{
		DIO_VoidSetPinValue((FIRST_OUTPUT+Row),DIO_LOW);
    3744:	89 89       	ldd	r24, Y+17	; 0x11
    3746:	84 5f       	subi	r24, 0xF4	; 244
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
		for(Col=0;Col<COLUMNS;Col++)
    374e:	18 8a       	std	Y+16, r1	; 0x10
    3750:	94 c0       	rjmp	.+296    	; 0x387a <KEYPAD_U8GetPressedKey+0x152>
		{
			if(DIO_U8GetPinValue((FIRST_INPUT+Col))==0)
    3752:	88 89       	ldd	r24, Y+16	; 0x10
    3754:	8d 5e       	subi	r24, 0xED	; 237
    3756:	0e 94 ba 12 	call	0x2574	; 0x2574 <DIO_U8GetPinValue>
    375a:	88 23       	and	r24, r24
    375c:	09 f0       	breq	.+2      	; 0x3760 <KEYPAD_U8GetPressedKey+0x38>
    375e:	8a c0       	rjmp	.+276    	; 0x3874 <KEYPAD_U8GetPressedKey+0x14c>
			{
				key=KEYARR[Row][Col];
    3760:	89 89       	ldd	r24, Y+17	; 0x11
    3762:	48 2f       	mov	r20, r24
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	88 89       	ldd	r24, Y+16	; 0x10
    3768:	28 2f       	mov	r18, r24
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	ca 01       	movw	r24, r20
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	82 0f       	add	r24, r18
    3778:	93 1f       	adc	r25, r19
    377a:	fc 01       	movw	r30, r24
    377c:	ee 53       	subi	r30, 0x3E	; 62
    377e:	fe 4f       	sbci	r31, 0xFE	; 254
    3780:	80 81       	ld	r24, Z
    3782:	8f 87       	std	Y+15, r24	; 0x0f
				while(DIO_U8GetPinValue((FIRST_INPUT+Col))==0);
    3784:	88 89       	ldd	r24, Y+16	; 0x10
    3786:	8d 5e       	subi	r24, 0xED	; 237
    3788:	0e 94 ba 12 	call	0x2574	; 0x2574 <DIO_U8GetPinValue>
    378c:	88 23       	and	r24, r24
    378e:	d1 f3       	breq	.-12     	; 0x3784 <KEYPAD_U8GetPressedKey+0x5c>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	a8 e4       	ldi	r26, 0x48	; 72
    3796:	b2 e4       	ldi	r27, 0x42	; 66
    3798:	8b 87       	std	Y+11, r24	; 0x0b
    379a:	9c 87       	std	Y+12, r25	; 0x0c
    379c:	ad 87       	std	Y+13, r26	; 0x0d
    379e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a e7       	ldi	r20, 0x7A	; 122
    37ae:	55 e4       	ldi	r21, 0x45	; 69
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	8f 83       	std	Y+7, r24	; 0x07
    37ba:	98 87       	std	Y+8, r25	; 0x08
    37bc:	a9 87       	std	Y+9, r26	; 0x09
    37be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37c0:	6f 81       	ldd	r22, Y+7	; 0x07
    37c2:	78 85       	ldd	r23, Y+8	; 0x08
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	2c f4       	brge	.+10     	; 0x37e2 <KEYPAD_U8GetPressedKey+0xba>
		__ticks = 1;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
    37e0:	3f c0       	rjmp	.+126    	; 0x3860 <KEYPAD_U8GetPressedKey+0x138>
	else if (__tmp > 65535)
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	3f ef       	ldi	r19, 0xFF	; 255
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	57 e4       	ldi	r21, 0x47	; 71
    37f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f6:	18 16       	cp	r1, r24
    37f8:	4c f5       	brge	.+82     	; 0x384c <KEYPAD_U8GetPressedKey+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    37fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3800:	9e 85       	ldd	r25, Y+14	; 0x0e
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e2       	ldi	r20, 0x20	; 32
    3808:	51 e4       	ldi	r21, 0x41	; 65
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	9e 83       	std	Y+6, r25	; 0x06
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	0f c0       	rjmp	.+30     	; 0x3842 <KEYPAD_U8GetPressedKey+0x11a>
    3824:	80 e9       	ldi	r24, 0x90	; 144
    3826:	91 e0       	ldi	r25, 0x01	; 1
    3828:	9c 83       	std	Y+4, r25	; 0x04
    382a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	9c 81       	ldd	r25, Y+4	; 0x04
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <KEYPAD_U8GetPressedKey+0x108>
    3834:	9c 83       	std	Y+4, r25	; 0x04
    3836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	9e 81       	ldd	r25, Y+6	; 0x06
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	69 f7       	brne	.-38     	; 0x3824 <KEYPAD_U8GetPressedKey+0xfc>
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <KEYPAD_U8GetPressedKey+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
    3860:	8d 81       	ldd	r24, Y+5	; 0x05
    3862:	9e 81       	ldd	r25, Y+6	; 0x06
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <KEYPAD_U8GetPressedKey+0x144>
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	89 83       	std	Y+1, r24	; 0x01
	u8 Row,Col,key=UNPRESSED_KEY;

	for(Row=0;Row<ROWS;Row++)
	{
		DIO_VoidSetPinValue((FIRST_OUTPUT+Row),DIO_LOW);
		for(Col=0;Col<COLUMNS;Col++)
    3874:	88 89       	ldd	r24, Y+16	; 0x10
    3876:	8f 5f       	subi	r24, 0xFF	; 255
    3878:	88 8b       	std	Y+16, r24	; 0x10
    387a:	88 89       	ldd	r24, Y+16	; 0x10
    387c:	84 30       	cpi	r24, 0x04	; 4
    387e:	08 f4       	brcc	.+2      	; 0x3882 <KEYPAD_U8GetPressedKey+0x15a>
    3880:	68 cf       	rjmp	.-304    	; 0x3752 <KEYPAD_U8GetPressedKey+0x2a>
				key=KEYARR[Row][Col];
				while(DIO_U8GetPinValue((FIRST_INPUT+Col))==0);
				_delay_ms(50);
			}
		}
		DIO_VoidSetPinValue((FIRST_OUTPUT+Row),DIO_HIGH);
    3882:	89 89       	ldd	r24, Y+17	; 0x11
    3884:	84 5f       	subi	r24, 0xF4	; 244
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>

u8 KEYPAD_U8GetPressedKey(void)
{
	u8 Row,Col,key=UNPRESSED_KEY;

	for(Row=0;Row<ROWS;Row++)
    388c:	89 89       	ldd	r24, Y+17	; 0x11
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	89 8b       	std	Y+17, r24	; 0x11
    3892:	89 89       	ldd	r24, Y+17	; 0x11
    3894:	84 30       	cpi	r24, 0x04	; 4
    3896:	08 f4       	brcc	.+2      	; 0x389a <KEYPAD_U8GetPressedKey+0x172>
    3898:	55 cf       	rjmp	.-342    	; 0x3744 <KEYPAD_U8GetPressedKey+0x1c>
				_delay_ms(50);
			}
		}
		DIO_VoidSetPinValue((FIRST_OUTPUT+Row),DIO_HIGH);
	}
	return key;
    389a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    389c:	61 96       	adiw	r28, 0x11	; 17
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <EEPROM_WRITE>:
//	M_TWI_Stop();
//	return 1;
//}
/*----------------------------------------------------------------------------------*/
void EEPROM_WRITE(u16 wordadd, u8 data)
{
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	62 97       	sbiw	r28, 0x12	; 18
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	99 8b       	std	Y+17, r25	; 0x11
    38c4:	88 8b       	std	Y+16, r24	; 0x10
    38c6:	6a 8b       	std	Y+18, r22	; 0x12
	u8 add = (wordadd >> 8) | 0b01010000;
    38c8:	88 89       	ldd	r24, Y+16	; 0x10
    38ca:	99 89       	ldd	r25, Y+17	; 0x11
    38cc:	89 2f       	mov	r24, r25
    38ce:	99 27       	eor	r25, r25
    38d0:	80 65       	ori	r24, 0x50	; 80
    38d2:	8f 87       	std	Y+15, r24	; 0x0f

	vMASTER_init();
    38d4:	0e 94 85 09 	call	0x130a	; 0x130a <vMASTER_init>
	vMASTER_START_condition();
    38d8:	0e 94 ac 09 	call	0x1358	; 0x1358 <vMASTER_START_condition>

	MASTER_SEND_ADDRESS_WRITE(add);
    38dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MASTER_SEND_ADDRESS_WRITE>
	MASTER_SEND_DATA((u8) wordadd);
    38e6:	88 89       	ldd	r24, Y+16	; 0x10
    38e8:	88 2f       	mov	r24, r24
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>

	MASTER_SEND_DATA(data);
    38f0:	8a 89       	ldd	r24, Y+18	; 0x12
    38f2:	88 2f       	mov	r24, r24
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>
	M_TWI_Stop();
    38fa:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <M_TWI_Stop>
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	a0 ea       	ldi	r26, 0xA0	; 160
    3904:	b0 e4       	ldi	r27, 0x40	; 64
    3906:	8b 87       	std	Y+11, r24	; 0x0b
    3908:	9c 87       	std	Y+12, r25	; 0x0c
    390a:	ad 87       	std	Y+13, r26	; 0x0d
    390c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3910:	7c 85       	ldd	r23, Y+12	; 0x0c
    3912:	8d 85       	ldd	r24, Y+13	; 0x0d
    3914:	9e 85       	ldd	r25, Y+14	; 0x0e
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	4a e7       	ldi	r20, 0x7A	; 122
    391c:	55 e4       	ldi	r21, 0x45	; 69
    391e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	8f 83       	std	Y+7, r24	; 0x07
    3928:	98 87       	std	Y+8, r25	; 0x08
    392a:	a9 87       	std	Y+9, r26	; 0x09
    392c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    392e:	6f 81       	ldd	r22, Y+7	; 0x07
    3930:	78 85       	ldd	r23, Y+8	; 0x08
    3932:	89 85       	ldd	r24, Y+9	; 0x09
    3934:	9a 85       	ldd	r25, Y+10	; 0x0a
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e8       	ldi	r20, 0x80	; 128
    393c:	5f e3       	ldi	r21, 0x3F	; 63
    393e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3942:	88 23       	and	r24, r24
    3944:	2c f4       	brge	.+10     	; 0x3950 <EEPROM_WRITE+0xa2>
		__ticks = 1;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
    394e:	3f c0       	rjmp	.+126    	; 0x39ce <EEPROM_WRITE+0x120>
	else if (__tmp > 65535)
    3950:	6f 81       	ldd	r22, Y+7	; 0x07
    3952:	78 85       	ldd	r23, Y+8	; 0x08
    3954:	89 85       	ldd	r24, Y+9	; 0x09
    3956:	9a 85       	ldd	r25, Y+10	; 0x0a
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	3f ef       	ldi	r19, 0xFF	; 255
    395c:	4f e7       	ldi	r20, 0x7F	; 127
    395e:	57 e4       	ldi	r21, 0x47	; 71
    3960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3964:	18 16       	cp	r1, r24
    3966:	4c f5       	brge	.+82     	; 0x39ba <EEPROM_WRITE+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3968:	6b 85       	ldd	r22, Y+11	; 0x0b
    396a:	7c 85       	ldd	r23, Y+12	; 0x0c
    396c:	8d 85       	ldd	r24, Y+13	; 0x0d
    396e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e2       	ldi	r20, 0x20	; 32
    3976:	51 e4       	ldi	r21, 0x41	; 65
    3978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	bc 01       	movw	r22, r24
    3982:	cd 01       	movw	r24, r26
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	9e 83       	std	Y+6, r25	; 0x06
    398e:	8d 83       	std	Y+5, r24	; 0x05
    3990:	0f c0       	rjmp	.+30     	; 0x39b0 <EEPROM_WRITE+0x102>
    3992:	80 e9       	ldi	r24, 0x90	; 144
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	9c 83       	std	Y+4, r25	; 0x04
    3998:	8b 83       	std	Y+3, r24	; 0x03
    399a:	8b 81       	ldd	r24, Y+3	; 0x03
    399c:	9c 81       	ldd	r25, Y+4	; 0x04
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <EEPROM_WRITE+0xf0>
    39a2:	9c 83       	std	Y+4, r25	; 0x04
    39a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	69 f7       	brne	.-38     	; 0x3992 <EEPROM_WRITE+0xe4>
    39b8:	14 c0       	rjmp	.+40     	; 0x39e2 <EEPROM_WRITE+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	9e 83       	std	Y+6, r25	; 0x06
    39cc:	8d 83       	std	Y+5, r24	; 0x05
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <EEPROM_WRITE+0x12c>
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    39e2:	62 96       	adiw	r28, 0x12	; 18
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <EEPROM_WRITE_String>:
void EEPROM_WRITE_String(u16 wordadd, u8 *data)
{
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62
    39fc:	a1 97       	sbiw	r28, 0x21	; 33
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	9f 8f       	std	Y+31, r25	; 0x1f
    3a0a:	8e 8f       	std	Y+30, r24	; 0x1e
    3a0c:	79 a3       	std	Y+33, r23	; 0x21
    3a0e:	68 a3       	std	Y+32, r22	; 0x20
    3a10:	99 c0       	rjmp	.+306    	; 0x3b44 <EEPROM_WRITE_String+0x150>
    while (*data)
    {
        u8 add = (wordadd >> 8) | 0b01010000;
    3a12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a16:	89 2f       	mov	r24, r25
    3a18:	99 27       	eor	r25, r25
    3a1a:	80 65       	ori	r24, 0x50	; 80
    3a1c:	8d 8f       	std	Y+29, r24	; 0x1d

        vMASTER_init();
    3a1e:	0e 94 85 09 	call	0x130a	; 0x130a <vMASTER_init>
        vMASTER_START_condition();
    3a22:	0e 94 ac 09 	call	0x1358	; 0x1358 <vMASTER_START_condition>

        MASTER_SEND_ADDRESS_WRITE(add);
    3a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a28:	88 2f       	mov	r24, r24
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MASTER_SEND_ADDRESS_WRITE>
        MASTER_SEND_DATA((u8)wordadd);
    3a30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a32:	88 2f       	mov	r24, r24
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>

        MASTER_SEND_DATA(*data);
    3a3a:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a3c:	f9 a1       	ldd	r31, Y+33	; 0x21
    3a3e:	80 81       	ld	r24, Z
    3a40:	88 2f       	mov	r24, r24
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>
        M_TWI_Stop();
    3a48:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <M_TWI_Stop>
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	a0 ea       	ldi	r26, 0xA0	; 160
    3a52:	b0 e4       	ldi	r27, 0x40	; 64
    3a54:	89 8f       	std	Y+25, r24	; 0x19
    3a56:	9a 8f       	std	Y+26, r25	; 0x1a
    3a58:	ab 8f       	std	Y+27, r26	; 0x1b
    3a5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	4a e7       	ldi	r20, 0x7A	; 122
    3a6a:	55 e4       	ldi	r21, 0x45	; 69
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	8d 8b       	std	Y+21, r24	; 0x15
    3a76:	9e 8b       	std	Y+22, r25	; 0x16
    3a78:	af 8b       	std	Y+23, r26	; 0x17
    3a7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e8       	ldi	r20, 0x80	; 128
    3a8a:	5f e3       	ldi	r21, 0x3F	; 63
    3a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a90:	88 23       	and	r24, r24
    3a92:	2c f4       	brge	.+10     	; 0x3a9e <EEPROM_WRITE_String+0xaa>
		__ticks = 1;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9c 8b       	std	Y+20, r25	; 0x14
    3a9a:	8b 8b       	std	Y+19, r24	; 0x13
    3a9c:	3f c0       	rjmp	.+126    	; 0x3b1c <EEPROM_WRITE_String+0x128>
	else if (__tmp > 65535)
    3a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	3f ef       	ldi	r19, 0xFF	; 255
    3aaa:	4f e7       	ldi	r20, 0x7F	; 127
    3aac:	57 e4       	ldi	r21, 0x47	; 71
    3aae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ab2:	18 16       	cp	r1, r24
    3ab4:	4c f5       	brge	.+82     	; 0x3b08 <EEPROM_WRITE_String+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e2       	ldi	r20, 0x20	; 32
    3ac4:	51 e4       	ldi	r21, 0x41	; 65
    3ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	9c 8b       	std	Y+20, r25	; 0x14
    3adc:	8b 8b       	std	Y+19, r24	; 0x13
    3ade:	0f c0       	rjmp	.+30     	; 0x3afe <EEPROM_WRITE_String+0x10a>
    3ae0:	80 e9       	ldi	r24, 0x90	; 144
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	9a 8b       	std	Y+18, r25	; 0x12
    3ae6:	89 8b       	std	Y+17, r24	; 0x11
    3ae8:	89 89       	ldd	r24, Y+17	; 0x11
    3aea:	9a 89       	ldd	r25, Y+18	; 0x12
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	f1 f7       	brne	.-4      	; 0x3aec <EEPROM_WRITE_String+0xf8>
    3af0:	9a 8b       	std	Y+18, r25	; 0x12
    3af2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af4:	8b 89       	ldd	r24, Y+19	; 0x13
    3af6:	9c 89       	ldd	r25, Y+20	; 0x14
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	9c 8b       	std	Y+20, r25	; 0x14
    3afc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afe:	8b 89       	ldd	r24, Y+19	; 0x13
    3b00:	9c 89       	ldd	r25, Y+20	; 0x14
    3b02:	00 97       	sbiw	r24, 0x00	; 0
    3b04:	69 f7       	brne	.-38     	; 0x3ae0 <EEPROM_WRITE_String+0xec>
    3b06:	14 c0       	rjmp	.+40     	; 0x3b30 <EEPROM_WRITE_String+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b08:	6d 89       	ldd	r22, Y+21	; 0x15
    3b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	9c 8b       	std	Y+20, r25	; 0x14
    3b1a:	8b 8b       	std	Y+19, r24	; 0x13
    3b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b20:	98 8b       	std	Y+16, r25	; 0x10
    3b22:	8f 87       	std	Y+15, r24	; 0x0f
    3b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b26:	98 89       	ldd	r25, Y+16	; 0x10
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <EEPROM_WRITE_String+0x134>
    3b2c:	98 8b       	std	Y+16, r25	; 0x10
    3b2e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(5);

        data++;
    3b30:	88 a1       	ldd	r24, Y+32	; 0x20
    3b32:	99 a1       	ldd	r25, Y+33	; 0x21
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	99 a3       	std	Y+33, r25	; 0x21
    3b38:	88 a3       	std	Y+32, r24	; 0x20
        wordadd++;
    3b3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b3e:	01 96       	adiw	r24, 0x01	; 1
    3b40:	9f 8f       	std	Y+31, r25	; 0x1f
    3b42:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_ms(5);

}
void EEPROM_WRITE_String(u16 wordadd, u8 *data)
{
    while (*data)
    3b44:	e8 a1       	ldd	r30, Y+32	; 0x20
    3b46:	f9 a1       	ldd	r31, Y+33	; 0x21
    3b48:	80 81       	ld	r24, Z
    3b4a:	88 23       	and	r24, r24
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <EEPROM_WRITE_String+0x15c>
    3b4e:	61 cf       	rjmp	.-318    	; 0x3a12 <EEPROM_WRITE_String+0x1e>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	a0 ea       	ldi	r26, 0xA0	; 160
    3b56:	b0 e4       	ldi	r27, 0x40	; 64
    3b58:	8b 87       	std	Y+11, r24	; 0x0b
    3b5a:	9c 87       	std	Y+12, r25	; 0x0c
    3b5c:	ad 87       	std	Y+13, r26	; 0x0d
    3b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	4a e7       	ldi	r20, 0x7A	; 122
    3b6e:	55 e4       	ldi	r21, 0x45	; 69
    3b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	8f 83       	std	Y+7, r24	; 0x07
    3b7a:	98 87       	std	Y+8, r25	; 0x08
    3b7c:	a9 87       	std	Y+9, r26	; 0x09
    3b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b80:	6f 81       	ldd	r22, Y+7	; 0x07
    3b82:	78 85       	ldd	r23, Y+8	; 0x08
    3b84:	89 85       	ldd	r24, Y+9	; 0x09
    3b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e8       	ldi	r20, 0x80	; 128
    3b8e:	5f e3       	ldi	r21, 0x3F	; 63
    3b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b94:	88 23       	and	r24, r24
    3b96:	2c f4       	brge	.+10     	; 0x3ba2 <EEPROM_WRITE_String+0x1ae>
		__ticks = 1;
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	8d 83       	std	Y+5, r24	; 0x05
    3ba0:	3f c0       	rjmp	.+126    	; 0x3c20 <EEPROM_WRITE_String+0x22c>
	else if (__tmp > 65535)
    3ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba4:	78 85       	ldd	r23, Y+8	; 0x08
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	3f ef       	ldi	r19, 0xFF	; 255
    3bae:	4f e7       	ldi	r20, 0x7F	; 127
    3bb0:	57 e4       	ldi	r21, 0x47	; 71
    3bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bb6:	18 16       	cp	r1, r24
    3bb8:	4c f5       	brge	.+82     	; 0x3c0c <EEPROM_WRITE_String+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	40 e2       	ldi	r20, 0x20	; 32
    3bc8:	51 e4       	ldi	r21, 0x41	; 65
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	0f c0       	rjmp	.+30     	; 0x3c02 <EEPROM_WRITE_String+0x20e>
    3be4:	80 e9       	ldi	r24, 0x90	; 144
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	9c 83       	std	Y+4, r25	; 0x04
    3bea:	8b 83       	std	Y+3, r24	; 0x03
    3bec:	8b 81       	ldd	r24, Y+3	; 0x03
    3bee:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	f1 f7       	brne	.-4      	; 0x3bf0 <EEPROM_WRITE_String+0x1fc>
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	69 f7       	brne	.-38     	; 0x3be4 <EEPROM_WRITE_String+0x1f0>
    3c0a:	14 c0       	rjmp	.+40     	; 0x3c34 <EEPROM_WRITE_String+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0e:	78 85       	ldd	r23, Y+8	; 0x08
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	8d 81       	ldd	r24, Y+5	; 0x05
    3c22:	9e 81       	ldd	r25, Y+6	; 0x06
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	89 83       	std	Y+1, r24	; 0x01
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <EEPROM_WRITE_String+0x238>
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01

        data++;
        wordadd++;
    }
    _delay_ms(5);
}
    3c34:	a1 96       	adiw	r28, 0x21	; 33
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	cf 91       	pop	r28
    3c42:	df 91       	pop	r29
    3c44:	08 95       	ret

00003c46 <EEPROM_READ>:
u8 EEPROM_READ(u16 wordadd)
{
    3c46:	df 93       	push	r29
    3c48:	cf 93       	push	r28
    3c4a:	00 d0       	rcall	.+0      	; 0x3c4c <EEPROM_READ+0x6>
    3c4c:	00 d0       	rcall	.+0      	; 0x3c4e <EEPROM_READ+0x8>
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	8b 83       	std	Y+3, r24	; 0x03
	u8 add = (wordadd >> 8) | 0b01010000;
    3c56:	8b 81       	ldd	r24, Y+3	; 0x03
    3c58:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5a:	89 2f       	mov	r24, r25
    3c5c:	99 27       	eor	r25, r25
    3c5e:	80 65       	ori	r24, 0x50	; 80
    3c60:	8a 83       	std	Y+2, r24	; 0x02
	vMASTER_init();
    3c62:	0e 94 85 09 	call	0x130a	; 0x130a <vMASTER_init>
	vMASTER_START_condition();
    3c66:	0e 94 ac 09 	call	0x1358	; 0x1358 <vMASTER_START_condition>
	MASTER_SEND_ADDRESS_WRITE(add);
    3c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MASTER_SEND_ADDRESS_WRITE>
	MASTER_SEND_DATA((u8) wordadd);
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	88 2f       	mov	r24, r24
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>
	vMASTER_REP_START_condition();
    3c7e:	0e 94 22 09 	call	0x1244	; 0x1244 <vMASTER_REP_START_condition>
	MASTER_SEND_ADDRESS_READ(add);
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	88 2f       	mov	r24, r24
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 3c 09 	call	0x1278	; 0x1278 <MASTER_SEND_ADDRESS_READ>
	u8 data = MASTER_RECIVE_DATA();
    3c8c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <MASTER_RECIVE_DATA>
    3c90:	89 83       	std	Y+1, r24	; 0x01
	M_TWI_Stop();
    3c92:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <M_TWI_Stop>
	return data;
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
	_delay_ms(5);

}
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	cf 91       	pop	r28
    3ca2:	df 91       	pop	r29
    3ca4:	08 95       	ret

00003ca6 <EEPROM_READ_String>:



void EEPROM_READ_String(u16 wordadd, u8 *buffer, u16 length)
{
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	df 93       	push	r29
    3cac:	cf 93       	push	r28
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	67 97       	sbiw	r28, 0x17	; 23
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	9b 8b       	std	Y+19, r25	; 0x13
    3cc0:	8a 8b       	std	Y+18, r24	; 0x12
    3cc2:	7d 8b       	std	Y+21, r23	; 0x15
    3cc4:	6c 8b       	std	Y+20, r22	; 0x14
    3cc6:	5f 8b       	std	Y+23, r21	; 0x17
    3cc8:	4e 8b       	std	Y+22, r20	; 0x16
    u8 add = (wordadd >> 8) | 0b01010000;
    3cca:	8a 89       	ldd	r24, Y+18	; 0x12
    3ccc:	9b 89       	ldd	r25, Y+19	; 0x13
    3cce:	89 2f       	mov	r24, r25
    3cd0:	99 27       	eor	r25, r25
    3cd2:	80 65       	ori	r24, 0x50	; 80
    3cd4:	89 8b       	std	Y+17, r24	; 0x11
    vMASTER_init();
    3cd6:	0e 94 85 09 	call	0x130a	; 0x130a <vMASTER_init>

    for (u16 i = 0; i < length; i++)
    3cda:	18 8a       	std	Y+16, r1	; 0x10
    3cdc:	1f 86       	std	Y+15, r1	; 0x0f
    3cde:	9a c0       	rjmp	.+308    	; 0x3e14 <EEPROM_READ_String+0x16e>
    {
        vMASTER_START_condition();
    3ce0:	0e 94 ac 09 	call	0x1358	; 0x1358 <vMASTER_START_condition>
        MASTER_SEND_ADDRESS_WRITE(add);
    3ce4:	89 89       	ldd	r24, Y+17	; 0x11
    3ce6:	88 2f       	mov	r24, r24
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MASTER_SEND_ADDRESS_WRITE>
        MASTER_SEND_DATA((u8)wordadd);
    3cee:	8a 89       	ldd	r24, Y+18	; 0x12
    3cf0:	88 2f       	mov	r24, r24
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 08 09 	call	0x1210	; 0x1210 <MASTER_SEND_DATA>
        vMASTER_REP_START_condition();
    3cf8:	0e 94 22 09 	call	0x1244	; 0x1244 <vMASTER_REP_START_condition>
        MASTER_SEND_ADDRESS_READ(add);
    3cfc:	89 89       	ldd	r24, Y+17	; 0x11
    3cfe:	88 2f       	mov	r24, r24
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 3c 09 	call	0x1278	; 0x1278 <MASTER_SEND_ADDRESS_READ>

        buffer[i] = MASTER_RECIVE_DATA();
    3d06:	2c 89       	ldd	r18, Y+20	; 0x14
    3d08:	3d 89       	ldd	r19, Y+21	; 0x15
    3d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d0c:	98 89       	ldd	r25, Y+16	; 0x10
    3d0e:	89 01       	movw	r16, r18
    3d10:	08 0f       	add	r16, r24
    3d12:	19 1f       	adc	r17, r25
    3d14:	0e 94 68 09 	call	0x12d0	; 0x12d0 <MASTER_RECIVE_DATA>
    3d18:	f8 01       	movw	r30, r16
    3d1a:	80 83       	st	Z, r24
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a0 ea       	ldi	r26, 0xA0	; 160
    3d22:	b0 e4       	ldi	r27, 0x40	; 64
    3d24:	8b 87       	std	Y+11, r24	; 0x0b
    3d26:	9c 87       	std	Y+12, r25	; 0x0c
    3d28:	ad 87       	std	Y+13, r26	; 0x0d
    3d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	4a e7       	ldi	r20, 0x7A	; 122
    3d3a:	55 e4       	ldi	r21, 0x45	; 69
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	8f 83       	std	Y+7, r24	; 0x07
    3d46:	98 87       	std	Y+8, r25	; 0x08
    3d48:	a9 87       	std	Y+9, r26	; 0x09
    3d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4e:	78 85       	ldd	r23, Y+8	; 0x08
    3d50:	89 85       	ldd	r24, Y+9	; 0x09
    3d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	2c f4       	brge	.+10     	; 0x3d6e <EEPROM_READ_String+0xc8>
		__ticks = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9e 83       	std	Y+6, r25	; 0x06
    3d6a:	8d 83       	std	Y+5, r24	; 0x05
    3d6c:	3f c0       	rjmp	.+126    	; 0x3dec <EEPROM_READ_String+0x146>
	else if (__tmp > 65535)
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	4f e7       	ldi	r20, 0x7F	; 127
    3d7c:	57 e4       	ldi	r21, 0x47	; 71
    3d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d82:	18 16       	cp	r1, r24
    3d84:	4c f5       	brge	.+82     	; 0x3dd8 <EEPROM_READ_String+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e2       	ldi	r20, 0x20	; 32
    3d94:	51 e4       	ldi	r21, 0x41	; 65
    3d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9e 83       	std	Y+6, r25	; 0x06
    3dac:	8d 83       	std	Y+5, r24	; 0x05
    3dae:	0f c0       	rjmp	.+30     	; 0x3dce <EEPROM_READ_String+0x128>
    3db0:	80 e9       	ldi	r24, 0x90	; 144
    3db2:	91 e0       	ldi	r25, 0x01	; 1
    3db4:	9c 83       	std	Y+4, r25	; 0x04
    3db6:	8b 83       	std	Y+3, r24	; 0x03
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <EEPROM_READ_String+0x116>
    3dc0:	9c 83       	std	Y+4, r25	; 0x04
    3dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	9e 83       	std	Y+6, r25	; 0x06
    3dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	69 f7       	brne	.-38     	; 0x3db0 <EEPROM_READ_String+0x10a>
    3dd6:	14 c0       	rjmp	.+40     	; 0x3e00 <EEPROM_READ_String+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dda:	78 85       	ldd	r23, Y+8	; 0x08
    3ddc:	89 85       	ldd	r24, Y+9	; 0x09
    3dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <EEPROM_READ_String+0x152>
    3dfc:	9a 83       	std	Y+2, r25	; 0x02
    3dfe:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(5);

        wordadd++;
    3e00:	8a 89       	ldd	r24, Y+18	; 0x12
    3e02:	9b 89       	ldd	r25, Y+19	; 0x13
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	9b 8b       	std	Y+19, r25	; 0x13
    3e08:	8a 8b       	std	Y+18, r24	; 0x12
void EEPROM_READ_String(u16 wordadd, u8 *buffer, u16 length)
{
    u8 add = (wordadd >> 8) | 0b01010000;
    vMASTER_init();

    for (u16 i = 0; i < length; i++)
    3e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e0c:	98 89       	ldd	r25, Y+16	; 0x10
    3e0e:	01 96       	adiw	r24, 0x01	; 1
    3e10:	98 8b       	std	Y+16, r25	; 0x10
    3e12:	8f 87       	std	Y+15, r24	; 0x0f
    3e14:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e16:	38 89       	ldd	r19, Y+16	; 0x10
    3e18:	8e 89       	ldd	r24, Y+22	; 0x16
    3e1a:	9f 89       	ldd	r25, Y+23	; 0x17
    3e1c:	28 17       	cp	r18, r24
    3e1e:	39 07       	cpc	r19, r25
    3e20:	08 f4       	brcc	.+2      	; 0x3e24 <EEPROM_READ_String+0x17e>
    3e22:	5e cf       	rjmp	.-324    	; 0x3ce0 <EEPROM_READ_String+0x3a>

        _delay_ms(5);

        wordadd++;
    }
    M_TWI_Stop();
    3e24:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <M_TWI_Stop>
    buffer[length] = '\0'; // Ensure the buffer is null-terminated
    3e28:	8c 89       	ldd	r24, Y+20	; 0x14
    3e2a:	9d 89       	ldd	r25, Y+21	; 0x15
    3e2c:	2e 89       	ldd	r18, Y+22	; 0x16
    3e2e:	3f 89       	ldd	r19, Y+23	; 0x17
    3e30:	fc 01       	movw	r30, r24
    3e32:	e2 0f       	add	r30, r18
    3e34:	f3 1f       	adc	r31, r19
    3e36:	10 82       	st	Z, r1
//    LCD_VoidWriteString(buffer); // Display the complete string after reading
}
    3e38:	67 96       	adiw	r28, 0x17	; 23
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	08 95       	ret

00003e4e <DC_VoidDCMOTORInit>:
#include"DIO_Interface.h"
#include"TIMER0_Interface.h"


void DC_VoidDCMOTORInit()
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_PIND4,INPUT); //this pin will be input
    3e56:	8c e1       	ldi	r24, 0x1C	; 28
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PIND5,INPUT); //this pin will be input
    3e5e:	8d e1       	ldi	r24, 0x1D	; 29
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINC3,OUTPUT);
    3e66:	83 e1       	ldi	r24, 0x13	; 19
    3e68:	61 e0       	ldi	r22, 0x01	; 1
    3e6a:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINC4,OUTPUT);
    3e6e:	84 e1       	ldi	r24, 0x14	; 20
    3e70:	61 e0       	ldi	r22, 0x01	; 1
    3e72:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINC5,OUTPUT);
    3e76:	85 e1       	ldi	r24, 0x15	; 21
    3e78:	61 e0       	ldi	r22, 0x01	; 1
    3e7a:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINC6,OUTPUT);
    3e7e:	86 e1       	ldi	r24, 0x16	; 22
    3e80:	61 e0       	ldi	r22, 0x01	; 1
    3e82:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINB3,OUTPUT);  //when i want to control the speed through pwm on the enable pin
    3e86:	8b e0       	ldi	r24, 0x0B	; 11
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	TIMER0_VoidInit(FAST_PWM,prescalar_64,Clear_OC0);
    3e8e:	83 e0       	ldi	r24, 0x03	; 3
    3e90:	63 e0       	ldi	r22, 0x03	; 3
    3e92:	42 e0       	ldi	r20, 0x02	; 2
    3e94:	0e 94 5f 0b 	call	0x16be	; 0x16be <TIMER0_VoidInit>
	TIMER0_Voidstart();
    3e98:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TIMER0_Voidstart>
}
    3e9c:	cf 91       	pop	r28
    3e9e:	df 91       	pop	r29
    3ea0:	08 95       	ret

00003ea2 <DC_VoidMOTORON>:

void DC_VoidMOTORON(u8 DutyCycle,DC_MOTORDIRECTION MOTORDIRECTION)
{
    3ea2:	df 93       	push	r29
    3ea4:	cf 93       	push	r28
    3ea6:	00 d0       	rcall	.+0      	; 0x3ea8 <DC_VoidMOTORON+0x6>
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	6a 83       	std	Y+2, r22	; 0x02

	DIO_VoidSetPinValue(DIO_PIND4,DIO_HIGH);
    3eb0:	8c e1       	ldi	r24, 0x1C	; 28
    3eb2:	61 e0       	ldi	r22, 0x01	; 1
    3eb4:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(DIO_PIND5,DIO_HIGH);
    3eb8:	8d e1       	ldi	r24, 0x1D	; 29
    3eba:	61 e0       	ldi	r22, 0x01	; 1
    3ebc:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>

	if(MOTORDIRECTION==DC_FORWARD)
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	49 f4       	brne	.+18     	; 0x3ed8 <DC_VoidMOTORON+0x36>
	{
		DIO_VoidSetPinValue(DIO_PINC3,DIO_HIGH);
    3ec6:	83 e1       	ldi	r24, 0x13	; 19
    3ec8:	61 e0       	ldi	r22, 0x01	; 1
    3eca:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_PINC4,DIO_LOW);
    3ece:	84 e1       	ldi	r24, 0x14	; 20
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
    3ed6:	08 c0       	rjmp	.+16     	; 0x3ee8 <DC_VoidMOTORON+0x46>
	}else
	{
		DIO_VoidSetPinValue(DIO_PINC3,DIO_LOW);
    3ed8:	83 e1       	ldi	r24, 0x13	; 19
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_PINC4,DIO_HIGH);
    3ee0:	84 e1       	ldi	r24, 0x14	; 20
    3ee2:	61 e0       	ldi	r22, 0x01	; 1
    3ee4:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	}

	TIMER_VoidPwmDuty(DutyCycle); //if i want to control the speed
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <TIMER_VoidPwmDuty>

}
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <DC_VoidDCMOTORStop>:

void DC_VoidDCMOTORStop(void)
{
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
	TIMER_VoidPwmDuty(0);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <TIMER_VoidPwmDuty>
}
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	08 95       	ret

00003f0c <BTN2_Initialize>:
#include "DIO_cfg.h"
#include "STD_TYPES.h"


void BTN2_Initialize(void)
{
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(B2,B2_INP);
    3f14:	8a e1       	ldi	r24, 0x1A	; 26
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	60 e0       	ldi	r22, 0x00	; 0
    3f1a:	70 e0       	ldi	r23, 0x00	; 0
    3f1c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
}
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret

00003f26 <BTN2_Read>:
u16 BTN2_Read(void)
{
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	00 d0       	rcall	.+0      	; 0x3f2c <BTN2_Read+0x6>
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
	u16 BTN2_Val = BTN2_NPressed;
    3f30:	1a 82       	std	Y+2, r1	; 0x02
    3f32:	19 82       	std	Y+1, r1	; 0x01
	BTN2_Val = DIO_U8GetPinValue(B2);
    3f34:	8a e1       	ldi	r24, 0x1A	; 26
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	0e 94 ba 12 	call	0x2574	; 0x2574 <DIO_U8GetPinValue>
    3f3c:	9a 83       	std	Y+2, r25	; 0x02
    3f3e:	89 83       	std	Y+1, r24	; 0x01
	return BTN2_Val;
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	08 95       	ret

00003f4e <BTN1_Initialize>:
#include"DIO_cfg.h"
#include "STD_TYPES.h"


void BTN1_Initialize(void)
{
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(B1,B1_INP);
    3f56:	8e e1       	ldi	r24, 0x1E	; 30
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	70 e0       	ldi	r23, 0x00	; 0
    3f5e:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
}
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	08 95       	ret

00003f68 <BTN1_Read>:
u16 BTN1_Read(void)
{
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <BTN1_Read+0x6>
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
	u16 BTN1_Val = BTN1_NPressed;
    3f72:	86 e9       	ldi	r24, 0x96	; 150
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9a 83       	std	Y+2, r25	; 0x02
    3f78:	89 83       	std	Y+1, r24	; 0x01
	BTN1_Val = DIO_U8GetPinValue(B1);
    3f7a:	8e e1       	ldi	r24, 0x1E	; 30
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 ba 12 	call	0x2574	; 0x2574 <DIO_U8GetPinValue>
    3f82:	9a 83       	std	Y+2, r25	; 0x02
    3f84:	89 83       	std	Y+1, r24	; 0x01
	return BTN1_Val;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	cf 91       	pop	r28
    3f90:	df 91       	pop	r29
    3f92:	08 95       	ret

00003f94 <BTN0_Initialize>:
#include "STD_TYPES.h"
#include "BTN0_Cfg.h"


void BTN0_Initialize(void)
{
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(B0,B0_INP);
    3f9c:	88 e1       	ldi	r24, 0x18	; 24
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
}
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <BTN0_Read>:
u16 BTN0_Read(void)
{
    3fae:	df 93       	push	r29
    3fb0:	cf 93       	push	r28
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <BTN0_Read+0x6>
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
	u16 BTN0_Val = BTN0_NPressed;
    3fb8:	86 e9       	ldi	r24, 0x96	; 150
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	9a 83       	std	Y+2, r25	; 0x02
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	BTN0_Val = DIO_U8GetPinValue(B0);
    3fc0:	88 e1       	ldi	r24, 0x18	; 24
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 ba 12 	call	0x2574	; 0x2574 <DIO_U8GetPinValue>
    3fc8:	9a 83       	std	Y+2, r25	; 0x02
    3fca:	89 83       	std	Y+1, r24	; 0x01
	return BTN0_Val;
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
    3fce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	cf 91       	pop	r28
    3fd6:	df 91       	pop	r29
    3fd8:	08 95       	ret

00003fda <Segment_Display>:
#include "DIO_Interface.h"
#include "7Segment_Interface.h"
#include "7Segment_cfg.h"
#include "DIO_Private.h"

void Segment_Display(char num) {
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	60 97       	sbiw	r28, 0x10	; 16
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	8b 87       	std	Y+11, r24	; 0x0b
	char SegmentArr[10] = { 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
			0x80, 0x90 };
    3ff0:	ce 01       	movw	r24, r28
    3ff2:	01 96       	adiw	r24, 0x01	; 1
    3ff4:	9d 87       	std	Y+13, r25	; 0x0d
    3ff6:	8c 87       	std	Y+12, r24	; 0x0c
    3ff8:	ef ed       	ldi	r30, 0xDF	; 223
    3ffa:	f1 e0       	ldi	r31, 0x01	; 1
    3ffc:	ff 87       	std	Y+15, r31	; 0x0f
    3ffe:	ee 87       	std	Y+14, r30	; 0x0e
    4000:	fa e0       	ldi	r31, 0x0A	; 10
    4002:	f8 8b       	std	Y+16, r31	; 0x10
    4004:	ee 85       	ldd	r30, Y+14	; 0x0e
    4006:	ff 85       	ldd	r31, Y+15	; 0x0f
    4008:	00 80       	ld	r0, Z
    400a:	8e 85       	ldd	r24, Y+14	; 0x0e
    400c:	9f 85       	ldd	r25, Y+15	; 0x0f
    400e:	01 96       	adiw	r24, 0x01	; 1
    4010:	9f 87       	std	Y+15, r25	; 0x0f
    4012:	8e 87       	std	Y+14, r24	; 0x0e
    4014:	ec 85       	ldd	r30, Y+12	; 0x0c
    4016:	fd 85       	ldd	r31, Y+13	; 0x0d
    4018:	00 82       	st	Z, r0
    401a:	8c 85       	ldd	r24, Y+12	; 0x0c
    401c:	9d 85       	ldd	r25, Y+13	; 0x0d
    401e:	01 96       	adiw	r24, 0x01	; 1
    4020:	9d 87       	std	Y+13, r25	; 0x0d
    4022:	8c 87       	std	Y+12, r24	; 0x0c
    4024:	98 89       	ldd	r25, Y+16	; 0x10
    4026:	91 50       	subi	r25, 0x01	; 1
    4028:	98 8b       	std	Y+16, r25	; 0x10
    402a:	e8 89       	ldd	r30, Y+16	; 0x10
    402c:	ee 23       	and	r30, r30
    402e:	51 f7       	brne	.-44     	; 0x4004 <Segment_Display+0x2a>
	if (num <= 9) {
    4030:	8b 85       	ldd	r24, Y+11	; 0x0b
    4032:	8a 30       	cpi	r24, 0x0A	; 10
    4034:	68 f4       	brcc	.+26     	; 0x4050 <Segment_Display+0x76>
		DIO_VoidSetPortValue(PORTA, SegmentArr[num]);
    4036:	8b 85       	ldd	r24, Y+11	; 0x0b
    4038:	28 2f       	mov	r18, r24
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	ce 01       	movw	r24, r28
    403e:	01 96       	adiw	r24, 0x01	; 1
    4040:	fc 01       	movw	r30, r24
    4042:	e2 0f       	add	r30, r18
    4044:	f3 1f       	adc	r31, r19
    4046:	90 81       	ld	r25, Z
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	69 2f       	mov	r22, r25
    404c:	0e 94 38 12 	call	0x2470	; 0x2470 <DIO_VoidSetPortValue>

	}

}
    4050:	60 96       	adiw	r28, 0x10	; 16
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	cd bf       	out	0x3d, r28	; 61
    405c:	cf 91       	pop	r28
    405e:	df 91       	pop	r29
    4060:	08 95       	ret

00004062 <SEVSEG_Display>:
void SEVSEG_Display(u32 number)
{
    4062:	df 93       	push	r29
    4064:	cf 93       	push	r28
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	a8 97       	sbiw	r28, 0x28	; 40
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	6d a3       	std	Y+37, r22	; 0x25
    4078:	7e a3       	std	Y+38, r23	; 0x26
    407a:	8f a3       	std	Y+39, r24	; 0x27
    407c:	98 a7       	std	Y+40, r25	; 0x28
	u32 units = number % 10;
    407e:	8d a1       	ldd	r24, Y+37	; 0x25
    4080:	9e a1       	ldd	r25, Y+38	; 0x26
    4082:	af a1       	ldd	r26, Y+39	; 0x27
    4084:	b8 a5       	ldd	r27, Y+40	; 0x28
    4086:	2a e0       	ldi	r18, 0x0A	; 10
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	bc 01       	movw	r22, r24
    4090:	cd 01       	movw	r24, r26
    4092:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	89 a3       	std	Y+33, r24	; 0x21
    409c:	9a a3       	std	Y+34, r25	; 0x22
    409e:	ab a3       	std	Y+35, r26	; 0x23
    40a0:	bc a3       	std	Y+36, r27	; 0x24
	u32 tens = number / 10;
    40a2:	8d a1       	ldd	r24, Y+37	; 0x25
    40a4:	9e a1       	ldd	r25, Y+38	; 0x26
    40a6:	af a1       	ldd	r26, Y+39	; 0x27
    40a8:	b8 a5       	ldd	r27, Y+40	; 0x28
    40aa:	2a e0       	ldi	r18, 0x0A	; 10
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	bc 01       	movw	r22, r24
    40b4:	cd 01       	movw	r24, r26
    40b6:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__udivmodsi4>
    40ba:	da 01       	movw	r26, r20
    40bc:	c9 01       	movw	r24, r18
    40be:	8d 8f       	std	Y+29, r24	; 0x1d
    40c0:	9e 8f       	std	Y+30, r25	; 0x1e
    40c2:	af 8f       	std	Y+31, r26	; 0x1f
    40c4:	b8 a3       	std	Y+32, r27	; 0x20
	PORTA_REG = units << 4;
    40c6:	eb e3       	ldi	r30, 0x3B	; 59
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	89 a1       	ldd	r24, Y+33	; 0x21
    40cc:	82 95       	swap	r24
    40ce:	80 7f       	andi	r24, 0xF0	; 240
    40d0:	80 83       	st	Z, r24
	DIO_VoidSetPinValue(EN1, DIO_HIGH);
    40d2:	89 e0       	ldi	r24, 0x09	; 9
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(EN2, DIO_LOW);
    40da:	8a e0       	ldi	r24, 0x0A	; 10
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	a0 e2       	ldi	r26, 0x20	; 32
    40e8:	b1 e4       	ldi	r27, 0x41	; 65
    40ea:	89 8f       	std	Y+25, r24	; 0x19
    40ec:	9a 8f       	std	Y+26, r25	; 0x1a
    40ee:	ab 8f       	std	Y+27, r26	; 0x1b
    40f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f2:	69 8d       	ldd	r22, Y+25	; 0x19
    40f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	4a e7       	ldi	r20, 0x7A	; 122
    4100:	55 e4       	ldi	r21, 0x45	; 69
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	8d 8b       	std	Y+21, r24	; 0x15
    410c:	9e 8b       	std	Y+22, r25	; 0x16
    410e:	af 8b       	std	Y+23, r26	; 0x17
    4110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4112:	6d 89       	ldd	r22, Y+21	; 0x15
    4114:	7e 89       	ldd	r23, Y+22	; 0x16
    4116:	8f 89       	ldd	r24, Y+23	; 0x17
    4118:	98 8d       	ldd	r25, Y+24	; 0x18
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e8       	ldi	r20, 0x80	; 128
    4120:	5f e3       	ldi	r21, 0x3F	; 63
    4122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4126:	88 23       	and	r24, r24
    4128:	2c f4       	brge	.+10     	; 0x4134 <SEVSEG_Display+0xd2>
		__ticks = 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	9c 8b       	std	Y+20, r25	; 0x14
    4130:	8b 8b       	std	Y+19, r24	; 0x13
    4132:	3f c0       	rjmp	.+126    	; 0x41b2 <SEVSEG_Display+0x150>
	else if (__tmp > 65535)
    4134:	6d 89       	ldd	r22, Y+21	; 0x15
    4136:	7e 89       	ldd	r23, Y+22	; 0x16
    4138:	8f 89       	ldd	r24, Y+23	; 0x17
    413a:	98 8d       	ldd	r25, Y+24	; 0x18
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	4f e7       	ldi	r20, 0x7F	; 127
    4142:	57 e4       	ldi	r21, 0x47	; 71
    4144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4148:	18 16       	cp	r1, r24
    414a:	4c f5       	brge	.+82     	; 0x419e <SEVSEG_Display+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414c:	69 8d       	ldd	r22, Y+25	; 0x19
    414e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e2       	ldi	r20, 0x20	; 32
    415a:	51 e4       	ldi	r21, 0x41	; 65
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	9c 8b       	std	Y+20, r25	; 0x14
    4172:	8b 8b       	std	Y+19, r24	; 0x13
    4174:	0f c0       	rjmp	.+30     	; 0x4194 <SEVSEG_Display+0x132>
    4176:	80 e9       	ldi	r24, 0x90	; 144
    4178:	91 e0       	ldi	r25, 0x01	; 1
    417a:	9a 8b       	std	Y+18, r25	; 0x12
    417c:	89 8b       	std	Y+17, r24	; 0x11
    417e:	89 89       	ldd	r24, Y+17	; 0x11
    4180:	9a 89       	ldd	r25, Y+18	; 0x12
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <SEVSEG_Display+0x120>
    4186:	9a 8b       	std	Y+18, r25	; 0x12
    4188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418a:	8b 89       	ldd	r24, Y+19	; 0x13
    418c:	9c 89       	ldd	r25, Y+20	; 0x14
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	9c 8b       	std	Y+20, r25	; 0x14
    4192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4194:	8b 89       	ldd	r24, Y+19	; 0x13
    4196:	9c 89       	ldd	r25, Y+20	; 0x14
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	69 f7       	brne	.-38     	; 0x4176 <SEVSEG_Display+0x114>
    419c:	14 c0       	rjmp	.+40     	; 0x41c6 <SEVSEG_Display+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419e:	6d 89       	ldd	r22, Y+21	; 0x15
    41a0:	7e 89       	ldd	r23, Y+22	; 0x16
    41a2:	8f 89       	ldd	r24, Y+23	; 0x17
    41a4:	98 8d       	ldd	r25, Y+24	; 0x18
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	9c 8b       	std	Y+20, r25	; 0x14
    41b0:	8b 8b       	std	Y+19, r24	; 0x13
    41b2:	8b 89       	ldd	r24, Y+19	; 0x13
    41b4:	9c 89       	ldd	r25, Y+20	; 0x14
    41b6:	98 8b       	std	Y+16, r25	; 0x10
    41b8:	8f 87       	std	Y+15, r24	; 0x0f
    41ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    41bc:	98 89       	ldd	r25, Y+16	; 0x10
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	f1 f7       	brne	.-4      	; 0x41be <SEVSEG_Display+0x15c>
    41c2:	98 8b       	std	Y+16, r25	; 0x10
    41c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	PORTA_REG = tens <<4;
    41c6:	eb e3       	ldi	r30, 0x3B	; 59
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41cc:	82 95       	swap	r24
    41ce:	80 7f       	andi	r24, 0xF0	; 240
    41d0:	80 83       	st	Z, r24
	DIO_VoidSetPinValue(EN2, DIO_HIGH);
    41d2:	8a e0       	ldi	r24, 0x0A	; 10
    41d4:	61 e0       	ldi	r22, 0x01	; 1
    41d6:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(EN1, DIO_LOW);
    41da:	89 e0       	ldi	r24, 0x09	; 9
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_VoidSetPinValue>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	a0 e2       	ldi	r26, 0x20	; 32
    41e8:	b1 e4       	ldi	r27, 0x41	; 65
    41ea:	8b 87       	std	Y+11, r24	; 0x0b
    41ec:	9c 87       	std	Y+12, r25	; 0x0c
    41ee:	ad 87       	std	Y+13, r26	; 0x0d
    41f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	4a e7       	ldi	r20, 0x7A	; 122
    4200:	55 e4       	ldi	r21, 0x45	; 69
    4202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	8f 83       	std	Y+7, r24	; 0x07
    420c:	98 87       	std	Y+8, r25	; 0x08
    420e:	a9 87       	std	Y+9, r26	; 0x09
    4210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4212:	6f 81       	ldd	r22, Y+7	; 0x07
    4214:	78 85       	ldd	r23, Y+8	; 0x08
    4216:	89 85       	ldd	r24, Y+9	; 0x09
    4218:	9a 85       	ldd	r25, Y+10	; 0x0a
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	40 e8       	ldi	r20, 0x80	; 128
    4220:	5f e3       	ldi	r21, 0x3F	; 63
    4222:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4226:	88 23       	and	r24, r24
    4228:	2c f4       	brge	.+10     	; 0x4234 <SEVSEG_Display+0x1d2>
		__ticks = 1;
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
    4232:	3f c0       	rjmp	.+126    	; 0x42b2 <SEVSEG_Display+0x250>
	else if (__tmp > 65535)
    4234:	6f 81       	ldd	r22, Y+7	; 0x07
    4236:	78 85       	ldd	r23, Y+8	; 0x08
    4238:	89 85       	ldd	r24, Y+9	; 0x09
    423a:	9a 85       	ldd	r25, Y+10	; 0x0a
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	3f ef       	ldi	r19, 0xFF	; 255
    4240:	4f e7       	ldi	r20, 0x7F	; 127
    4242:	57 e4       	ldi	r21, 0x47	; 71
    4244:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4248:	18 16       	cp	r1, r24
    424a:	4c f5       	brge	.+82     	; 0x429e <SEVSEG_Display+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424c:	6b 85       	ldd	r22, Y+11	; 0x0b
    424e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4250:	8d 85       	ldd	r24, Y+13	; 0x0d
    4252:	9e 85       	ldd	r25, Y+14	; 0x0e
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e2       	ldi	r20, 0x20	; 32
    425a:	51 e4       	ldi	r21, 0x41	; 65
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	9e 83       	std	Y+6, r25	; 0x06
    4272:	8d 83       	std	Y+5, r24	; 0x05
    4274:	0f c0       	rjmp	.+30     	; 0x4294 <SEVSEG_Display+0x232>
    4276:	80 e9       	ldi	r24, 0x90	; 144
    4278:	91 e0       	ldi	r25, 0x01	; 1
    427a:	9c 83       	std	Y+4, r25	; 0x04
    427c:	8b 83       	std	Y+3, r24	; 0x03
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	9c 81       	ldd	r25, Y+4	; 0x04
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <SEVSEG_Display+0x220>
    4286:	9c 83       	std	Y+4, r25	; 0x04
    4288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428a:	8d 81       	ldd	r24, Y+5	; 0x05
    428c:	9e 81       	ldd	r25, Y+6	; 0x06
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	9e 83       	std	Y+6, r25	; 0x06
    4292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	69 f7       	brne	.-38     	; 0x4276 <SEVSEG_Display+0x214>
    429c:	14 c0       	rjmp	.+40     	; 0x42c6 <SEVSEG_Display+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429e:	6f 81       	ldd	r22, Y+7	; 0x07
    42a0:	78 85       	ldd	r23, Y+8	; 0x08
    42a2:	89 85       	ldd	r24, Y+9	; 0x09
    42a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9e 83       	std	Y+6, r25	; 0x06
    42b0:	8d 83       	std	Y+5, r24	; 0x05
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	9a 81       	ldd	r25, Y+2	; 0x02
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <SEVSEG_Display+0x25c>
    42c2:	9a 83       	std	Y+2, r25	; 0x02
    42c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    42c6:	a8 96       	adiw	r28, 0x28	; 40
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	de bf       	out	0x3e, r29	; 62
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	cd bf       	out	0x3d, r28	; 61
    42d2:	cf 91       	pop	r28
    42d4:	df 91       	pop	r29
    42d6:	08 95       	ret

000042d8 <ADC_Complete_Callback>:
volatile u8 current_channel = 0; // Index to keep track of the current ADC channel

// List of channels to be sampled
ADC_channel channels[] = { 0, 1, 2, 3, 4 }; // Example channels for flex sensors

void ADC_Complete_Callback(void) {
    42d8:	df 93       	push	r29
    42da:	cf 93       	push	r28
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
	// Store the ADC result (10-bit value)
	Digital_Values[current_channel] = (int) ADCL + (int) ADCH * 256;
    42e0:	80 91 15 02 	lds	r24, 0x0215
    42e4:	48 2f       	mov	r20, r24
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	e4 e2       	ldi	r30, 0x24	; 36
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	80 81       	ld	r24, Z
    42ee:	28 2f       	mov	r18, r24
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	e5 e2       	ldi	r30, 0x25	; 37
    42f4:	f0 e0       	ldi	r31, 0x00	; 0
    42f6:	80 81       	ld	r24, Z
    42f8:	88 2f       	mov	r24, r24
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	98 2f       	mov	r25, r24
    42fe:	88 27       	eor	r24, r24
    4300:	82 0f       	add	r24, r18
    4302:	93 1f       	adc	r25, r19
    4304:	9c 01       	movw	r18, r24
    4306:	ca 01       	movw	r24, r20
    4308:	88 0f       	add	r24, r24
    430a:	99 1f       	adc	r25, r25
    430c:	fc 01       	movw	r30, r24
    430e:	e5 5f       	subi	r30, 0xF5	; 245
    4310:	fd 4f       	sbci	r31, 0xFD	; 253
    4312:	31 83       	std	Z+1, r19	; 0x01
    4314:	20 83       	st	Z, r18

	// Move to the next channel
	current_channel++;
    4316:	80 91 15 02 	lds	r24, 0x0215
    431a:	8f 5f       	subi	r24, 0xFF	; 255
    431c:	80 93 15 02 	sts	0x0215, r24
	if (current_channel >= sizeof(channels) / sizeof(channels[0])) {
    4320:	80 91 15 02 	lds	r24, 0x0215
    4324:	85 30       	cpi	r24, 0x05	; 5
    4326:	10 f0       	brcs	.+4      	; 0x432c <ADC_Complete_Callback+0x54>
		current_channel = 0; // Reset to the first channel
    4328:	10 92 15 02 	sts	0x0215, r1
	}
	// Start the next ADC conversion
	ADMUX = (ADMUX & 0xE0) | channels[current_channel]; // Select the next channel
    432c:	a7 e2       	ldi	r26, 0x27	; 39
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	e7 e2       	ldi	r30, 0x27	; 39
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	80 81       	ld	r24, Z
    4336:	28 2f       	mov	r18, r24
    4338:	20 7e       	andi	r18, 0xE0	; 224
    433a:	80 91 15 02 	lds	r24, 0x0215
    433e:	88 2f       	mov	r24, r24
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	fc 01       	movw	r30, r24
    4344:	ee 52       	subi	r30, 0x2E	; 46
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	80 81       	ld	r24, Z
    434a:	82 2b       	or	r24, r18
    434c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); // Start ADC conversion
    434e:	a6 e2       	ldi	r26, 0x26	; 38
    4350:	b0 e0       	ldi	r27, 0x00	; 0
    4352:	e6 e2       	ldi	r30, 0x26	; 38
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	80 81       	ld	r24, Z
    4358:	80 64       	ori	r24, 0x40	; 64
    435a:	8c 93       	st	X, r24
}
    435c:	cf 91       	pop	r28
    435e:	df 91       	pop	r29
    4360:	08 95       	ret

00004362 <main>:

int main(void) {
    4362:	df 93       	push	r29
    4364:	cf 93       	push	r28
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    436a:	c3 5f       	subi	r28, 0xF3	; 243
    436c:	d0 40       	sbci	r29, 0x00	; 0
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61

	DIO_VoidSetPortDirection(1, OUTPUT);
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	61 e0       	ldi	r22, 0x01	; 1
    437c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <DIO_VoidSetPortDirection>
	LCD_VoidInit();
    4380:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <LCD_VoidInit>
	DIO_VoidSetPinDirection(DIO_PINA0, INPUT);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA1, INPUT);
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA2, INPUT);
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	60 e0       	ldi	r22, 0x00	; 0
    4398:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA3, INPUT);
    439c:	83 e0       	ldi	r24, 0x03	; 3
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA4, INPUT);
    43a4:	84 e0       	ldi	r24, 0x04	; 4
    43a6:	60 e0       	ldi	r22, 0x00	; 0
    43a8:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_VoidSetPinDirection>
	DIO_VoidSetPortDirection(3, 0xFF);
    43ac:	83 e0       	ldi	r24, 0x03	; 3
    43ae:	6f ef       	ldi	r22, 0xFF	; 255
    43b0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <DIO_VoidSetPortDirection>
	// Initialize ADC with internal voltage reference
	ADC_INIT(Internal_Voltage_Reference);
    43b4:	83 e0       	ldi	r24, 0x03	; 3
    43b6:	0e 94 c8 13 	call	0x2790	; 0x2790 <ADC_INIT>

	// Set the ADC complete callback function
	ADC_VoidCallBack(ADC_Complete_Callback);
    43ba:	8c e6       	ldi	r24, 0x6C	; 108
    43bc:	91 e2       	ldi	r25, 0x21	; 33
    43be:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <ADC_VoidCallBack>

	// Enable global interrupts
	M_GIE_VoidEnable();
    43c2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <M_GIE_VoidEnable>

	start_ADC_conversion(channels[current_channel]);
    43c6:	80 91 15 02 	lds	r24, 0x0215
    43ca:	88 2f       	mov	r24, r24
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	fc 01       	movw	r30, r24
    43d0:	ee 52       	subi	r30, 0x2E	; 46
    43d2:	fe 4f       	sbci	r31, 0xFE	; 254
    43d4:	80 81       	ld	r24, Z
    43d6:	88 2f       	mov	r24, r24
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 6f 15 	call	0x2ade	; 0x2ade <start_ADC_conversion>

	u8 lastMessage[16] = "";
    43de:	1f 86       	std	Y+15, r1	; 0x0f
    43e0:	18 8a       	std	Y+16, r1	; 0x10
    43e2:	19 8a       	std	Y+17, r1	; 0x11
    43e4:	1a 8a       	std	Y+18, r1	; 0x12
    43e6:	8c e0       	ldi	r24, 0x0C	; 12
    43e8:	fe 01       	movw	r30, r28
    43ea:	73 96       	adiw	r30, 0x13	; 19
    43ec:	df 01       	movw	r26, r30
    43ee:	28 2f       	mov	r18, r24
    43f0:	1d 92       	st	X+, r1
    43f2:	2a 95       	dec	r18
    43f4:	e9 f7       	brne	.-6      	; 0x43f0 <main+0x8e>

	u8 message1[] = "This is terrible";
    43f6:	ce 01       	movw	r24, r28
    43f8:	4f 96       	adiw	r24, 0x1f	; 31
    43fa:	c5 52       	subi	r28, 0x25	; 37
    43fc:	df 4f       	sbci	r29, 0xFF	; 255
    43fe:	99 83       	std	Y+1, r25	; 0x01
    4400:	88 83       	st	Y, r24
    4402:	cb 5d       	subi	r28, 0xDB	; 219
    4404:	d0 40       	sbci	r29, 0x00	; 0
    4406:	a0 e6       	ldi	r26, 0x60	; 96
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	c3 52       	subi	r28, 0x23	; 35
    440c:	df 4f       	sbci	r29, 0xFF	; 255
    440e:	b9 83       	std	Y+1, r27	; 0x01
    4410:	a8 83       	st	Y, r26
    4412:	cd 5d       	subi	r28, 0xDD	; 221
    4414:	d0 40       	sbci	r29, 0x00	; 0
    4416:	b1 e1       	ldi	r27, 0x11	; 17
    4418:	c1 52       	subi	r28, 0x21	; 33
    441a:	df 4f       	sbci	r29, 0xFF	; 255
    441c:	b8 83       	st	Y, r27
    441e:	cf 5d       	subi	r28, 0xDF	; 223
    4420:	d0 40       	sbci	r29, 0x00	; 0
    4422:	c3 52       	subi	r28, 0x23	; 35
    4424:	df 4f       	sbci	r29, 0xFF	; 255
    4426:	e8 81       	ld	r30, Y
    4428:	f9 81       	ldd	r31, Y+1	; 0x01
    442a:	cd 5d       	subi	r28, 0xDD	; 221
    442c:	d0 40       	sbci	r29, 0x00	; 0
    442e:	00 80       	ld	r0, Z
    4430:	c3 52       	subi	r28, 0x23	; 35
    4432:	df 4f       	sbci	r29, 0xFF	; 255
    4434:	88 81       	ld	r24, Y
    4436:	99 81       	ldd	r25, Y+1	; 0x01
    4438:	cd 5d       	subi	r28, 0xDD	; 221
    443a:	d0 40       	sbci	r29, 0x00	; 0
    443c:	01 96       	adiw	r24, 0x01	; 1
    443e:	c3 52       	subi	r28, 0x23	; 35
    4440:	df 4f       	sbci	r29, 0xFF	; 255
    4442:	99 83       	std	Y+1, r25	; 0x01
    4444:	88 83       	st	Y, r24
    4446:	cd 5d       	subi	r28, 0xDD	; 221
    4448:	d0 40       	sbci	r29, 0x00	; 0
    444a:	c5 52       	subi	r28, 0x25	; 37
    444c:	df 4f       	sbci	r29, 0xFF	; 255
    444e:	a8 81       	ld	r26, Y
    4450:	b9 81       	ldd	r27, Y+1	; 0x01
    4452:	cb 5d       	subi	r28, 0xDB	; 219
    4454:	d0 40       	sbci	r29, 0x00	; 0
    4456:	0c 92       	st	X, r0
    4458:	c5 52       	subi	r28, 0x25	; 37
    445a:	df 4f       	sbci	r29, 0xFF	; 255
    445c:	e8 81       	ld	r30, Y
    445e:	f9 81       	ldd	r31, Y+1	; 0x01
    4460:	cb 5d       	subi	r28, 0xDB	; 219
    4462:	d0 40       	sbci	r29, 0x00	; 0
    4464:	31 96       	adiw	r30, 0x01	; 1
    4466:	c5 52       	subi	r28, 0x25	; 37
    4468:	df 4f       	sbci	r29, 0xFF	; 255
    446a:	f9 83       	std	Y+1, r31	; 0x01
    446c:	e8 83       	st	Y, r30
    446e:	cb 5d       	subi	r28, 0xDB	; 219
    4470:	d0 40       	sbci	r29, 0x00	; 0
    4472:	c1 52       	subi	r28, 0x21	; 33
    4474:	df 4f       	sbci	r29, 0xFF	; 255
    4476:	f8 81       	ld	r31, Y
    4478:	cf 5d       	subi	r28, 0xDF	; 223
    447a:	d0 40       	sbci	r29, 0x00	; 0
    447c:	f1 50       	subi	r31, 0x01	; 1
    447e:	c1 52       	subi	r28, 0x21	; 33
    4480:	df 4f       	sbci	r29, 0xFF	; 255
    4482:	f8 83       	st	Y, r31
    4484:	cf 5d       	subi	r28, 0xDF	; 223
    4486:	d0 40       	sbci	r29, 0x00	; 0
    4488:	c1 52       	subi	r28, 0x21	; 33
    448a:	df 4f       	sbci	r29, 0xFF	; 255
    448c:	28 81       	ld	r18, Y
    448e:	cf 5d       	subi	r28, 0xDF	; 223
    4490:	d0 40       	sbci	r29, 0x00	; 0
    4492:	22 23       	and	r18, r18
    4494:	31 f6       	brne	.-116    	; 0x4422 <main+0xc0>
	u8 message2[] = "I Love You";
    4496:	ce 01       	movw	r24, r28
    4498:	c0 96       	adiw	r24, 0x30	; 48
    449a:	c0 52       	subi	r28, 0x20	; 32
    449c:	df 4f       	sbci	r29, 0xFF	; 255
    449e:	99 83       	std	Y+1, r25	; 0x01
    44a0:	88 83       	st	Y, r24
    44a2:	c0 5e       	subi	r28, 0xE0	; 224
    44a4:	d0 40       	sbci	r29, 0x00	; 0
    44a6:	a1 e7       	ldi	r26, 0x71	; 113
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	ce 51       	subi	r28, 0x1E	; 30
    44ac:	df 4f       	sbci	r29, 0xFF	; 255
    44ae:	b9 83       	std	Y+1, r27	; 0x01
    44b0:	a8 83       	st	Y, r26
    44b2:	c2 5e       	subi	r28, 0xE2	; 226
    44b4:	d0 40       	sbci	r29, 0x00	; 0
    44b6:	bb e0       	ldi	r27, 0x0B	; 11
    44b8:	cc 51       	subi	r28, 0x1C	; 28
    44ba:	df 4f       	sbci	r29, 0xFF	; 255
    44bc:	b8 83       	st	Y, r27
    44be:	c4 5e       	subi	r28, 0xE4	; 228
    44c0:	d0 40       	sbci	r29, 0x00	; 0
    44c2:	ce 51       	subi	r28, 0x1E	; 30
    44c4:	df 4f       	sbci	r29, 0xFF	; 255
    44c6:	e8 81       	ld	r30, Y
    44c8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ca:	c2 5e       	subi	r28, 0xE2	; 226
    44cc:	d0 40       	sbci	r29, 0x00	; 0
    44ce:	00 80       	ld	r0, Z
    44d0:	ce 51       	subi	r28, 0x1E	; 30
    44d2:	df 4f       	sbci	r29, 0xFF	; 255
    44d4:	88 81       	ld	r24, Y
    44d6:	99 81       	ldd	r25, Y+1	; 0x01
    44d8:	c2 5e       	subi	r28, 0xE2	; 226
    44da:	d0 40       	sbci	r29, 0x00	; 0
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	ce 51       	subi	r28, 0x1E	; 30
    44e0:	df 4f       	sbci	r29, 0xFF	; 255
    44e2:	99 83       	std	Y+1, r25	; 0x01
    44e4:	88 83       	st	Y, r24
    44e6:	c2 5e       	subi	r28, 0xE2	; 226
    44e8:	d0 40       	sbci	r29, 0x00	; 0
    44ea:	c0 52       	subi	r28, 0x20	; 32
    44ec:	df 4f       	sbci	r29, 0xFF	; 255
    44ee:	a8 81       	ld	r26, Y
    44f0:	b9 81       	ldd	r27, Y+1	; 0x01
    44f2:	c0 5e       	subi	r28, 0xE0	; 224
    44f4:	d0 40       	sbci	r29, 0x00	; 0
    44f6:	0c 92       	st	X, r0
    44f8:	c0 52       	subi	r28, 0x20	; 32
    44fa:	df 4f       	sbci	r29, 0xFF	; 255
    44fc:	e8 81       	ld	r30, Y
    44fe:	f9 81       	ldd	r31, Y+1	; 0x01
    4500:	c0 5e       	subi	r28, 0xE0	; 224
    4502:	d0 40       	sbci	r29, 0x00	; 0
    4504:	31 96       	adiw	r30, 0x01	; 1
    4506:	c0 52       	subi	r28, 0x20	; 32
    4508:	df 4f       	sbci	r29, 0xFF	; 255
    450a:	f9 83       	std	Y+1, r31	; 0x01
    450c:	e8 83       	st	Y, r30
    450e:	c0 5e       	subi	r28, 0xE0	; 224
    4510:	d0 40       	sbci	r29, 0x00	; 0
    4512:	cc 51       	subi	r28, 0x1C	; 28
    4514:	df 4f       	sbci	r29, 0xFF	; 255
    4516:	f8 81       	ld	r31, Y
    4518:	c4 5e       	subi	r28, 0xE4	; 228
    451a:	d0 40       	sbci	r29, 0x00	; 0
    451c:	f1 50       	subi	r31, 0x01	; 1
    451e:	cc 51       	subi	r28, 0x1C	; 28
    4520:	df 4f       	sbci	r29, 0xFF	; 255
    4522:	f8 83       	st	Y, r31
    4524:	c4 5e       	subi	r28, 0xE4	; 228
    4526:	d0 40       	sbci	r29, 0x00	; 0
    4528:	cc 51       	subi	r28, 0x1C	; 28
    452a:	df 4f       	sbci	r29, 0xFF	; 255
    452c:	28 81       	ld	r18, Y
    452e:	c4 5e       	subi	r28, 0xE4	; 228
    4530:	d0 40       	sbci	r29, 0x00	; 0
    4532:	22 23       	and	r18, r18
    4534:	31 f6       	brne	.-116    	; 0x44c2 <main+0x160>
	u8 message3[] = "I Really Love You";
    4536:	ce 01       	movw	r24, r28
    4538:	cb 96       	adiw	r24, 0x3b	; 59
    453a:	cb 51       	subi	r28, 0x1B	; 27
    453c:	df 4f       	sbci	r29, 0xFF	; 255
    453e:	99 83       	std	Y+1, r25	; 0x01
    4540:	88 83       	st	Y, r24
    4542:	c5 5e       	subi	r28, 0xE5	; 229
    4544:	d0 40       	sbci	r29, 0x00	; 0
    4546:	ac e7       	ldi	r26, 0x7C	; 124
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	c9 51       	subi	r28, 0x19	; 25
    454c:	df 4f       	sbci	r29, 0xFF	; 255
    454e:	b9 83       	std	Y+1, r27	; 0x01
    4550:	a8 83       	st	Y, r26
    4552:	c7 5e       	subi	r28, 0xE7	; 231
    4554:	d0 40       	sbci	r29, 0x00	; 0
    4556:	b2 e1       	ldi	r27, 0x12	; 18
    4558:	c7 51       	subi	r28, 0x17	; 23
    455a:	df 4f       	sbci	r29, 0xFF	; 255
    455c:	b8 83       	st	Y, r27
    455e:	c9 5e       	subi	r28, 0xE9	; 233
    4560:	d0 40       	sbci	r29, 0x00	; 0
    4562:	c9 51       	subi	r28, 0x19	; 25
    4564:	df 4f       	sbci	r29, 0xFF	; 255
    4566:	e8 81       	ld	r30, Y
    4568:	f9 81       	ldd	r31, Y+1	; 0x01
    456a:	c7 5e       	subi	r28, 0xE7	; 231
    456c:	d0 40       	sbci	r29, 0x00	; 0
    456e:	00 80       	ld	r0, Z
    4570:	c9 51       	subi	r28, 0x19	; 25
    4572:	df 4f       	sbci	r29, 0xFF	; 255
    4574:	88 81       	ld	r24, Y
    4576:	99 81       	ldd	r25, Y+1	; 0x01
    4578:	c7 5e       	subi	r28, 0xE7	; 231
    457a:	d0 40       	sbci	r29, 0x00	; 0
    457c:	01 96       	adiw	r24, 0x01	; 1
    457e:	c9 51       	subi	r28, 0x19	; 25
    4580:	df 4f       	sbci	r29, 0xFF	; 255
    4582:	99 83       	std	Y+1, r25	; 0x01
    4584:	88 83       	st	Y, r24
    4586:	c7 5e       	subi	r28, 0xE7	; 231
    4588:	d0 40       	sbci	r29, 0x00	; 0
    458a:	cb 51       	subi	r28, 0x1B	; 27
    458c:	df 4f       	sbci	r29, 0xFF	; 255
    458e:	a8 81       	ld	r26, Y
    4590:	b9 81       	ldd	r27, Y+1	; 0x01
    4592:	c5 5e       	subi	r28, 0xE5	; 229
    4594:	d0 40       	sbci	r29, 0x00	; 0
    4596:	0c 92       	st	X, r0
    4598:	cb 51       	subi	r28, 0x1B	; 27
    459a:	df 4f       	sbci	r29, 0xFF	; 255
    459c:	e8 81       	ld	r30, Y
    459e:	f9 81       	ldd	r31, Y+1	; 0x01
    45a0:	c5 5e       	subi	r28, 0xE5	; 229
    45a2:	d0 40       	sbci	r29, 0x00	; 0
    45a4:	31 96       	adiw	r30, 0x01	; 1
    45a6:	cb 51       	subi	r28, 0x1B	; 27
    45a8:	df 4f       	sbci	r29, 0xFF	; 255
    45aa:	f9 83       	std	Y+1, r31	; 0x01
    45ac:	e8 83       	st	Y, r30
    45ae:	c5 5e       	subi	r28, 0xE5	; 229
    45b0:	d0 40       	sbci	r29, 0x00	; 0
    45b2:	c7 51       	subi	r28, 0x17	; 23
    45b4:	df 4f       	sbci	r29, 0xFF	; 255
    45b6:	f8 81       	ld	r31, Y
    45b8:	c9 5e       	subi	r28, 0xE9	; 233
    45ba:	d0 40       	sbci	r29, 0x00	; 0
    45bc:	f1 50       	subi	r31, 0x01	; 1
    45be:	c7 51       	subi	r28, 0x17	; 23
    45c0:	df 4f       	sbci	r29, 0xFF	; 255
    45c2:	f8 83       	st	Y, r31
    45c4:	c9 5e       	subi	r28, 0xE9	; 233
    45c6:	d0 40       	sbci	r29, 0x00	; 0
    45c8:	c7 51       	subi	r28, 0x17	; 23
    45ca:	df 4f       	sbci	r29, 0xFF	; 255
    45cc:	28 81       	ld	r18, Y
    45ce:	c9 5e       	subi	r28, 0xE9	; 233
    45d0:	d0 40       	sbci	r29, 0x00	; 0
    45d2:	22 23       	and	r18, r18
    45d4:	31 f6       	brne	.-116    	; 0x4562 <main+0x200>
	u8 message4[] = "Good Job";
    45d6:	ce 01       	movw	r24, r28
    45d8:	83 5b       	subi	r24, 0xB3	; 179
    45da:	9f 4f       	sbci	r25, 0xFF	; 255
    45dc:	c6 51       	subi	r28, 0x16	; 22
    45de:	df 4f       	sbci	r29, 0xFF	; 255
    45e0:	99 83       	std	Y+1, r25	; 0x01
    45e2:	88 83       	st	Y, r24
    45e4:	ca 5e       	subi	r28, 0xEA	; 234
    45e6:	d0 40       	sbci	r29, 0x00	; 0
    45e8:	8e e8       	ldi	r24, 0x8E	; 142
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	c4 51       	subi	r28, 0x14	; 20
    45ee:	df 4f       	sbci	r29, 0xFF	; 255
    45f0:	99 83       	std	Y+1, r25	; 0x01
    45f2:	88 83       	st	Y, r24
    45f4:	cc 5e       	subi	r28, 0xEC	; 236
    45f6:	d0 40       	sbci	r29, 0x00	; 0
    45f8:	99 e0       	ldi	r25, 0x09	; 9
    45fa:	c2 51       	subi	r28, 0x12	; 18
    45fc:	df 4f       	sbci	r29, 0xFF	; 255
    45fe:	98 83       	st	Y, r25
    4600:	ce 5e       	subi	r28, 0xEE	; 238
    4602:	d0 40       	sbci	r29, 0x00	; 0
    4604:	c4 51       	subi	r28, 0x14	; 20
    4606:	df 4f       	sbci	r29, 0xFF	; 255
    4608:	a8 81       	ld	r26, Y
    460a:	b9 81       	ldd	r27, Y+1	; 0x01
    460c:	cc 5e       	subi	r28, 0xEC	; 236
    460e:	d0 40       	sbci	r29, 0x00	; 0
    4610:	0c 90       	ld	r0, X
    4612:	c4 51       	subi	r28, 0x14	; 20
    4614:	df 4f       	sbci	r29, 0xFF	; 255
    4616:	e8 81       	ld	r30, Y
    4618:	f9 81       	ldd	r31, Y+1	; 0x01
    461a:	cc 5e       	subi	r28, 0xEC	; 236
    461c:	d0 40       	sbci	r29, 0x00	; 0
    461e:	31 96       	adiw	r30, 0x01	; 1
    4620:	c4 51       	subi	r28, 0x14	; 20
    4622:	df 4f       	sbci	r29, 0xFF	; 255
    4624:	f9 83       	std	Y+1, r31	; 0x01
    4626:	e8 83       	st	Y, r30
    4628:	cc 5e       	subi	r28, 0xEC	; 236
    462a:	d0 40       	sbci	r29, 0x00	; 0
    462c:	c6 51       	subi	r28, 0x16	; 22
    462e:	df 4f       	sbci	r29, 0xFF	; 255
    4630:	a8 81       	ld	r26, Y
    4632:	b9 81       	ldd	r27, Y+1	; 0x01
    4634:	ca 5e       	subi	r28, 0xEA	; 234
    4636:	d0 40       	sbci	r29, 0x00	; 0
    4638:	0c 92       	st	X, r0
    463a:	c6 51       	subi	r28, 0x16	; 22
    463c:	df 4f       	sbci	r29, 0xFF	; 255
    463e:	e8 81       	ld	r30, Y
    4640:	f9 81       	ldd	r31, Y+1	; 0x01
    4642:	ca 5e       	subi	r28, 0xEA	; 234
    4644:	d0 40       	sbci	r29, 0x00	; 0
    4646:	31 96       	adiw	r30, 0x01	; 1
    4648:	c6 51       	subi	r28, 0x16	; 22
    464a:	df 4f       	sbci	r29, 0xFF	; 255
    464c:	f9 83       	std	Y+1, r31	; 0x01
    464e:	e8 83       	st	Y, r30
    4650:	ca 5e       	subi	r28, 0xEA	; 234
    4652:	d0 40       	sbci	r29, 0x00	; 0
    4654:	c2 51       	subi	r28, 0x12	; 18
    4656:	df 4f       	sbci	r29, 0xFF	; 255
    4658:	f8 81       	ld	r31, Y
    465a:	ce 5e       	subi	r28, 0xEE	; 238
    465c:	d0 40       	sbci	r29, 0x00	; 0
    465e:	f1 50       	subi	r31, 0x01	; 1
    4660:	c2 51       	subi	r28, 0x12	; 18
    4662:	df 4f       	sbci	r29, 0xFF	; 255
    4664:	f8 83       	st	Y, r31
    4666:	ce 5e       	subi	r28, 0xEE	; 238
    4668:	d0 40       	sbci	r29, 0x00	; 0
    466a:	c2 51       	subi	r28, 0x12	; 18
    466c:	df 4f       	sbci	r29, 0xFF	; 255
    466e:	28 81       	ld	r18, Y
    4670:	ce 5e       	subi	r28, 0xEE	; 238
    4672:	d0 40       	sbci	r29, 0x00	; 0
    4674:	22 23       	and	r18, r18
    4676:	31 f6       	brne	.-116    	; 0x4604 <main+0x2a2>
	u8 message5[] = "I'm watching you";
    4678:	ce 01       	movw	r24, r28
    467a:	8a 5a       	subi	r24, 0xAA	; 170
    467c:	9f 4f       	sbci	r25, 0xFF	; 255
    467e:	c1 51       	subi	r28, 0x11	; 17
    4680:	df 4f       	sbci	r29, 0xFF	; 255
    4682:	99 83       	std	Y+1, r25	; 0x01
    4684:	88 83       	st	Y, r24
    4686:	cf 5e       	subi	r28, 0xEF	; 239
    4688:	d0 40       	sbci	r29, 0x00	; 0
    468a:	87 e9       	ldi	r24, 0x97	; 151
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	cf 50       	subi	r28, 0x0F	; 15
    4690:	df 4f       	sbci	r29, 0xFF	; 255
    4692:	99 83       	std	Y+1, r25	; 0x01
    4694:	88 83       	st	Y, r24
    4696:	c1 5f       	subi	r28, 0xF1	; 241
    4698:	d0 40       	sbci	r29, 0x00	; 0
    469a:	91 e1       	ldi	r25, 0x11	; 17
    469c:	cd 50       	subi	r28, 0x0D	; 13
    469e:	df 4f       	sbci	r29, 0xFF	; 255
    46a0:	98 83       	st	Y, r25
    46a2:	c3 5f       	subi	r28, 0xF3	; 243
    46a4:	d0 40       	sbci	r29, 0x00	; 0
    46a6:	cf 50       	subi	r28, 0x0F	; 15
    46a8:	df 4f       	sbci	r29, 0xFF	; 255
    46aa:	a8 81       	ld	r26, Y
    46ac:	b9 81       	ldd	r27, Y+1	; 0x01
    46ae:	c1 5f       	subi	r28, 0xF1	; 241
    46b0:	d0 40       	sbci	r29, 0x00	; 0
    46b2:	0c 90       	ld	r0, X
    46b4:	cf 50       	subi	r28, 0x0F	; 15
    46b6:	df 4f       	sbci	r29, 0xFF	; 255
    46b8:	e8 81       	ld	r30, Y
    46ba:	f9 81       	ldd	r31, Y+1	; 0x01
    46bc:	c1 5f       	subi	r28, 0xF1	; 241
    46be:	d0 40       	sbci	r29, 0x00	; 0
    46c0:	31 96       	adiw	r30, 0x01	; 1
    46c2:	cf 50       	subi	r28, 0x0F	; 15
    46c4:	df 4f       	sbci	r29, 0xFF	; 255
    46c6:	f9 83       	std	Y+1, r31	; 0x01
    46c8:	e8 83       	st	Y, r30
    46ca:	c1 5f       	subi	r28, 0xF1	; 241
    46cc:	d0 40       	sbci	r29, 0x00	; 0
    46ce:	c1 51       	subi	r28, 0x11	; 17
    46d0:	df 4f       	sbci	r29, 0xFF	; 255
    46d2:	a8 81       	ld	r26, Y
    46d4:	b9 81       	ldd	r27, Y+1	; 0x01
    46d6:	cf 5e       	subi	r28, 0xEF	; 239
    46d8:	d0 40       	sbci	r29, 0x00	; 0
    46da:	0c 92       	st	X, r0
    46dc:	c1 51       	subi	r28, 0x11	; 17
    46de:	df 4f       	sbci	r29, 0xFF	; 255
    46e0:	e8 81       	ld	r30, Y
    46e2:	f9 81       	ldd	r31, Y+1	; 0x01
    46e4:	cf 5e       	subi	r28, 0xEF	; 239
    46e6:	d0 40       	sbci	r29, 0x00	; 0
    46e8:	31 96       	adiw	r30, 0x01	; 1
    46ea:	c1 51       	subi	r28, 0x11	; 17
    46ec:	df 4f       	sbci	r29, 0xFF	; 255
    46ee:	f9 83       	std	Y+1, r31	; 0x01
    46f0:	e8 83       	st	Y, r30
    46f2:	cf 5e       	subi	r28, 0xEF	; 239
    46f4:	d0 40       	sbci	r29, 0x00	; 0
    46f6:	cd 50       	subi	r28, 0x0D	; 13
    46f8:	df 4f       	sbci	r29, 0xFF	; 255
    46fa:	f8 81       	ld	r31, Y
    46fc:	c3 5f       	subi	r28, 0xF3	; 243
    46fe:	d0 40       	sbci	r29, 0x00	; 0
    4700:	f1 50       	subi	r31, 0x01	; 1
    4702:	cd 50       	subi	r28, 0x0D	; 13
    4704:	df 4f       	sbci	r29, 0xFF	; 255
    4706:	f8 83       	st	Y, r31
    4708:	c3 5f       	subi	r28, 0xF3	; 243
    470a:	d0 40       	sbci	r29, 0x00	; 0
    470c:	cd 50       	subi	r28, 0x0D	; 13
    470e:	df 4f       	sbci	r29, 0xFF	; 255
    4710:	28 81       	ld	r18, Y
    4712:	c3 5f       	subi	r28, 0xF3	; 243
    4714:	d0 40       	sbci	r29, 0x00	; 0
    4716:	22 23       	and	r18, r18
    4718:	31 f6       	brne	.-116    	; 0x46a6 <main+0x344>
	u8 message6[] = "You";
    471a:	fe 01       	movw	r30, r28
    471c:	e9 59       	subi	r30, 0x99	; 153
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	80 91 a8 00 	lds	r24, 0x00A8
    4724:	90 91 a9 00 	lds	r25, 0x00A9
    4728:	a0 91 aa 00 	lds	r26, 0x00AA
    472c:	b0 91 ab 00 	lds	r27, 0x00AB
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03

	u8 received1[16] = ""; // Ensure this buffer is large enough to hold the read data
    4738:	fe 01       	movw	r30, r28
    473a:	e5 59       	subi	r30, 0x95	; 149
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	10 82       	st	Z, r1
    4740:	11 82       	std	Z+1, r1	; 0x01
    4742:	12 82       	std	Z+2, r1	; 0x02
    4744:	13 82       	std	Z+3, r1	; 0x03
    4746:	8c e0       	ldi	r24, 0x0C	; 12
    4748:	34 96       	adiw	r30, 0x04	; 4
    474a:	df 01       	movw	r26, r30
    474c:	28 2f       	mov	r18, r24
    474e:	1d 92       	st	X+, r1
    4750:	2a 95       	dec	r18
    4752:	e9 f7       	brne	.-6      	; 0x474e <main+0x3ec>
	u8 received2[16] = "";
    4754:	fe 01       	movw	r30, r28
    4756:	e5 58       	subi	r30, 0x85	; 133
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	10 82       	st	Z, r1
    475c:	11 82       	std	Z+1, r1	; 0x01
    475e:	12 82       	std	Z+2, r1	; 0x02
    4760:	13 82       	std	Z+3, r1	; 0x03
    4762:	8c e0       	ldi	r24, 0x0C	; 12
    4764:	34 96       	adiw	r30, 0x04	; 4
    4766:	df 01       	movw	r26, r30
    4768:	28 2f       	mov	r18, r24
    476a:	1d 92       	st	X+, r1
    476c:	2a 95       	dec	r18
    476e:	e9 f7       	brne	.-6      	; 0x476a <main+0x408>
	u8 received3[16] = "";
    4770:	fe 01       	movw	r30, r28
    4772:	e5 57       	subi	r30, 0x75	; 117
    4774:	ff 4f       	sbci	r31, 0xFF	; 255
    4776:	10 82       	st	Z, r1
    4778:	11 82       	std	Z+1, r1	; 0x01
    477a:	12 82       	std	Z+2, r1	; 0x02
    477c:	13 82       	std	Z+3, r1	; 0x03
    477e:	8c e0       	ldi	r24, 0x0C	; 12
    4780:	34 96       	adiw	r30, 0x04	; 4
    4782:	df 01       	movw	r26, r30
    4784:	28 2f       	mov	r18, r24
    4786:	1d 92       	st	X+, r1
    4788:	2a 95       	dec	r18
    478a:	e9 f7       	brne	.-6      	; 0x4786 <main+0x424>
	u8 received4[16] = "";
    478c:	fe 01       	movw	r30, r28
    478e:	e5 56       	subi	r30, 0x65	; 101
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	10 82       	st	Z, r1
    4794:	11 82       	std	Z+1, r1	; 0x01
    4796:	12 82       	std	Z+2, r1	; 0x02
    4798:	13 82       	std	Z+3, r1	; 0x03
    479a:	8c e0       	ldi	r24, 0x0C	; 12
    479c:	34 96       	adiw	r30, 0x04	; 4
    479e:	df 01       	movw	r26, r30
    47a0:	28 2f       	mov	r18, r24
    47a2:	1d 92       	st	X+, r1
    47a4:	2a 95       	dec	r18
    47a6:	e9 f7       	brne	.-6      	; 0x47a2 <main+0x440>
	u8 received5[16] = "";
    47a8:	fe 01       	movw	r30, r28
    47aa:	e5 55       	subi	r30, 0x55	; 85
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	10 82       	st	Z, r1
    47b0:	11 82       	std	Z+1, r1	; 0x01
    47b2:	12 82       	std	Z+2, r1	; 0x02
    47b4:	13 82       	std	Z+3, r1	; 0x03
    47b6:	8c e0       	ldi	r24, 0x0C	; 12
    47b8:	34 96       	adiw	r30, 0x04	; 4
    47ba:	df 01       	movw	r26, r30
    47bc:	28 2f       	mov	r18, r24
    47be:	1d 92       	st	X+, r1
    47c0:	2a 95       	dec	r18
    47c2:	e9 f7       	brne	.-6      	; 0x47be <main+0x45c>
	u8 received6[16] = "";
    47c4:	fe 01       	movw	r30, r28
    47c6:	e5 54       	subi	r30, 0x45	; 69
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	10 82       	st	Z, r1
    47cc:	11 82       	std	Z+1, r1	; 0x01
    47ce:	12 82       	std	Z+2, r1	; 0x02
    47d0:	13 82       	std	Z+3, r1	; 0x03
    47d2:	8c e0       	ldi	r24, 0x0C	; 12
    47d4:	34 96       	adiw	r30, 0x04	; 4
    47d6:	df 01       	movw	r26, r30
    47d8:	28 2f       	mov	r18, r24
    47da:	1d 92       	st	X+, r1
    47dc:	2a 95       	dec	r18
    47de:	e9 f7       	brne	.-6      	; 0x47da <main+0x478>
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	a8 ec       	ldi	r26, 0xC8	; 200
    47e6:	b2 e4       	ldi	r27, 0x42	; 66
    47e8:	8b 87       	std	Y+11, r24	; 0x0b
    47ea:	9c 87       	std	Y+12, r25	; 0x0c
    47ec:	ad 87       	std	Y+13, r26	; 0x0d
    47ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	4a e7       	ldi	r20, 0x7A	; 122
    47fe:	55 e4       	ldi	r21, 0x45	; 69
    4800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	8f 83       	std	Y+7, r24	; 0x07
    480a:	98 87       	std	Y+8, r25	; 0x08
    480c:	a9 87       	std	Y+9, r26	; 0x09
    480e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4810:	6f 81       	ldd	r22, Y+7	; 0x07
    4812:	78 85       	ldd	r23, Y+8	; 0x08
    4814:	89 85       	ldd	r24, Y+9	; 0x09
    4816:	9a 85       	ldd	r25, Y+10	; 0x0a
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	40 e8       	ldi	r20, 0x80	; 128
    481e:	5f e3       	ldi	r21, 0x3F	; 63
    4820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4824:	88 23       	and	r24, r24
    4826:	2c f4       	brge	.+10     	; 0x4832 <main+0x4d0>
		__ticks = 1;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
    4830:	3f c0       	rjmp	.+126    	; 0x48b0 <main+0x54e>
	else if (__tmp > 65535)
    4832:	6f 81       	ldd	r22, Y+7	; 0x07
    4834:	78 85       	ldd	r23, Y+8	; 0x08
    4836:	89 85       	ldd	r24, Y+9	; 0x09
    4838:	9a 85       	ldd	r25, Y+10	; 0x0a
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	3f ef       	ldi	r19, 0xFF	; 255
    483e:	4f e7       	ldi	r20, 0x7F	; 127
    4840:	57 e4       	ldi	r21, 0x47	; 71
    4842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4846:	18 16       	cp	r1, r24
    4848:	4c f5       	brge	.+82     	; 0x489c <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    484a:	6b 85       	ldd	r22, Y+11	; 0x0b
    484c:	7c 85       	ldd	r23, Y+12	; 0x0c
    484e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4850:	9e 85       	ldd	r25, Y+14	; 0x0e
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	40 e2       	ldi	r20, 0x20	; 32
    4858:	51 e4       	ldi	r21, 0x41	; 65
    485a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	bc 01       	movw	r22, r24
    4864:	cd 01       	movw	r24, r26
    4866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	9e 83       	std	Y+6, r25	; 0x06
    4870:	8d 83       	std	Y+5, r24	; 0x05
    4872:	0f c0       	rjmp	.+30     	; 0x4892 <main+0x530>
    4874:	80 e9       	ldi	r24, 0x90	; 144
    4876:	91 e0       	ldi	r25, 0x01	; 1
    4878:	9c 83       	std	Y+4, r25	; 0x04
    487a:	8b 83       	std	Y+3, r24	; 0x03
    487c:	8b 81       	ldd	r24, Y+3	; 0x03
    487e:	9c 81       	ldd	r25, Y+4	; 0x04
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	f1 f7       	brne	.-4      	; 0x4880 <main+0x51e>
    4884:	9c 83       	std	Y+4, r25	; 0x04
    4886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4888:	8d 81       	ldd	r24, Y+5	; 0x05
    488a:	9e 81       	ldd	r25, Y+6	; 0x06
    488c:	01 97       	sbiw	r24, 0x01	; 1
    488e:	9e 83       	std	Y+6, r25	; 0x06
    4890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4892:	8d 81       	ldd	r24, Y+5	; 0x05
    4894:	9e 81       	ldd	r25, Y+6	; 0x06
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	69 f7       	brne	.-38     	; 0x4874 <main+0x512>
    489a:	14 c0       	rjmp	.+40     	; 0x48c4 <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489c:	6f 81       	ldd	r22, Y+7	; 0x07
    489e:	78 85       	ldd	r23, Y+8	; 0x08
    48a0:	89 85       	ldd	r24, Y+9	; 0x09
    48a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	8d 83       	std	Y+5, r24	; 0x05
    48b0:	8d 81       	ldd	r24, Y+5	; 0x05
    48b2:	9e 81       	ldd	r25, Y+6	; 0x06
    48b4:	9a 83       	std	Y+2, r25	; 0x02
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	9a 81       	ldd	r25, Y+2	; 0x02
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <main+0x55a>
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	89 83       	std	Y+1, r24	; 0x01
//	received4[sizeof(message4) - 1] = '\0';
//	received5[sizeof(message5) - 1] = '\0';
//	received6[sizeof(message6) - 1] = '\0';

	while (1) {
		u8 currentMessage[16] = "";
    48c4:	fe 01       	movw	r30, r28
    48c6:	e5 53       	subi	r30, 0x35	; 53
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	10 82       	st	Z, r1
    48cc:	11 82       	std	Z+1, r1	; 0x01
    48ce:	12 82       	std	Z+2, r1	; 0x02
    48d0:	13 82       	std	Z+3, r1	; 0x03
    48d2:	8c e0       	ldi	r24, 0x0C	; 12
    48d4:	34 96       	adiw	r30, 0x04	; 4
    48d6:	df 01       	movw	r26, r30
    48d8:	28 2f       	mov	r18, r24
    48da:	1d 92       	st	X+, r1
    48dc:	2a 95       	dec	r18
    48de:	e9 f7       	brne	.-6      	; 0x48da <main+0x578>

		if (Digital_Values[0] > 837 && Digital_Values[2] > 837
    48e0:	80 91 0b 02 	lds	r24, 0x020B
    48e4:	90 91 0c 02 	lds	r25, 0x020C
    48e8:	a3 e0       	ldi	r26, 0x03	; 3
    48ea:	86 34       	cpi	r24, 0x46	; 70
    48ec:	9a 07       	cpc	r25, r26
    48ee:	50 f1       	brcs	.+84     	; 0x4944 <main+0x5e2>
    48f0:	80 91 0f 02 	lds	r24, 0x020F
    48f4:	90 91 10 02 	lds	r25, 0x0210
    48f8:	b3 e0       	ldi	r27, 0x03	; 3
    48fa:	86 34       	cpi	r24, 0x46	; 70
    48fc:	9b 07       	cpc	r25, r27
    48fe:	10 f1       	brcs	.+68     	; 0x4944 <main+0x5e2>
    4900:	80 91 11 02 	lds	r24, 0x0211
    4904:	90 91 12 02 	lds	r25, 0x0212
    4908:	e3 e0       	ldi	r30, 0x03	; 3
    490a:	86 34       	cpi	r24, 0x46	; 70
    490c:	9e 07       	cpc	r25, r30
    490e:	d0 f0       	brcs	.+52     	; 0x4944 <main+0x5e2>
    4910:	80 91 13 02 	lds	r24, 0x0213
    4914:	90 91 14 02 	lds	r25, 0x0214
    4918:	f3 e0       	ldi	r31, 0x03	; 3
    491a:	85 34       	cpi	r24, 0x45	; 69
    491c:	9f 07       	cpc	r25, r31
    491e:	90 f4       	brcc	.+36     	; 0x4944 <main+0x5e2>
    4920:	80 91 0d 02 	lds	r24, 0x020D
    4924:	90 91 0e 02 	lds	r25, 0x020E
    4928:	23 e0       	ldi	r18, 0x03	; 3
    492a:	85 34       	cpi	r24, 0x45	; 69
    492c:	92 07       	cpc	r25, r18
    492e:	50 f4       	brcc	.+20     	; 0x4944 <main+0x5e2>
				&& Digital_Values[3] > 837 && Digital_Values[4] < 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, received1);
    4930:	ce 01       	movw	r24, r28
    4932:	85 53       	subi	r24, 0x35	; 53
    4934:	9f 4f       	sbci	r25, 0xFF	; 255
    4936:	9e 01       	movw	r18, r28
    4938:	25 59       	subi	r18, 0x95	; 149
    493a:	3f 4f       	sbci	r19, 0xFF	; 255
    493c:	b9 01       	movw	r22, r18
    493e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4942:	fc c0       	rjmp	.+504    	; 0x4b3c <main+0x7da>
		} else if (Digital_Values[2] > 837 && Digital_Values[3] > 837
    4944:	80 91 0f 02 	lds	r24, 0x020F
    4948:	90 91 10 02 	lds	r25, 0x0210
    494c:	a3 e0       	ldi	r26, 0x03	; 3
    494e:	86 34       	cpi	r24, 0x46	; 70
    4950:	9a 07       	cpc	r25, r26
    4952:	50 f1       	brcs	.+84     	; 0x49a8 <main+0x646>
    4954:	80 91 11 02 	lds	r24, 0x0211
    4958:	90 91 12 02 	lds	r25, 0x0212
    495c:	b3 e0       	ldi	r27, 0x03	; 3
    495e:	86 34       	cpi	r24, 0x46	; 70
    4960:	9b 07       	cpc	r25, r27
    4962:	10 f1       	brcs	.+68     	; 0x49a8 <main+0x646>
    4964:	80 91 0b 02 	lds	r24, 0x020B
    4968:	90 91 0c 02 	lds	r25, 0x020C
    496c:	e3 e0       	ldi	r30, 0x03	; 3
    496e:	85 34       	cpi	r24, 0x45	; 69
    4970:	9e 07       	cpc	r25, r30
    4972:	d0 f4       	brcc	.+52     	; 0x49a8 <main+0x646>
    4974:	80 91 0d 02 	lds	r24, 0x020D
    4978:	90 91 0e 02 	lds	r25, 0x020E
    497c:	f3 e0       	ldi	r31, 0x03	; 3
    497e:	85 34       	cpi	r24, 0x45	; 69
    4980:	9f 07       	cpc	r25, r31
    4982:	90 f4       	brcc	.+36     	; 0x49a8 <main+0x646>
    4984:	80 91 13 02 	lds	r24, 0x0213
    4988:	90 91 14 02 	lds	r25, 0x0214
    498c:	23 e0       	ldi	r18, 0x03	; 3
    498e:	85 34       	cpi	r24, 0x45	; 69
    4990:	92 07       	cpc	r25, r18
    4992:	50 f4       	brcc	.+20     	; 0x49a8 <main+0x646>
				&& Digital_Values[0] < 837 && Digital_Values[1] < 837
				&& Digital_Values[4] < 837) {
			strcpy(currentMessage, received2);
    4994:	ce 01       	movw	r24, r28
    4996:	85 53       	subi	r24, 0x35	; 53
    4998:	9f 4f       	sbci	r25, 0xFF	; 255
    499a:	9e 01       	movw	r18, r28
    499c:	25 58       	subi	r18, 0x85	; 133
    499e:	3f 4f       	sbci	r19, 0xFF	; 255
    49a0:	b9 01       	movw	r22, r18
    49a2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    49a6:	ca c0       	rjmp	.+404    	; 0x4b3c <main+0x7da>
		} else if (Digital_Values[3] > 837 && Digital_Values[0] < 837
    49a8:	80 91 11 02 	lds	r24, 0x0211
    49ac:	90 91 12 02 	lds	r25, 0x0212
    49b0:	a3 e0       	ldi	r26, 0x03	; 3
    49b2:	86 34       	cpi	r24, 0x46	; 70
    49b4:	9a 07       	cpc	r25, r26
    49b6:	50 f1       	brcs	.+84     	; 0x4a0c <main+0x6aa>
    49b8:	80 91 0b 02 	lds	r24, 0x020B
    49bc:	90 91 0c 02 	lds	r25, 0x020C
    49c0:	b3 e0       	ldi	r27, 0x03	; 3
    49c2:	85 34       	cpi	r24, 0x45	; 69
    49c4:	9b 07       	cpc	r25, r27
    49c6:	10 f5       	brcc	.+68     	; 0x4a0c <main+0x6aa>
    49c8:	80 91 0d 02 	lds	r24, 0x020D
    49cc:	90 91 0e 02 	lds	r25, 0x020E
    49d0:	e3 e0       	ldi	r30, 0x03	; 3
    49d2:	85 34       	cpi	r24, 0x45	; 69
    49d4:	9e 07       	cpc	r25, r30
    49d6:	d0 f4       	brcc	.+52     	; 0x4a0c <main+0x6aa>
    49d8:	80 91 0f 02 	lds	r24, 0x020F
    49dc:	90 91 10 02 	lds	r25, 0x0210
    49e0:	f3 e0       	ldi	r31, 0x03	; 3
    49e2:	85 34       	cpi	r24, 0x45	; 69
    49e4:	9f 07       	cpc	r25, r31
    49e6:	90 f4       	brcc	.+36     	; 0x4a0c <main+0x6aa>
    49e8:	80 91 13 02 	lds	r24, 0x0213
    49ec:	90 91 14 02 	lds	r25, 0x0214
    49f0:	23 e0       	ldi	r18, 0x03	; 3
    49f2:	85 34       	cpi	r24, 0x45	; 69
    49f4:	92 07       	cpc	r25, r18
    49f6:	50 f4       	brcc	.+20     	; 0x4a0c <main+0x6aa>
				&& Digital_Values[1] < 837 && Digital_Values[2] < 837
				&& Digital_Values[4] < 837) {
			strcpy(currentMessage, received3);
    49f8:	ce 01       	movw	r24, r28
    49fa:	85 53       	subi	r24, 0x35	; 53
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	9e 01       	movw	r18, r28
    4a00:	25 57       	subi	r18, 0x75	; 117
    4a02:	3f 4f       	sbci	r19, 0xFF	; 255
    4a04:	b9 01       	movw	r22, r18
    4a06:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4a0a:	98 c0       	rjmp	.+304    	; 0x4b3c <main+0x7da>
		} else if (Digital_Values[1] > 837 && Digital_Values[2] > 837
    4a0c:	80 91 0d 02 	lds	r24, 0x020D
    4a10:	90 91 0e 02 	lds	r25, 0x020E
    4a14:	a3 e0       	ldi	r26, 0x03	; 3
    4a16:	86 34       	cpi	r24, 0x46	; 70
    4a18:	9a 07       	cpc	r25, r26
    4a1a:	50 f1       	brcs	.+84     	; 0x4a70 <main+0x70e>
    4a1c:	80 91 0f 02 	lds	r24, 0x020F
    4a20:	90 91 10 02 	lds	r25, 0x0210
    4a24:	b3 e0       	ldi	r27, 0x03	; 3
    4a26:	86 34       	cpi	r24, 0x46	; 70
    4a28:	9b 07       	cpc	r25, r27
    4a2a:	10 f1       	brcs	.+68     	; 0x4a70 <main+0x70e>
    4a2c:	80 91 11 02 	lds	r24, 0x0211
    4a30:	90 91 12 02 	lds	r25, 0x0212
    4a34:	e3 e0       	ldi	r30, 0x03	; 3
    4a36:	86 34       	cpi	r24, 0x46	; 70
    4a38:	9e 07       	cpc	r25, r30
    4a3a:	d0 f0       	brcs	.+52     	; 0x4a70 <main+0x70e>
    4a3c:	80 91 13 02 	lds	r24, 0x0213
    4a40:	90 91 14 02 	lds	r25, 0x0214
    4a44:	f3 e0       	ldi	r31, 0x03	; 3
    4a46:	86 34       	cpi	r24, 0x46	; 70
    4a48:	9f 07       	cpc	r25, r31
    4a4a:	90 f0       	brcs	.+36     	; 0x4a70 <main+0x70e>
    4a4c:	80 91 0b 02 	lds	r24, 0x020B
    4a50:	90 91 0c 02 	lds	r25, 0x020C
    4a54:	23 e0       	ldi	r18, 0x03	; 3
    4a56:	85 34       	cpi	r24, 0x45	; 69
    4a58:	92 07       	cpc	r25, r18
    4a5a:	50 f4       	brcc	.+20     	; 0x4a70 <main+0x70e>
				&& Digital_Values[3] > 837 && Digital_Values[4] > 837
				&& Digital_Values[0] < 837) {
			strcpy(currentMessage, received4);
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	85 53       	subi	r24, 0x35	; 53
    4a60:	9f 4f       	sbci	r25, 0xFF	; 255
    4a62:	9e 01       	movw	r18, r28
    4a64:	25 56       	subi	r18, 0x65	; 101
    4a66:	3f 4f       	sbci	r19, 0xFF	; 255
    4a68:	b9 01       	movw	r22, r18
    4a6a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4a6e:	66 c0       	rjmp	.+204    	; 0x4b3c <main+0x7da>
		} else if (Digital_Values[0] > 837 && Digital_Values[3] > 837
    4a70:	80 91 0b 02 	lds	r24, 0x020B
    4a74:	90 91 0c 02 	lds	r25, 0x020C
    4a78:	a3 e0       	ldi	r26, 0x03	; 3
    4a7a:	86 34       	cpi	r24, 0x46	; 70
    4a7c:	9a 07       	cpc	r25, r26
    4a7e:	50 f1       	brcs	.+84     	; 0x4ad4 <main+0x772>
    4a80:	80 91 11 02 	lds	r24, 0x0211
    4a84:	90 91 12 02 	lds	r25, 0x0212
    4a88:	b3 e0       	ldi	r27, 0x03	; 3
    4a8a:	86 34       	cpi	r24, 0x46	; 70
    4a8c:	9b 07       	cpc	r25, r27
    4a8e:	10 f1       	brcs	.+68     	; 0x4ad4 <main+0x772>
    4a90:	80 91 13 02 	lds	r24, 0x0213
    4a94:	90 91 14 02 	lds	r25, 0x0214
    4a98:	e3 e0       	ldi	r30, 0x03	; 3
    4a9a:	86 34       	cpi	r24, 0x46	; 70
    4a9c:	9e 07       	cpc	r25, r30
    4a9e:	d0 f0       	brcs	.+52     	; 0x4ad4 <main+0x772>
    4aa0:	80 91 0f 02 	lds	r24, 0x020F
    4aa4:	90 91 10 02 	lds	r25, 0x0210
    4aa8:	f3 e0       	ldi	r31, 0x03	; 3
    4aaa:	85 34       	cpi	r24, 0x45	; 69
    4aac:	9f 07       	cpc	r25, r31
    4aae:	90 f4       	brcc	.+36     	; 0x4ad4 <main+0x772>
    4ab0:	80 91 0d 02 	lds	r24, 0x020D
    4ab4:	90 91 0e 02 	lds	r25, 0x020E
    4ab8:	23 e0       	ldi	r18, 0x03	; 3
    4aba:	85 34       	cpi	r24, 0x45	; 69
    4abc:	92 07       	cpc	r25, r18
    4abe:	50 f4       	brcc	.+20     	; 0x4ad4 <main+0x772>
				&& Digital_Values[4] > 837 && Digital_Values[2] < 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, received5);
    4ac0:	ce 01       	movw	r24, r28
    4ac2:	85 53       	subi	r24, 0x35	; 53
    4ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac6:	9e 01       	movw	r18, r28
    4ac8:	25 55       	subi	r18, 0x55	; 85
    4aca:	3f 4f       	sbci	r19, 0xFF	; 255
    4acc:	b9 01       	movw	r22, r18
    4ace:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4ad2:	34 c0       	rjmp	.+104    	; 0x4b3c <main+0x7da>
		} else if (Digital_Values[0] > 837 && Digital_Values[3] > 837
    4ad4:	80 91 0b 02 	lds	r24, 0x020B
    4ad8:	90 91 0c 02 	lds	r25, 0x020C
    4adc:	a3 e0       	ldi	r26, 0x03	; 3
    4ade:	86 34       	cpi	r24, 0x46	; 70
    4ae0:	9a 07       	cpc	r25, r26
    4ae2:	50 f1       	brcs	.+84     	; 0x4b38 <main+0x7d6>
    4ae4:	80 91 11 02 	lds	r24, 0x0211
    4ae8:	90 91 12 02 	lds	r25, 0x0212
    4aec:	b3 e0       	ldi	r27, 0x03	; 3
    4aee:	86 34       	cpi	r24, 0x46	; 70
    4af0:	9b 07       	cpc	r25, r27
    4af2:	10 f1       	brcs	.+68     	; 0x4b38 <main+0x7d6>
    4af4:	80 91 13 02 	lds	r24, 0x0213
    4af8:	90 91 14 02 	lds	r25, 0x0214
    4afc:	e3 e0       	ldi	r30, 0x03	; 3
    4afe:	86 34       	cpi	r24, 0x46	; 70
    4b00:	9e 07       	cpc	r25, r30
    4b02:	d0 f0       	brcs	.+52     	; 0x4b38 <main+0x7d6>
    4b04:	80 91 0f 02 	lds	r24, 0x020F
    4b08:	90 91 10 02 	lds	r25, 0x0210
    4b0c:	f3 e0       	ldi	r31, 0x03	; 3
    4b0e:	86 34       	cpi	r24, 0x46	; 70
    4b10:	9f 07       	cpc	r25, r31
    4b12:	90 f0       	brcs	.+36     	; 0x4b38 <main+0x7d6>
    4b14:	80 91 0d 02 	lds	r24, 0x020D
    4b18:	90 91 0e 02 	lds	r25, 0x020E
    4b1c:	23 e0       	ldi	r18, 0x03	; 3
    4b1e:	85 34       	cpi	r24, 0x45	; 69
    4b20:	92 07       	cpc	r25, r18
    4b22:	50 f4       	brcc	.+20     	; 0x4b38 <main+0x7d6>
				&& Digital_Values[4] > 837 && Digital_Values[2] > 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, received6);
    4b24:	ce 01       	movw	r24, r28
    4b26:	85 53       	subi	r24, 0x35	; 53
    4b28:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2a:	9e 01       	movw	r18, r28
    4b2c:	25 54       	subi	r18, 0x45	; 69
    4b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b30:	b9 01       	movw	r22, r18
    4b32:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <main+0x7da>
		} else {
			LCD_VoidClearScreen();
    4b38:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_VoidClearScreen>
		}

		if (strcmp(lastMessage, currentMessage) != 0) {
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	0f 96       	adiw	r24, 0x0f	; 15
    4b40:	9e 01       	movw	r18, r28
    4b42:	25 53       	subi	r18, 0x35	; 53
    4b44:	3f 4f       	sbci	r19, 0xFF	; 255
    4b46:	b9 01       	movw	r22, r18
    4b48:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <strcmp>
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <main+0x7f0>
    4b50:	b9 ce       	rjmp	.-654    	; 0x48c4 <main+0x562>
			displayMessage(currentMessage);
    4b52:	ce 01       	movw	r24, r28
    4b54:	85 53       	subi	r24, 0x35	; 53
    4b56:	9f 4f       	sbci	r25, 0xFF	; 255
    4b58:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <displayMessage>
			strcpy(lastMessage, currentMessage);
    4b5c:	ce 01       	movw	r24, r28
    4b5e:	0f 96       	adiw	r24, 0x0f	; 15
    4b60:	9e 01       	movw	r18, r28
    4b62:	25 53       	subi	r18, 0x35	; 53
    4b64:	3f 4f       	sbci	r19, 0xFF	; 255
    4b66:	b9 01       	movw	r22, r18
    4b68:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strcpy>
    4b6c:	ab ce       	rjmp	.-682    	; 0x48c4 <main+0x562>

00004b6e <__mulsi3>:
    4b6e:	62 9f       	mul	r22, r18
    4b70:	d0 01       	movw	r26, r0
    4b72:	73 9f       	mul	r23, r19
    4b74:	f0 01       	movw	r30, r0
    4b76:	82 9f       	mul	r24, r18
    4b78:	e0 0d       	add	r30, r0
    4b7a:	f1 1d       	adc	r31, r1
    4b7c:	64 9f       	mul	r22, r20
    4b7e:	e0 0d       	add	r30, r0
    4b80:	f1 1d       	adc	r31, r1
    4b82:	92 9f       	mul	r25, r18
    4b84:	f0 0d       	add	r31, r0
    4b86:	83 9f       	mul	r24, r19
    4b88:	f0 0d       	add	r31, r0
    4b8a:	74 9f       	mul	r23, r20
    4b8c:	f0 0d       	add	r31, r0
    4b8e:	65 9f       	mul	r22, r21
    4b90:	f0 0d       	add	r31, r0
    4b92:	99 27       	eor	r25, r25
    4b94:	72 9f       	mul	r23, r18
    4b96:	b0 0d       	add	r27, r0
    4b98:	e1 1d       	adc	r30, r1
    4b9a:	f9 1f       	adc	r31, r25
    4b9c:	63 9f       	mul	r22, r19
    4b9e:	b0 0d       	add	r27, r0
    4ba0:	e1 1d       	adc	r30, r1
    4ba2:	f9 1f       	adc	r31, r25
    4ba4:	bd 01       	movw	r22, r26
    4ba6:	cf 01       	movw	r24, r30
    4ba8:	11 24       	eor	r1, r1
    4baa:	08 95       	ret

00004bac <__divmodhi4>:
    4bac:	97 fb       	bst	r25, 7
    4bae:	09 2e       	mov	r0, r25
    4bb0:	07 26       	eor	r0, r23
    4bb2:	0a d0       	rcall	.+20     	; 0x4bc8 <__divmodhi4_neg1>
    4bb4:	77 fd       	sbrc	r23, 7
    4bb6:	04 d0       	rcall	.+8      	; 0x4bc0 <__divmodhi4_neg2>
    4bb8:	49 d0       	rcall	.+146    	; 0x4c4c <__udivmodhi4>
    4bba:	06 d0       	rcall	.+12     	; 0x4bc8 <__divmodhi4_neg1>
    4bbc:	00 20       	and	r0, r0
    4bbe:	1a f4       	brpl	.+6      	; 0x4bc6 <__divmodhi4_exit>

00004bc0 <__divmodhi4_neg2>:
    4bc0:	70 95       	com	r23
    4bc2:	61 95       	neg	r22
    4bc4:	7f 4f       	sbci	r23, 0xFF	; 255

00004bc6 <__divmodhi4_exit>:
    4bc6:	08 95       	ret

00004bc8 <__divmodhi4_neg1>:
    4bc8:	f6 f7       	brtc	.-4      	; 0x4bc6 <__divmodhi4_exit>
    4bca:	90 95       	com	r25
    4bcc:	81 95       	neg	r24
    4bce:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd0:	08 95       	ret

00004bd2 <__udivmodsi4>:
    4bd2:	a1 e2       	ldi	r26, 0x21	; 33
    4bd4:	1a 2e       	mov	r1, r26
    4bd6:	aa 1b       	sub	r26, r26
    4bd8:	bb 1b       	sub	r27, r27
    4bda:	fd 01       	movw	r30, r26
    4bdc:	0d c0       	rjmp	.+26     	; 0x4bf8 <__udivmodsi4_ep>

00004bde <__udivmodsi4_loop>:
    4bde:	aa 1f       	adc	r26, r26
    4be0:	bb 1f       	adc	r27, r27
    4be2:	ee 1f       	adc	r30, r30
    4be4:	ff 1f       	adc	r31, r31
    4be6:	a2 17       	cp	r26, r18
    4be8:	b3 07       	cpc	r27, r19
    4bea:	e4 07       	cpc	r30, r20
    4bec:	f5 07       	cpc	r31, r21
    4bee:	20 f0       	brcs	.+8      	; 0x4bf8 <__udivmodsi4_ep>
    4bf0:	a2 1b       	sub	r26, r18
    4bf2:	b3 0b       	sbc	r27, r19
    4bf4:	e4 0b       	sbc	r30, r20
    4bf6:	f5 0b       	sbc	r31, r21

00004bf8 <__udivmodsi4_ep>:
    4bf8:	66 1f       	adc	r22, r22
    4bfa:	77 1f       	adc	r23, r23
    4bfc:	88 1f       	adc	r24, r24
    4bfe:	99 1f       	adc	r25, r25
    4c00:	1a 94       	dec	r1
    4c02:	69 f7       	brne	.-38     	; 0x4bde <__udivmodsi4_loop>
    4c04:	60 95       	com	r22
    4c06:	70 95       	com	r23
    4c08:	80 95       	com	r24
    4c0a:	90 95       	com	r25
    4c0c:	9b 01       	movw	r18, r22
    4c0e:	ac 01       	movw	r20, r24
    4c10:	bd 01       	movw	r22, r26
    4c12:	cf 01       	movw	r24, r30
    4c14:	08 95       	ret

00004c16 <__divmodsi4>:
    4c16:	97 fb       	bst	r25, 7
    4c18:	09 2e       	mov	r0, r25
    4c1a:	05 26       	eor	r0, r21
    4c1c:	0e d0       	rcall	.+28     	; 0x4c3a <__divmodsi4_neg1>
    4c1e:	57 fd       	sbrc	r21, 7
    4c20:	04 d0       	rcall	.+8      	; 0x4c2a <__divmodsi4_neg2>
    4c22:	d7 df       	rcall	.-82     	; 0x4bd2 <__udivmodsi4>
    4c24:	0a d0       	rcall	.+20     	; 0x4c3a <__divmodsi4_neg1>
    4c26:	00 1c       	adc	r0, r0
    4c28:	38 f4       	brcc	.+14     	; 0x4c38 <__divmodsi4_exit>

00004c2a <__divmodsi4_neg2>:
    4c2a:	50 95       	com	r21
    4c2c:	40 95       	com	r20
    4c2e:	30 95       	com	r19
    4c30:	21 95       	neg	r18
    4c32:	3f 4f       	sbci	r19, 0xFF	; 255
    4c34:	4f 4f       	sbci	r20, 0xFF	; 255
    4c36:	5f 4f       	sbci	r21, 0xFF	; 255

00004c38 <__divmodsi4_exit>:
    4c38:	08 95       	ret

00004c3a <__divmodsi4_neg1>:
    4c3a:	f6 f7       	brtc	.-4      	; 0x4c38 <__divmodsi4_exit>
    4c3c:	90 95       	com	r25
    4c3e:	80 95       	com	r24
    4c40:	70 95       	com	r23
    4c42:	61 95       	neg	r22
    4c44:	7f 4f       	sbci	r23, 0xFF	; 255
    4c46:	8f 4f       	sbci	r24, 0xFF	; 255
    4c48:	9f 4f       	sbci	r25, 0xFF	; 255
    4c4a:	08 95       	ret

00004c4c <__udivmodhi4>:
    4c4c:	aa 1b       	sub	r26, r26
    4c4e:	bb 1b       	sub	r27, r27
    4c50:	51 e1       	ldi	r21, 0x11	; 17
    4c52:	07 c0       	rjmp	.+14     	; 0x4c62 <__udivmodhi4_ep>

00004c54 <__udivmodhi4_loop>:
    4c54:	aa 1f       	adc	r26, r26
    4c56:	bb 1f       	adc	r27, r27
    4c58:	a6 17       	cp	r26, r22
    4c5a:	b7 07       	cpc	r27, r23
    4c5c:	10 f0       	brcs	.+4      	; 0x4c62 <__udivmodhi4_ep>
    4c5e:	a6 1b       	sub	r26, r22
    4c60:	b7 0b       	sbc	r27, r23

00004c62 <__udivmodhi4_ep>:
    4c62:	88 1f       	adc	r24, r24
    4c64:	99 1f       	adc	r25, r25
    4c66:	5a 95       	dec	r21
    4c68:	a9 f7       	brne	.-22     	; 0x4c54 <__udivmodhi4_loop>
    4c6a:	80 95       	com	r24
    4c6c:	90 95       	com	r25
    4c6e:	bc 01       	movw	r22, r24
    4c70:	cd 01       	movw	r24, r26
    4c72:	08 95       	ret

00004c74 <__prologue_saves__>:
    4c74:	2f 92       	push	r2
    4c76:	3f 92       	push	r3
    4c78:	4f 92       	push	r4
    4c7a:	5f 92       	push	r5
    4c7c:	6f 92       	push	r6
    4c7e:	7f 92       	push	r7
    4c80:	8f 92       	push	r8
    4c82:	9f 92       	push	r9
    4c84:	af 92       	push	r10
    4c86:	bf 92       	push	r11
    4c88:	cf 92       	push	r12
    4c8a:	df 92       	push	r13
    4c8c:	ef 92       	push	r14
    4c8e:	ff 92       	push	r15
    4c90:	0f 93       	push	r16
    4c92:	1f 93       	push	r17
    4c94:	cf 93       	push	r28
    4c96:	df 93       	push	r29
    4c98:	cd b7       	in	r28, 0x3d	; 61
    4c9a:	de b7       	in	r29, 0x3e	; 62
    4c9c:	ca 1b       	sub	r28, r26
    4c9e:	db 0b       	sbc	r29, r27
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	09 94       	ijmp

00004cac <__epilogue_restores__>:
    4cac:	2a 88       	ldd	r2, Y+18	; 0x12
    4cae:	39 88       	ldd	r3, Y+17	; 0x11
    4cb0:	48 88       	ldd	r4, Y+16	; 0x10
    4cb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cba:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cbe:	b9 84       	ldd	r11, Y+9	; 0x09
    4cc0:	c8 84       	ldd	r12, Y+8	; 0x08
    4cc2:	df 80       	ldd	r13, Y+7	; 0x07
    4cc4:	ee 80       	ldd	r14, Y+6	; 0x06
    4cc6:	fd 80       	ldd	r15, Y+5	; 0x05
    4cc8:	0c 81       	ldd	r16, Y+4	; 0x04
    4cca:	1b 81       	ldd	r17, Y+3	; 0x03
    4ccc:	aa 81       	ldd	r26, Y+2	; 0x02
    4cce:	b9 81       	ldd	r27, Y+1	; 0x01
    4cd0:	ce 0f       	add	r28, r30
    4cd2:	d1 1d       	adc	r29, r1
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	f8 94       	cli
    4cd8:	de bf       	out	0x3e, r29	; 62
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	cd bf       	out	0x3d, r28	; 61
    4cde:	ed 01       	movw	r28, r26
    4ce0:	08 95       	ret

00004ce2 <strcmp>:
    4ce2:	fb 01       	movw	r30, r22
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	8d 91       	ld	r24, X+
    4ce8:	01 90       	ld	r0, Z+
    4cea:	80 19       	sub	r24, r0
    4cec:	01 10       	cpse	r0, r1
    4cee:	d9 f3       	breq	.-10     	; 0x4ce6 <strcmp+0x4>
    4cf0:	99 0b       	sbc	r25, r25
    4cf2:	08 95       	ret

00004cf4 <strcpy>:
    4cf4:	fb 01       	movw	r30, r22
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	01 90       	ld	r0, Z+
    4cfa:	0d 92       	st	X+, r0
    4cfc:	00 20       	and	r0, r0
    4cfe:	e1 f7       	brne	.-8      	; 0x4cf8 <strcpy+0x4>
    4d00:	08 95       	ret

00004d02 <_exit>:
    4d02:	f8 94       	cli

00004d04 <__stop_program>:
    4d04:	ff cf       	rjmp	.-2      	; 0x4d04 <__stop_program>
